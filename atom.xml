<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yusen&#39;s Blog</title>
  <subtitle>学习弯道超车的技巧！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://imys.net/"/>
  <updated>2018-07-03T15:24:41.764Z</updated>
  <id>http://imys.net/</id>
  
  <author>
    <name>王昱森</name>
    <email>634206017@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 MIME 类型的服务端推送</title>
    <link href="http://imys.net/20180703/multipart-x-mixed-replace.html"/>
    <id>http://imys.net/20180703/multipart-x-mixed-replace.html</id>
    <published>2018-07-03T15:12:03.000Z</published>
    <updated>2018-07-03T15:24:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>目前就职于视听行业相关的公司，故而需要接触流媒体传输相关技术。</p><p>今天介绍一种基于 MIME 类型的服务端流媒体推送实现。</p><a id="more"></a><h2 id="multipart"><a href="#multipart" class="headerlink" title="multipart"></a>multipart</h2><p>MIME 类型由类型和子类型组成：<code>Content-Type: [type]/[subType]</code>，前者是数据大类别，后者是具体的种类。</p><p><code>multipart</code> 用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据。也就是一个消息可以包含多个消息体。</p><p>我们常见的一般是表单相关的 <code>multipart/form-data</code>，当我们需要在提交表单时上传文件，就需要设置这个类型。<br>电子邮件中使用的类型是 <code>multipart/alternative</code>，包含纯文本（text/plain）和 HTML（text/html）两种数据。<br>其他相关的可以看看 <a href="https://en.wikipedia.org/wiki/MIME#Content-Type" target="_blank" rel="external">维基百科 MIME#Content-Type</a></p><h2 id="x-mixed-replace"><a href="#x-mixed-replace" class="headerlink" title="x-mixed-replace"></a>x-mixed-replace</h2><p><code>multipart/x-mixed-replace</code> 是 Netscape 在 1995 年引入的。与其他的 multipart 子类型相比，新的消息体会覆盖前一个消息体，而不是累加。</p><p>报文格式如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-type: multipart/x-mixed-replace; boundary=--myBoundary</div><div class="line">--myBoundary</div><div class="line">Content-Type: image/png</div><div class="line">Content-length: 100</div><div class="line">stream1...</div><div class="line"></div><div class="line">--myBoundary</div><div class="line">Content-Type: image/png</div><div class="line">Content-length: 100</div><div class="line">stream2...</div><div class="line"></div><div class="line">--myBoundary</div></pre></td></tr></table></figure><p><code>boundary</code> 用来指定一个边界符，用于分割多个消息体，多个消息体之间隔一行。可以指定为任意字符，但为了避免消息体中包含了该字符，尽量复杂一些。</p><p>要实现服务器推送，就是不发送完整的报文，始终发送新的消息体。这样会使 HTTP 连接得到保持，服务器就可以按一定的频率持续推送数据。</p><p>而 <code>multipart/x-mixed-replace</code> 类型的报文是没有结尾的，一旦客户端连接，将可以永远保持连接。</p><p>客户端的运行策略为：客户端连接后，获取到第一段消息体并显示。之后发现下一段消息体的边界符，就认为第一段消息体已结束，开始显示第二段消息体的内容。往复替换，自动更新。</p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>一个不超过 20 行的 NodeJS Demo：<a href="https://github.com/yscoder/multipart-x-mixed-replace-example" target="_blank" rel="external">yscoder/multipart-x-mixed-replace-example</a>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'multipart/x-mixed-replace; boundary=--test'</span> &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> i = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">const</span> content = fs.readFileSync(<span class="string">`./imgs/run<span class="subst">$&#123;i&#125;</span>.png`</span>)</div><div class="line">        res.write(<span class="string">`--test\nContent-Type: image/png\nContent-length: <span class="subst">$&#123;content.length&#125;</span>\n\n`</span>)</div><div class="line">        res.write(content)</div><div class="line">        i = i === <span class="number">20</span> ? <span class="number">1</span> : i + <span class="number">1</span></div><div class="line">        setTimeout(sendData, <span class="number">50</span>)</div><div class="line">    &#125;</div><div class="line">    setTimeout(sendData, <span class="number">50</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">8090</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running!'</span>)</div></pre></td></tr></table></figure><p>网上找了一组包含 20 张图片的人物帧序列图，逐个发送到客户端。浏览器打开本地端口地址后可以看到动画的效果。</p><p>实际运用中一般是连接媒体视频设备获取媒体流然后向客户端发送。客户端只需要使用 <code>img</code> 标签引用接口就可以持续接收到推送数据，监听 <code>onload</code> 事件把每次推送的数据绘制到 <code>canvas</code> 上。</p>]]></content>
    
    <summary type="html">
    
      基于 multipart/x-mixed-replace 的流式图像视频传输的服务端推送技术
    
    </summary>
    
    
      <category term="Server Push" scheme="http://imys.net/tags/Server-Push/"/>
    
      <category term="MIME" scheme="http://imys.net/tags/MIME/"/>
    
      <category term="multipart" scheme="http://imys.net/tags/multipart/"/>
    
      <category term="x-mixed-replace" scheme="http://imys.net/tags/x-mixed-replace/"/>
    
  </entry>
  
  <entry>
    <title>前端静态数据的管理</title>
    <link href="http://imys.net/20180417/front-end-static-data-manage.html"/>
    <id>http://imys.net/20180417/front-end-static-data-manage.html</id>
    <published>2018-04-17T13:18:01.000Z</published>
    <updated>2018-04-17T14:54:37.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态数据"><a href="#静态数据" class="headerlink" title="静态数据"></a>静态数据</h2><p>所谓静态数据，本文内指的是一些静态常量、配置化数据以及枚举类数据等，很少变化或者说很少在运行时变化的数据。</p><p>例如：API 服务器的 <code>rootPath</code>、常用的正则表达式、业务相关的枚举类数据、固定的填充数据以及 i18n 等。</p><p>虽然这些数据很少变化，但在一个大的项目中非常容易到处使用。常见的问题有：</p><ul><li>同样规则的正则表达式，这写一个，那写一个</li><li>业务枚举数据各种迷之 magicNumber 进行判断比较，如 <code>if(this.type === 1)</code>，<code>1</code> 是啥？？？</li><li>对同一种数据的多处定义，A 组件一个 <code>framework: [&#39;Vue&#39;, &#39;React&#39;, &#39;Angular&#39;]</code>，B 组件用的时候又定义一次</li><li>i18n 时，不同模块中的类型场景定义多个描述</li><li>……</li></ul><p>这些问题的出现就给后期项目维护增加了时间和沟通成本，有意识的提取静态数据是必须要做的事。</p><a id="more"></a><h2 id="静态数据分离"><a href="#静态数据分离" class="headerlink" title="静态数据分离"></a>静态数据分离</h2><h3 id="配置、工具类数据"><a href="#配置、工具类数据" class="headerlink" title="配置、工具类数据"></a>配置、工具类数据</h3><p>类似 AJAX、WebSocket 等常用模块配置，可以抽取到一个公共的 <code>appConf.js</code> 文件中，通过引用配置文件对模块进行配置。常用的正则也抽取到一个工具模块中。类似的还有校验类数据，比如允许用户上传的文件大小、文件类型等。</p><h3 id="枚举类数据"><a href="#枚举类数据" class="headerlink" title="枚举类数据"></a>枚举类数据</h3><p>一个用户的角色、权限、状态等数据，前端接收到的一般是 <code>{ role: 0, state: 1 }</code> 这种，那么在代码中通常有三种使用场景：</p><ol><li>内容展示：<code>user.role === 0 ? &#39;管理员&#39; : &#39;成员&#39;</code></li><li>权限判断：<code>user.role === 0 &amp;&amp; doSomething()</code></li><li>选择、过滤时的列表展示：<code>[{ value: 0, text: &#39;管理员&#39;}, { value: 1, text: &#39;成员&#39;}]</code></li></ol><p>此类数据后端都犯不着建个表存储，定个枚举类完事。如果是前后端同构的项目，大家都调用同一个枚举模块就行了。多数情况下，前端也需要对此类数据集中化管理，让之后的代码维护有路径可寻。</p><p>我的做法有：</p><ol><li>由于 JS 目前没有内置枚举类，可以使用对象模拟，或者自己包装一个枚举类的实现。</li><li>抽取到前端 <code>service</code> 层，与同一模块下的业务函数放一块。</li></ol><p>个人更倾向于第二种：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// userService</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAGANER = <span class="number">0</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> MEMBER = <span class="number">1</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> isManager = <span class="function"><span class="params">role</span> =&gt;</span> MAGANER === role</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMember = <span class="function"><span class="params">role</span> =&gt;</span> MEMBER === role</div></pre></td></tr></table></figure><h3 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h3><p>i18n 的数据不仅要按业务模块纵深划分，还要考虑横切的通用类数据。</p><ul><li>纵深：user、project、docs…</li><li>横切：action、date、httpCode…</li></ul><p>如果只按模块划分，那么可能就会出现重复定义的按钮文字、触发动作等，如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">user</span>: &#123;</div><div class="line">        <span class="attr">enter</span>: <span class="string">'保存'</span>,</div><div class="line">        <span class="attr">remove</span>: <span class="string">'删除'</span>,</div><div class="line">        <span class="attr">msgcode</span>: &#123;</div><div class="line">            <span class="number">10001</span>: <span class="string">'添加用户成功！'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">project</span>: &#123;</div><div class="line">        <span class="attr">save</span>: <span class="string">'保存'</span>,</div><div class="line">        <span class="attr">deleted</span>: <span class="string">'删除'</span>,</div><div class="line">        <span class="attr">msgcode</span>: &#123;</div><div class="line">            <span class="number">10001</span>: <span class="string">'添加项目成功！'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>重复场景、语义的文字多处定义，而且属性名也不一致。改善后：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">action</span>: &#123;</div><div class="line">        <span class="attr">enter</span>: <span class="string">'确认'</span>,</div><div class="line">        <span class="attr">save</span>: <span class="string">'保存'</span>,</div><div class="line">        <span class="attr">remove</span>: <span class="string">'删除'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">httpcode</span>: &#123;</div><div class="line">        <span class="number">10001</span>: <span class="string">'添加&#123;0&#125;成功！'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">user</span>: &#123;&#125;,</div><div class="line">    <span class="attr">project</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>内容没什么技术含量，纯粹是出于代码洁癖，就是不想在项目看见任何重复的东西。</p>]]></content>
    
    <summary type="html">
    
      前端静态数据的管理
    
    </summary>
    
    
      <category term="前端" scheme="http://imys.net/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据管理" scheme="http://imys.net/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue最佳实践</title>
    <link href="http://imys.net/20180320/vue-best-practices.html"/>
    <id>http://imys.net/20180320/vue-best-practices.html</id>
    <published>2018-03-20T12:18:51.000Z</published>
    <updated>2018-04-17T14:59:59.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录我在使用 Vue 中发现的一些好的代码实践，希望能够保持更新。🤠</p></blockquote><a id="more"></a><h2 id="this-引用"><a href="#this-引用" class="headerlink" title="this 引用"></a>this 引用</h2><p>在组件作用域内使用箭头函数可以保证 <code>this</code> 永远指向组件本身。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">msg</span>: <span class="string">'hello'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        hello() &#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg) <span class="comment">// this 指向 window</span></div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">msg</span>: <span class="string">'hello'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        hello() &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg) <span class="comment">// this 指向组件</span></div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>绑定字符串不需要加冒号。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:str</span>=<span class="string">"'hello'"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">str</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div></pre></td></tr></table></figure><p>布尔属性省略值时默认为 <code>true</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">my-modal</span> <span class="attr">visible</span>&gt;</span><span class="tag">&lt;/<span class="name">my-modal</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--等价于--&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;my-modal :visible="true"&gt;&lt;/my-modal&gt;--&gt;</span></div></pre></td></tr></table></figure><p>绑定无参函数不需要加括号。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bad，括号多余 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick()"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- good，隐式传递了 event 对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p>只有一行代码的事件函数，可以直接写标签上。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"visible = true"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>表单组件一般都支持双向绑定，实际场景中表单组件值发生变化往往要在 <code>POST or PUT</code> 请求之后。如果直接在 <code>v-model</code> 绑定原始值往往会打破单向数据流。</p><p>使用计算属性的 <code>get/set</code> 方式可以解决这个问题。（也适用 <code>.sync</code>）</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">`</span></div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;input type="radio" v-model="nameVal" value="1"&gt;</div><div class="line">            &lt;input type="radio" v-model="nameVal" value="2"&gt;</div><div class="line">        &lt;/div&gt;`,</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="attr">nameVal</span>: &#123;</div><div class="line">            get() &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">            &#125;,</div><div class="line">            set(val) &#123;</div><div class="line">                <span class="keyword">this</span>.edit(val)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        edit(name) &#123;</div><div class="line">            <span class="keyword">this</span>.$http.put(<span class="string">'/name'</span>, &#123; name &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">this</span>.name = name</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        <span class="keyword">this</span>.$http.get(<span class="string">'/name'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.name = data.name</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h2><p>善用 <code>destory</code> 释放原生事件、第三方组件、全局事件总线等。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">'event-bus'</span></div><div class="line"><span class="keyword">import</span> plugin <span class="keyword">from</span> <span class="string">'plugin'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    created() &#123;</div><div class="line">        bus.$on(<span class="string">'hello'</span>, <span class="keyword">this</span>.hello) <span class="comment">// 注册全局事件</span></div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.onResize) <span class="comment">// DOM 事件</span></div><div class="line">        plugin.init() <span class="comment">// 第三方组件初始化</span></div><div class="line">    &#125;,</div><div class="line">    destoryed() &#123;</div><div class="line">        bus.$off(<span class="string">'hello'</span>, <span class="keyword">this</span>.hello)</div><div class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.onResize)</div><div class="line">        plugin.destory()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>Vue 内置了许多常用修饰符可以让你少写几行代码，提高开发效率。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 输入字符串转数字 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.number</span>=<span class="string">"value"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 输入字符串去前后空格 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"value"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 监听鼠标按键，支持 left, right, middle --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.left</span>=<span class="string">"onLeftClick"</span>&gt;</span>点击鼠标左键<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.right</span>=<span class="string">"onRightClick"</span>&gt;</span>点击鼠标右键<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 停止冒泡，阻止默认行为 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 键盘按下确认键，支持 keycode 和键别名 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">"onEnter"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只执行一次事件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 监听原生事件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click.native</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div></pre></td></tr></table></figure><p>以上是一些常用的修饰符，更多用法可以去文档上找找。</p><h2 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h2><p>切换路由请求数据时，一般都需要兼容两种视图打开方式：路由跳转和直接 URL 输入。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">        $route() &#123;</div><div class="line">            <span class="keyword">this</span>.fetchData()</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    methods() &#123;</div><div class="line">        fetchData() &#123;</div><div class="line">            <span class="comment">// 避免重复请求</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.isLoading) <span class="keyword">return</span></div><div class="line">            <span class="keyword">this</span>.isLoading = <span class="literal">true</span></div><div class="line">            <span class="comment">// 请求数据</span></div><div class="line">            <span class="comment">// ajax...</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        <span class="keyword">this</span>.fetchData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>路由跳转会触发 <code>watch -&gt; $route</code>，如果是未创建的组件还会触发 <code>create</code>，直接 URL 只会触发 <code>created</code> 钩子。一般在两个位置都执行数据请求，再通过判断避免重复请求，还可以利用 <code>isLoading</code> 标记做加载动画。如果使用了 <code>keep-alive</code> 组件，还需要考虑 <code>activated</code> 钩子。</p><h2 id="减少嵌套层级"><a href="#减少嵌套层级" class="headerlink" title="减少嵌套层级"></a>减少嵌套层级</h2><p>组件即使未在 <code>props</code> 声明，也可以传递一些原生 DOM 属性。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-view"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"content-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div></pre></td></tr></table></figure><p>命名插槽中需要放置多个块时，可以利用 <code>template</code> 组件。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div></pre></td></tr></table></figure><p>不管是内置组件还是自己的组件，有时候不需要多一层包裹去添加样式，反而因此增加了嵌套层级。</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器的最佳应用场景应该是值的转换，比如：<code>Date</code> 类型日期转字符串、货币、字符截断、markdown 等等。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 按长度截断文字，补...，中文 = 2</span></div><div class="line"><span class="keyword">const</span> cnReg = <span class="regexp">/[\u4e00-\u9fa5]/</span></div><div class="line">Vue.filter(<span class="string">'ellipsis'</span>, (str, len = <span class="number">10</span>) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> j = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> ret = <span class="string">''</span></div><div class="line">    <span class="keyword">const</span> text = <span class="built_in">String</span>(str).trim()</div><div class="line">    <span class="keyword">const</span> max = text.length</div><div class="line">    <span class="keyword">while</span> (j &lt; max &amp;&amp; i &lt; len) &#123;</div><div class="line">        <span class="keyword">const</span> c = text.charAt(j)</div><div class="line">        ret += c</div><div class="line">        j += <span class="number">1</span></div><div class="line">        i = cnReg.test(c) ? i + <span class="number">2</span> : i + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret === text ? text : <span class="string">`<span class="subst">$&#123;ret&#125;</span>...`</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 日期转相对时间</span></div><div class="line">Vue.filter(<span class="string">'calendar'</span>, value =&gt; moment(value).calendar())</div></pre></td></tr></table></figure><p>也可以作一些业务数据区别展示。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Vue.filter(<span class="string">'userRole'</span>, value =&gt; [<span class="string">'创建者'</span>, <span class="string">'管理员'</span>, <span class="string">'成员'</span>][value])</div></pre></td></tr></table></figure><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><ul><li>布尔属性默认值为 <code>false</code> 可以省略</li><li>数组最好声明默认值 <code>[]</code>，保证数据请求成功前模版里的 <code>v-for</code> 不会出错</li><li>对象也需要注意是否声明了默认值 <code>{}</code>，避免模版中使用 <code>obj.xx</code> 报错</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">visible</span>: Boolen, <span class="comment">// 默认即为 false</span></div><div class="line">        data: <span class="built_in">Array</span>,     <span class="comment">// 需要进行非空判断</span></div><div class="line">        data2: &#123;         <span class="comment">// 可安全使用 v-for</span></div><div class="line">            type: <span class="built_in">Array</span>,</div><div class="line">            <span class="attr">default</span>: []</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">obj</span>: <span class="built_in">Object</span>,     <span class="comment">// 需要进行非空判断</span></div><div class="line">        obj2: &#123;          <span class="comment">// 可安全使用 obj.xx</span></div><div class="line">            type: <span class="built_in">Object</span>,</div><div class="line">            <span class="keyword">default</span>() &#123;</div><div class="line">                <span class="keyword">return</span> &#123;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>如果模版中绑定了 <code>obj.xx</code> 时，需要注意 <code>obj</code> 是否是异步数据，默认值是否为 <code>null</code>。安全起见，可在组件最外层加 <code>v-if</code> 判断。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"!!obj"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;obj.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">obj</span>: <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>对于经常发生变化的一级、二级菜单导航，可以和路由数据结合起来，按模块划分，视图直接引用对应模块的路由数据来生成导航，减少维护成本。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// routes.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> settingRoutes = []</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> userRoutes = []</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> [...settingRoutes, ...userRoutes]</div></pre></td></tr></table></figure><p>菜单组件中：</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in menus"</span> <span class="attr">:key</span>=<span class="string">"item.name"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; settingRoutes &#125; <span class="keyword">from</span> <span class="string">'../routes'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="attr">menus</span>: settingRoutes</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="继承和混合"><a href="#继承和混合" class="headerlink" title="继承和混合"></a>继承和混合</h2><p>用过<code>ElementUI</code>的同学，都知道其 <a href="http://element-cn.eleme.io/#/zh-CN/component/dialog" target="_blank" rel="external">Dialog 组件</a> 是不支持垂直居中，只提供了一个<code>top</code>属性用于设置组件内容节点到顶部的距离。早期 <a href="http://element-cn.eleme.io/1.4/#/zh-CN/component/dialog" target="_blank" rel="external">1.x</a> 版本时 Dialog 组件也不支持<code>append-to-body</code>。我们可以通过继承和混合来扩展这些需要的特性。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// dialogEx.js</span></div><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'ElDialogEx'</span>,</div><div class="line">    <span class="attr">extends</span>: Dialog,</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">appendToBody</span>: &#123;</div><div class="line">            <span class="comment">// 把组件插入 body 下</span></div><div class="line">            type: <span class="built_in">Boolean</span>,</div><div class="line">            <span class="attr">default</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">center</span>: <span class="built_in">Boolean</span> <span class="comment">// 设置垂直居中</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        sizeClass() &#123;</div><div class="line">            <span class="comment">// 这个 sizeClass 计算属性是组件源码里就有的，这里是利用了类名支持字符串拼接的特性，在这个函数里增加了垂直居中的自定义类拼接</span></div><div class="line">            <span class="keyword">return</span> <span class="string">`el-dialog--<span class="subst">$&#123;<span class="keyword">this</span>.size&#125;</span>`</span> + <span class="keyword">this</span>.center ? <span class="string">' dialog-center '</span> : <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.appendToBody) <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.$el)</div><div class="line">    &#125;,</div><div class="line">    beforeDestroy() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.appendToBody) <span class="keyword">this</span>.$el.parentNode.remove(<span class="keyword">this</span>.$el)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>之后你又发现，在其他的一些组件中也需要<code>appendToBody</code>这个特性，那么就可以把相关的代码写成<code>mixins</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// appendToBody.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">appendToBody</span>: &#123;</div><div class="line">            <span class="comment">// 把组件插入 body 下</span></div><div class="line">            type: <span class="built_in">Boolean</span>,</div><div class="line">            <span class="attr">default</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.appendToBody) <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.$el)</div><div class="line">    &#125;,</div><div class="line">    beforeDestroy() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.appendToBody) <span class="keyword">this</span>.$el.parentNode.remove(<span class="keyword">this</span>.$el)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在<code>dialogEx</code>组件可以写的更简单。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// dialogEx.js</span></div><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></div><div class="line"><span class="keyword">import</span> appendToBody <span class="keyword">from</span> <span class="string">'mixins/appendToBody'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'ElDialogEx'</span>,</div><div class="line">    <span class="attr">extends</span>: Dialog,</div><div class="line">    <span class="attr">mixins</span>: [appendToBody],</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">center</span>: <span class="built_in">Boolean</span> <span class="comment">// 设置垂直居中</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        sizeClass() &#123;</div><div class="line">            <span class="comment">// 这个 sizeClass 计算属性是组件源码里就有的，这里是利用了类名支持字符串拼接的特性，在这个函数里增加了垂直居中的自定义类拼接</span></div><div class="line">            <span class="keyword">return</span> <span class="string">`el-dialog--<span class="subst">$&#123;<span class="keyword">this</span>.size&#125;</span>`</span> + <span class="keyword">this</span>.center ? <span class="string">' dialog-center '</span> : <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="第三方库的集成"><a href="#第三方库的集成" class="headerlink" title="第三方库的集成"></a>第三方库的集成</h2><p>第三方库一般是传统的基于 DOM 和原生 js。它们虽然写起来没有使用任何的代码模版，但出于作者的编程经验其实都符合了大众使用预期。</p><p>任何一个库一般都会提供以下的接口：</p><ul><li>使用自定义配置初始化</li><li>可访问的属性</li><li>可调用的功能函数</li><li>事件绑定</li><li>良好的生命周期钩子</li></ul><blockquote><p>如果没有足够的编程经验用原生 js 去写一个插件可能最后就是一团乱麻。这也是 Vue 等众多前端框架的作用，它们约束了一个模块的代码模版，提供了事件管理、生命周期运行、属性和函数的定义，使即使经验不足的人也能写出一个看得过去的模块。</p></blockquote><p>把第三方库转换为一个 Vue 组件，其实就是把这个库的接口挂到 Vue 组件对应的组件选项上去。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Lib <span class="keyword">from</span> <span class="string">'lib'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">options</span>: <span class="built_in">Object</span></div><div class="line">    &#125;,</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">instance</span>: <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        doSomething(xxx) &#123;</div><div class="line">            <span class="comment">// lib 的操作函数</span></div><div class="line">            <span class="comment">// 外部使用 $refs 调用</span></div><div class="line">            <span class="keyword">this</span>.instance.doSomething(xxx)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        libProp() &#123;</div><div class="line">            <span class="comment">// lib 的可访问属性使用计算属性访问</span></div><div class="line">            <span class="comment">// 外部使用 $refs 调用</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.instance.prop</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">        options(val) &#123;</div><div class="line">            <span class="comment">// 监听配置更新，调用 lib 接口更新配置</span></div><div class="line">            <span class="keyword">if</span> (val) <span class="keyword">this</span>.instance.updateOptions(val)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted() &#123;</div><div class="line">        <span class="comment">// mounted 或者 created 对应 lib 实例化并传入自定义配置</span></div><div class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Lib(<span class="keyword">this</span>.$el, <span class="keyword">this</span>.options)</div><div class="line">        <span class="comment">// lib 内的事件 $emit 出去，外部监听</span></div><div class="line">        <span class="keyword">this</span>.instance.on(<span class="string">'update'</span>, (...args) =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'update'</span>, ...args)</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    destroyed() &#123;</div><div class="line">        <span class="comment">// lib 如果提供了 destroy 等销毁资源的函数一般都会对其内部的 DOM 事件解绑</span></div><div class="line">        <span class="keyword">this</span>.instance.destroy()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可能你想把一个库变为一个 Vue 指令。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Lib <span class="keyword">from</span> <span class="string">'lib'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    install(Vue, option = &#123;&#125;) &#123;</div><div class="line">        <span class="comment">// 存放全局配置</span></div><div class="line">        <span class="keyword">const</span> defaults = option</div><div class="line"></div><div class="line">        Vue.directive(<span class="string">'my-directive'</span>, &#123;</div><div class="line">            bind(el, &#123; value &#125;) &#123;</div><div class="line">                <span class="comment">// 当前配置混合全局配置</span></div><div class="line">                <span class="keyword">const</span> options = <span class="built_in">Object</span>.assign(&#123;&#125;, defaults, value)</div><div class="line">                <span class="keyword">const</span> lib = <span class="keyword">new</span> Lib(el, options)</div><div class="line">                el._libInstace = lib <span class="comment">// 缓存 lib 实例</span></div><div class="line">            &#125;,</div><div class="line">            update(el, &#123; value &#125;, vnode) &#123;</div><div class="line">                <span class="comment">// 更新 lib 配置</span></div><div class="line">                el._libInstace.setOptions(value)</div><div class="line">            &#125;,</div><div class="line">            unbind(el) &#123;</div><div class="line">                <span class="comment">// 销毁 lib</span></div><div class="line">                el._libInstace.destroy()</div><div class="line">                <span class="keyword">delete</span> el._libInstace</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>指令有着完善的生命周期钩子，但在数据管理上偏弱。一般用于单一功能的集成，或者只需要一次初始化的插件。</p><blockquote><p>指令中可通过 <code>el</code> 或 <code>el.dataset</code> 进行生命周期间的数据共享。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Vue最佳实践
    
    </summary>
    
    
      <category term="技巧" scheme="http://imys.net/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>复杂单页应用数据管理总结</title>
    <link href="http://imys.net/20180319/complex-spa-data-manage-ko.html"/>
    <id>http://imys.net/20180319/complex-spa-data-manage-ko.html</id>
    <published>2018-03-19T13:24:35.000Z</published>
    <updated>2018-03-20T12:17:43.167Z</updated>
    
    <content type="html"><![CDATA[<p>过去的一年都扎在 SPA 应用开发里了，直到现在偶尔还会回顾和思考关于数据管理方面还有哪些可以改善的地方。过年后在找工作的期间，发现有些面试官都理解不了我描述的项目经历中的项目复杂度，也许是所在城市（郑州）的原因，水太浅。现在对过去的一些经验做一下总结，也期望与相关领域的开发者一起交流。</p><a id="more"></a><h2 id="为何复杂"><a href="#为何复杂" class="headerlink" title="为何复杂"></a>为何复杂</h2><p>复杂单页应用的特点：</p><ul><li>无刷新体验，全靠 Ajax 请求或 WebSocket 推送更新数据</li><li>一种数据显示在多个视图区块</li><li>存在使用率高的热数据，可随时调出并保持数据新鲜</li></ul><p>想象一下这样的场景：</p><p>视图右上角显眼处显示了当前用户相关的头像、名字等用户信息。进入一个项目模块，显示了所有的有权限或公开项目，每个项目块上都展示该项目的管理者和参与者（1~N 个用户信息）。点击项目进去项目下的任务列表，每个任务块上都展示了该任务的负责人和参与人。</p><p>假设该用户修改的用户头像，则该用户 UI 右上角头像需要更新，其次是项目列表或任务列表中，所有包含该用户头像展示的地方需要更新。最后是其他在线用户的 UI 上的项目或任务列表中存在该用户信息，也需要更新。</p><h2 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h2><p>做一个复杂的单页应用一定需要后端的支持和配合，前端对接口和推送的数据结构要有话语权，如果做不到这一点后续的各种实现会非常麻烦。</p><p>由于项目使用了基于 Vue 的技术栈来开发，早期我们就根据 Vue 的特点制定了数据管理的核心思想：</p><ul><li>API 只针对单一数据模型返回数据，所有视图的数据聚合、过滤等由前端完成</li><li>前端按模块存储数据，由视图层拼装业务数据</li></ul><p>整体下来，所有的数据从请求到视图渲染之前都是单一模型的数据，只到视图层渲染时才根据业务去组合需要的数据。</p><p>这样做的好处是：不管一个数据在 UI 上有多少个区块显示，但最终的数据来源都存在于前端的某个唯一的存储模块内。这样当这个数据发生修改时，只需要在这个存储模块内修改了这条数据，所有的区块视图 都会得到更新。</p><p>不管是请求数据还是推送数据，都只是把数据扔到前端的存储模块内。只要某个视图存在对某一条数据的引用，那么到需要更新的时候自然会更新。</p><h2 id="模块即服务"><a href="#模块即服务" class="headerlink" title="模块即服务"></a>模块即服务</h2><p><strong>模块即服务</strong>，这个概念是我们在开发过程中逐步发现的一个趋势。</p><p>所谓的 <strong>模块</strong>，在项目中具体的代表是 Vuex 中的一个 stroe 模块。</p><p>举例来说，一个 <code>task模块</code> 既存储了当前所有的任务数据，也包含了对任务数据的所有操作。而任务数据在整个应用中的表现形式不止于任务列表一种。可能在 A 路由中表现为任务列表，B 路由中表现为某个用户参与的所有任务。但是归根结底两种表现形式背后需要的数据结构是类似的，某些功能也可能类似（比如分类、过滤等操作）。那么这个模块就得到复用，除了请求数据的接口不同，但请求完成后都把数据放到 task 模块中，不管最终表现为哪种视图都引用 task 模块的数据去组成业务数据。</p><h2 id="数据即业务"><a href="#数据即业务" class="headerlink" title="数据即业务"></a>数据即业务</h2><p>根据前面所述，如果一个视图引用 task 模块的数据去组成业务数据，那么之后必然要对后续 task 相关的业务操作得到响应。</p><p>所有的业务操作回归到数据上，都属于增、删、改操作。所以视图模型必须从数据本身来描述业务。数据模块中增加、删除、修改一条数据，必须正确的反馈到视图模型中。</p><p>我们大量使用了 Vue 中的 <strong>计算属性</strong> 来实现数据即业务。</p><p>就拿 <code>当前用户创建的所有任务</code> 这个业务来说，计算属性可以表示为：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.$store.state.taskModule.taskList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.creator === <span class="keyword">this</span>.loginUserId)</div></pre></td></tr></table></figure><p>后续推送了 task 相关的数据就会添加到任务模块中，对 task 的增、删、改操作也是去操作任务模块里的数据。最终对于视图来说，只要数据满足计算属性的描述，那么视图就得到更新。</p><h2 id="降低数据操作复杂性"><a href="#降低数据操作复杂性" class="headerlink" title="降低数据操作复杂性"></a>降低数据操作复杂性</h2><p>由于数据模块中一般存储了一种数据模型的集合（数据），那么在模块内的删、改类操作时都需要对原数据集进行循环遍历。</p><p>我们之后对一些模块尝试了 <strong>扁平化数据结构</strong>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 原数据</span></div><div class="line">;[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">'t1'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'aaa'</span>,</div><div class="line">        <span class="attr">creator</span>: &#123; <span class="attr">userName</span>: <span class="string">'sfs'</span>, <span class="attr">userId</span>: <span class="string">'u1'</span> &#125;,</div><div class="line">        <span class="attr">tags</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">id</span>: <span class="string">'t1'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'tag1'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">id</span>: <span class="string">'t2'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'tag2'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">'t2'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'bbb'</span>,</div><div class="line">        <span class="attr">creator</span>: &#123; <span class="attr">userName</span>: <span class="string">'sfs'</span>, <span class="attr">userId</span>: <span class="string">'u1'</span> &#125;,</div><div class="line">        <span class="attr">tags</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">id</span>: <span class="string">'t2'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'tag2'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">id</span>: <span class="string">'t3'</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'tag3'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">]</div></pre></td></tr></table></figure><p>从上面的数据结构，可以想象，修改一条任务的属性都需要进行循环查找才可修改，而如果是像 <code>tags -&gt; t2</code> 这种深层次对象修改，又需要多一层循环。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 打平后</span></div><div class="line">&#123;</div><div class="line">    <span class="attr">taskList</span>: &#123;</div><div class="line">        <span class="attr">t1</span>: &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">'t1'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'aaa'</span>,</div><div class="line">            <span class="attr">creator</span>: <span class="string">'u1'</span>,</div><div class="line">            <span class="attr">tags</span>: [<span class="string">'t1'</span>, <span class="string">'t2'</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">t2</span>: &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">'t1'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'bbb'</span>,</div><div class="line">            <span class="attr">creator</span>: <span class="string">'u1'</span>,</div><div class="line">            <span class="attr">tags</span>: [<span class="string">'t2'</span>, <span class="string">'t3'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">taskIds</span>: [<span class="string">'t1'</span>, <span class="string">'t2'</span>],</div><div class="line">    <span class="attr">userList</span>: &#123;</div><div class="line">        <span class="attr">u1</span>: &#123; <span class="attr">userName</span>: <span class="string">'sfs'</span>, <span class="attr">userId</span>: <span class="string">'u1'</span> &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">userIds</span>: [<span class="string">'u1'</span>],</div><div class="line">    <span class="attr">tagList</span>: &#123;</div><div class="line">        <span class="attr">t1</span>: &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">'t1'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'tag1'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">t2</span>: &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">'t2'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'tag2'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">t3</span>: &#123;</div><div class="line">            <span class="attr">id</span>: <span class="string">'t3'</span>,</div><div class="line">            <span class="attr">name</span>: <span class="string">'tag3'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">tagIds</span>: [<span class="string">'t1'</span>, <span class="string">'t2'</span>, <span class="string">'t3'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>数据打平为一层，对象关联通过 id 引用来描述</li><li>每一种数据都单独拆分出来数据集和 id 集合两种形式，一种用来取值，一种用于顺序描述</li><li>给定 1 个 ID，就可以很快获取到对应的值</li><li>修改时减少循环遍历，但增加、删除时需要在两种数据形式上作修改</li></ul><p>数据操作这一块可以继续抽象，像一些 ORM 框架一样，形成声明式 <code>Model</code>，解放重复编码。</p>]]></content>
    
    <summary type="html">
    
      复杂单页应用数据管理总结
    
    </summary>
    
    
      <category term="SPA" scheme="http://imys.net/tags/SPA/"/>
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://imys.net/tags/Vuex/"/>
    
      <category term="前端" scheme="http://imys.net/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据管理" scheme="http://imys.net/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue单页应用中的数据同步探索</title>
    <link href="http://imys.net/20170507/data-sync-in-vue-single-page-application.html"/>
    <id>http://imys.net/20170507/data-sync-in-vue-single-page-application.html</id>
    <published>2017-05-07T07:55:40.000Z</published>
    <updated>2017-08-20T13:57:23.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个多月没写博，最近一个月的 Github 提交数少了很多，总之就是各种状态不好。微博上看到上个月是水逆，看来我也是受灾群众了。😝</p></blockquote><p>单页应用的一个特点就是即时响应，对发生变化数据实现 UI 的快速变更。实现的基础技术不外乎 AJAX 和 WebSocket，前者负责数据的获取和更新，后者负责变更数据的客户端同步。其中要解决的最主要的问题还是数据同步。</p><p>可以把这个问题拆分为两个具体问题：</p><ol><li><strong>数据共享</strong>：多个视图引用的数据能在发生变化后，即时响应变化。</li><li><strong>数据同步</strong>：多终端访问的数据能在一个客户端发生变化后，即时响应变化。<a id="more"></a></li></ol><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>在旧的项目中是使用了发布订阅模式解决这些问题。不管是 AJAX 请求的返回数据还是 WebSocket 的推送数据，统一向全局发布消息，每个需要这些数据的视图去订阅对应的消息使视图变化。</p><p>缺点是：一个视图为了响应变化需要写很多订阅并更新视图数据的硬编码，涉及数据越多，逻辑也越复杂。</p><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>对于 Vue，首先它是一个 MVVM 框架。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Model &lt;----&gt; ViewModel &lt;----&gt; View</div></pre></td></tr></table></figure><p>一目了然的关系，Model 的变化影响到 ViewModel 的变化再触发 View 更新。那么反过来呢，View 更改 ViewModel 再更改 Model？</p><p>对于更新数据而言，更改 ViewModel 真是多此一举了。因为我们只需要改变 Model 数据自然就会按照<code>Model &gt; ViewModel &gt; View</code>的路径同步过来了。这也就是为什么 Vue 后来抛弃了双向绑定，而仅仅支持表单组件的双向绑定。对于双向绑定而言，表单算得上是最佳实践场景了。</p><p>在开发实践中，最常见的还是单向数据流。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Model --&gt; ViewModel --&gt; View --&gt; Model</div></pre></td></tr></table></figure><p>单向数据流告诉我们这样两样事：</p><ol><li>不直接绑定 Model，而是使用由 1~N 个 Model 聚合的 ViewModel。</li><li>View 的变化永远去修改变更值对应的 Model。</li></ol><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-practice-in-complex-single-page-application-201757194432.jpg" alt="Data Flow"></div><div class="image-caption">Data Flow</div></figure><p>解决数据问题的答案已经呼之欲出了。</p><p><strong>多个视图引用的数据在发生变化后，如何响应变化？</strong></p><p>保证多个 View 绑定的 ViewModel 中共同数据来自同一个 <code>Model</code>。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-practice-in-complex-single-page-application-20175720345.jpg" alt=""></div><div class="image-caption"></div></figure><p><strong>多终端访问的数据在一个客户端发生变化后，如何响应变化？</strong></p><p>首先多终端数据同步来源于 WebSocket 数据推送，要保证收到数据推送时去更改直接对应的 Model，而不是 ViewModel。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-practice-in-complex-single-page-application-201757202023.jpg" alt=""></div><div class="image-caption"></div></figure><h2 id="Vue中的解决方案"><a href="#Vue中的解决方案" class="headerlink" title="Vue中的解决方案"></a>Vue中的解决方案</h2><p>不只是要思想上解决问题，而且要代入到编程语言、框架等开发技术中实现。</p><h3 id="Model的存放"><a href="#Model的存放" class="headerlink" title="Model的存放"></a>Model的存放</h3><p>Model 作为原始数据，一般为 AJAX GET 得到的数据，应该位于整个 Vue 项目结构的最上层。对于 Model 的存放位置，也有不同的选择。</p><h4 id="非共享Model"><a href="#非共享Model" class="headerlink" title="非共享Model"></a>非共享Model</h4><p>不需要共享的 Model 可以放到视图组件的<code>data</code>中。但仍然避免 View 直接绑定 Model，即使该 View 的 ViewModel 不再需要额外的 Model 聚合。因为最终影响 View 呈现的不只是来自服务器的 Model 数据，还有视图状态<code>ViewState</code>。</p><p>来个🌰：一个简单的列表组件，负责渲染展示数据和关键字过滤功能。输入的过滤关键字和列表数据都作为 data 存放。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">filterVal</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">list</span>: []</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        Ajax.getData().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.list = data</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        filter() &#123;</div><div class="line">            <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name === <span class="keyword">this</span>.filterVal)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>试想一下，如果 View 直接绑定了以上代码中的<code>list</code>，那么在<code>filter</code>函数执行一次后，虽然 View 更新了，但同时<code>list</code>也被改变，不再是一个原始数据了，下一次执行<code>filter</code>函数将是从上一次的结果集中过滤。<br>很尴尬，总不能重新请求数据吧，那样还搞什么 SPA。</p><p>现在我们有了新的发现：<strong>ViewModel</strong> 受<code>Model</code>和<code>ViewState</code>的双重影响。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ViewModel = 一个或多个 Model 组合 + 影响 View 展示的 ViewState</div><div class="line"></div><div class="line">即: viewModel = models.fn(viewState)</div></pre></td></tr></table></figure><p>Vue 中有没有好的方法可以很好的描述这个表达式呢？那就是计算属性<code>computed</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">filterVal</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">list</span>: []</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        viewList() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.filterVal</div><div class="line">                ? <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name === <span class="keyword">this</span>.filterVal)</div><div class="line">                : <span class="keyword">this</span>.list</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        Ajax.getData().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.list = data</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>改写代码后，View 绑定计算属性<code>viewList</code>，有过滤关键字就返回过滤结果，否则返回原始数据。这才称得上是 <strong>数据驱动</strong>。</p><h4 id="共享Model"><a href="#共享Model" class="headerlink" title="共享Model"></a>共享Model</h4><p>如果一个 View 中存在多处共享的 Model，那么毫不犹豫的使用 Vuex 吧。</p><p>对于复杂单页应用，可以考虑分模块管理，避免全局状态过于庞大。即使是共享的 Model 也是分属不同的业务模块和共享级别。<br>比如文档数据，可能只有<code>/document</code>起始路径下的视图需要共享。那么从节省内存的角度考虑，只有进入该路由时才去装载对应的 Vuex 模块。幸运的是 Vuex 提供的模块动态装载的 API。</p><p>对于共享级别高的数据，比如用户相关的数据，可以直接绑定到 Vuex 模块中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">store</div><div class="line">|   actions.js</div><div class="line">|   index.js</div><div class="line">|   mutations.js</div><div class="line">+---global</div><div class="line">|       user.js</div><div class="line">+---partial</div><div class="line">|       foo.js</div><div class="line">|       bar.js</div></pre></td></tr></table></figure><p>分模块管理后，马上就会遇到跨模块调用数据的问题。一个 View 中需要的数据往往是全局状态和模块状态数据的聚合，可以使用<code>getter</code>解决这个问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    getters: &#123;</div><div class="line">        viewData (state, getters, rootState) &#123;</div><div class="line">            <span class="keyword">return</span> state.data + rootState.data</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果一个 View 是需要多个模块状态的数据呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    getters: &#123;</div><div class="line">        viewData (state, getters) &#123;</div><div class="line">            <span class="keyword">return</span> state.data + getters.partialData</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然不能直接访问到其他模块的 state，但是<code>getter</code>和<code>action</code>、<code>mutation</code>都注册在<strong>全局命名空间</strong>，访问不受限制。</p><h4 id="计算属性-vs-Getter"><a href="#计算属性-vs-Getter" class="headerlink" title="计算属性 vs Getter"></a>计算属性 vs Getter</h4><p>Getter 与组件的计算属性拥有相同的作用，其中引用的任何 state 或者 getter 变化都会触发这个 getter 重新计算。</p><p>那么问题来了：<strong>什么时候我应当使用计算属性？什么时候使用 Getter？</strong></p><p>这里其实是有一个 <strong>数据前置</strong> 原则：<strong>能放到上层的就不放到下层</strong>。</p><ul><li>需要聚合多个 state 或 getter 时，使用 getter。如果有多个视图需要同样的数据组合就可以实现 getter 的复用。</li><li>需要聚合的数据中包含 ViewState 时，使用 computed。因为在 store 中无法访问 ViewState。</li></ul><p>至此我们已经保证了应用内的任何一个共享数据最终都来源于某个全局状态或某个模块的状态。</p><h3 id="Model的更新"><a href="#Model的更新" class="headerlink" title="Model的更新"></a>Model的更新</h3><p>Model 的更新有两种，一种是本地触发的更新，另一种是其他客户端更新再由服务器推送的更新。</p><p>可以这样表示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Model = 本地原始数据 + 本地更新数据 + 推送数据</div></pre></td></tr></table></figure><p>我们似乎又回到了那个列表组件类似的问题上。要不把 3 种数据都设为 state，由 3 种数据组合的 getter 来表示 Model？<br>现在来比较一下。另外有一个前提是 Vuex 只允许提交 mutation 来更改 state。</p><h4 id="单State"><a href="#单State" class="headerlink" title="单State"></a>单State</h4><p>对于一个 state 的更新不外乎是增、删、改、查四种情况，所以至少对应有 4 个 action 和 4 个 mutation，直接对表示源数据的 state 进行更改。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">state</span>: &#123;</div><div class="line">        <span class="attr">data</span>: []</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mutations</span>: &#123;</div><div class="line">        init(state, payload) &#123;</div><div class="line">            state.data = payload</div><div class="line">        &#125;,</div><div class="line">        add(state, payload) &#123;</div><div class="line">            state.data.push(payload)</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">delete</span>(state, payload) &#123;</div><div class="line">            state.data.splice(state.data.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.id === payload), <span class="number">1</span>)</div><div class="line">        &#125;,</div><div class="line">        update(state, payload) &#123;</div><div class="line">            <span class="built_in">Object</span>.assign(state.data.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === payload.id), payload)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">actions</span>: &#123;</div><div class="line">        fetch(&#123; commit &#125;) &#123;</div><div class="line">            Api.getData().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">                commit(<span class="string">'init'</span>, data)</div><div class="line">            &#125;)</div><div class="line">        &#125;,</div><div class="line">        add(&#123; commit &#125;, item) &#123;</div><div class="line">            Api.add(item).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">                commit(<span class="string">'add'</span>, item)</div><div class="line">            &#125;)</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">delete</span>(&#123; commit &#125;, id) &#123;</div><div class="line">            Api.delete(id).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">                commit(<span class="string">'delete'</span>, id)</div><div class="line">            &#125;)</div><div class="line">        &#125;,</div><div class="line">        update(&#123; commit &#125;, item) &#123;</div><div class="line">            Api.update(item).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">                commit(<span class="string">'update'</span>, item)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="多State"><a href="#多State" class="headerlink" title="多State"></a>多State</h4><p>如果把一个 Model 拆成多个 state，本地更新数据和推送数据统一为变更数据，对应到增、删、改、查四种情况，那就需要 4 个 state，即：<code>originData</code>、<code>addData</code>、<code>deleteData</code>、<code>updateData</code>。<br>mutation 和 action 到不会有什么变化，增、删、改原本就是分开写的，只是各自对应到不同的 state 上，最终的 Model 由一个 getter 来表示。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">state</span>: &#123;</div><div class="line">        <span class="attr">originData</span>: [],</div><div class="line">        <span class="attr">addData</span>: [],</div><div class="line">        <span class="attr">deleteData</span>: [],</div><div class="line">        <span class="attr">updateData</span>: []</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getters</span>: &#123;</div><div class="line">        data(state) &#123;</div><div class="line">            <span class="keyword">return</span> state.originData.concat(state.addData)     <span class="comment">// add</span></div><div class="line">                .map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Object</span>.assign(item,</div><div class="line">                    state.updateData.find(<span class="function"><span class="params">uItem</span> =&gt;</span> uItem.id === item.id))) <span class="comment">// update</span></div><div class="line">                .filter(<span class="function"><span class="params">item</span> =&gt;</span> !state.deleteData.find(<span class="function"><span class="params">id</span> =&gt;</span> id === item.id)) <span class="comment">// delete</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mutations</span>: &#123;</div><div class="line">        init(state, payload) &#123;</div><div class="line">            state.originData = payload</div><div class="line">        &#125;,</div><div class="line">        add(state, payload) &#123;</div><div class="line">            state.addData.push(payload)</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">delete</span>(state, payload) &#123;</div><div class="line">            state.deleteData.push(payload)</div><div class="line">        &#125;,</div><div class="line">        update(state, payload) &#123;</div><div class="line">            state.updateData.push(payload)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">actions</span>: &#123;</div><div class="line">        <span class="comment">// 略...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这么一大串方法链看起来很酷对不对，但是性能呢？任何一个 state 的变更都将引起这个复杂的 getter 重新执行 5 个循环操作。</p><p>知乎上有个相关问题的讨论：<a href="https://www.zhihu.com/question/54637225" target="_blank" rel="external">JavaScript 函数式编程存在性能问题么？</a><br>其中提到的解决办法是<strong>惰性计算</strong>。相关的函数库有：<a href="http://danieltao.com/lazy.js/" target="_blank" rel="external">lazy.js</a>，或者使用 lodash 中的 <a href="https://lodash.com/docs/4.17.4#chain" target="_blank" rel="external">_.chain</a> 函数。</p><p>还有一种办法是统一为<code>K, V</code>数据结构，这样一个混合函数就搞定了<code>Object.assign(originData, addData, updateData, deleteData)</code>。</p><p>对比而言，我认为多 state 的方式更符合数据驱动及响应式编程思维，但需要有好的办法去解决复杂的循环操作这个问题，单 state 的方式就是面向大众了，两者都可以解决问题。甚至于全面使用响应式编程，使用 <a href="http://reactivex.io/rxjs/" target="_blank" rel="external">RxJS</a> 替代 Vuex。</p><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>前面提到过了，不管是本地更新数据还是服务端推送数据，可以统一为增、删、改三种接口。不管是本地更新还是推送数据，根据数据同步类型走同一个数据更改函数。</p><p>这在 Vuex 中很容易实现。利于 Vuex 的插件功能，可以在接受推送后提交到对应的 mutation。前提是要和后端约好数据格式，更方便的映射到对应的 mutationType，比如：<code>{ 数据名，同步类型，同步数据 }</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> store =&gt; &#123;</div><div class="line">    socket.on(<span class="string">'data'</span>, data =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> &#123; name, type, data &#125; = data</div><div class="line">        store.commit(type + name, data)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就实现了本地增、删、改与推送数据增、删、改的无差异化。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><ul><li><a href="https://github.com/xufei/blog/issues/47" target="_blank" rel="external">徐飞：单页应用的数据流方案探索</a></li><li><a href="https://github.com/xufei/blog/issues/42" target="_blank" rel="external">徐飞：复杂单页应用的数据层设计</a></li></ul>]]></content>
    
    <summary type="html">
    
      单页应用中的数据同步，Vue 单页应用中的数据同步，Vuex 数据同步
    
    </summary>
    
    
      <category term="SPA" scheme="http://imys.net/tags/SPA/"/>
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://imys.net/tags/Vuex/"/>
    
      <category term="数据流" scheme="http://imys.net/tags/%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    
      <category term="数据同步" scheme="http://imys.net/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Vuex与前端缓存的整合策略</title>
    <link href="http://imys.net/20170318/vuex-cache-design.html"/>
    <id>http://imys.net/20170318/vuex-cache-design.html</id>
    <published>2017-03-18T03:39:54.000Z</published>
    <updated>2017-04-16T07:03:00.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何存放或更新缓存？"><a href="#如何存放或更新缓存？" class="headerlink" title="如何存放或更新缓存？"></a>如何存放或更新缓存？</h2><p>缓存数据来源是预知的，我们可以预先定义哪些 <code>mutation</code> 是缓存相关的。</p><p>我们期望这个过程更自然一点，通过某种变化自动映射，使以后不管缓存类别增加还是减少都能修改极少的代码来应对变化。</p><p>Vuex的插件可以拦截 <code>mutations</code>，借助这个机制，我们可以制定一种策略化的规则。<br><a id="more"></a></p><p>可以规定，所有需要更新缓存的 <code>mutationType</code> 都要符合这种格式：<code>module-type-cacheKey</code>，非缓存的 <code>mutationType</code> 格式为 <code>module-type</code>。</p><p>那么就可以拦截 <code>mutation</code>，去做我们想做的事了：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">store.subscribe(<span class="function">(<span class="params">&#123; type, payload &#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> cacheKey = type.split(<span class="string">'-'</span>)[<span class="number">2</span>]</div><div class="line">    <span class="keyword">if</span> (cacheKey) &#123;</div><div class="line">        Cache.save(cacheKey, payload)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="如何从缓存取数据避免请求？"><a href="#如何从缓存取数据避免请求？" class="headerlink" title="如何从缓存取数据避免请求？"></a>如何从缓存取数据避免请求？</h2><p>只需要在缓存相关的 <code>action</code> 中加入缓存判断。</p><figure class="highlight js"><figcaption><span>action</span></figcaption><table><tr><td class="code"><pre><div class="line">fetchData(&#123;commit&#125;) &#123;</div><div class="line">    <span class="keyword">const</span> cacheData = Cache.get(cacheKey)</div><div class="line">    <span class="keyword">if</span>(!cacheData) &#123;</div><div class="line">        Api.getData().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            commit(mutationType, data)</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        commit(mutationType, cacheData)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="设计优化"><a href="#设计优化" class="headerlink" title="设计优化"></a>设计优化</h2><p>以上的确已经足够完成缓存 <code>读取 --&gt; 更新</code> 的工作了。但试想一下将来某个其他数据类别要做缓存，我们就要把上面的代码格式再搬一遍。</p><p>即：把新的需要缓存的数据类别对应的 <code>mutationType</code> 加 <code>cacheKey</code> 后缀，把获取数据的 <code>action</code> 中加缓存判断。</p><p>虽然实际编码中也没有多大的工作量，但感觉还不是最好的开发体验。</p><h3 id="action优化"><a href="#action优化" class="headerlink" title="action优化"></a>action优化</h3><p><code>action</code> 中的痛点是：每次都需要重复写缓存判断。可以把这个判断过程拿出来放到一个大家都能访问到的公共的地方，且最好是与 Vuex 契合的。</p><p>Vuex 支持 <code>action</code> 相互调用，我们可以设置一个单独的 <code>action</code> 用来提交。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">commitAction(&#123; commit &#125;, mutationType, getData) &#123;</div><div class="line">    <span class="keyword">const</span> cacheKey = mutationType.split(<span class="string">'-'</span>)[<span class="number">2</span>]</div><div class="line">    <span class="keyword">const</span> cacheData = Cache.get(cacheKey || <span class="string">''</span>)</div><div class="line">    <span class="keyword">if</span>(!cacheData) &#123;</div><div class="line">        getData().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            commit(mutationType, data)</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        commit(mutationType, cacheData)</div><div class="line">    &#125;</div><div class="line">&#125;,</div><div class="line">fetchData(&#123; dispatch &#125;) &#123;</div><div class="line">    dispatch(<span class="string">'commitAction'</span>, mutationType, Api.getData)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不管是否需要缓存最终都走同一个 <code>action</code> 去提交，由这个 <code>action</code> 去做决策。</p><h3 id="mutation优化"><a href="#mutation优化" class="headerlink" title="mutation优化"></a>mutation优化</h3><p><code>mutation</code> 的痛点在于：加后缀啊！加后缀啊！！</p><p>如果一个数据的相关逻辑复杂，可能对应很多个 <code>mutationType</code>，每个都需要：加后缀！</p><p>要是代码能<strong>自动识别需要走缓存的 <code>mutationType</code></strong> 就完美了！</p><p><code>mutationType</code> 默认的格式为 <code>module-type</code>，假如业务中一个 <code>module</code> 对应一个数据类别，我们就可以基于 <code>module</code> 作缓存识别。</p><figure class="highlight js"><figcaption><span>cacheConfig.js</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">module1</span>: <span class="string">'key1'</span>,</div><div class="line">    <span class="attr">module2</span>: <span class="string">'key2'</span>,</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>action</span></figcaption><table><tr><td class="code"><pre><div class="line">commitAction(&#123; commit &#125;, mutationType, getData) &#123;</div><div class="line">    <span class="keyword">const</span> <span class="built_in">module</span> = mutationType.split(<span class="string">'-'</span>)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">const</span> cacheKey = CacheConfig[<span class="built_in">module</span>] || <span class="string">''</span></div><div class="line">    <span class="keyword">const</span> cacheData = Cache.get(cacheKey)</div><div class="line">    <span class="keyword">if</span>(!cacheData) &#123;</div><div class="line">        getData().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">            commit(mutationType, data)</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        commit(mutationType, cacheData)</div><div class="line">    &#125;</div><div class="line">&#125;,</div><div class="line">fetchData(&#123; dispatch &#125;) &#123;</div><div class="line">    dispatch(<span class="string">'commitAction'</span>, mutationType, Api.getData)</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>interceptor</span></figcaption><table><tr><td class="code"><pre><div class="line">store.subscribe(<span class="function">(<span class="params">&#123; type, payload &#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> <span class="built_in">module</span> = type.split(<span class="string">'-'</span>)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">const</span> cacheKey = CacheConfig[<span class="built_in">module</span>]</div><div class="line">    <span class="keyword">if</span> (cacheKey) &#123;</div><div class="line">        Cache.save(cacheKey, payload)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>当我们需要新增或减少缓存数据，只需要去 <code>cacheConfig</code> 中增加或减少一项模块配置。</p>]]></content>
    
    <summary type="html">
    
      Vue结合Vuex的前端缓存设计, Vuex与前端缓存的整合策略
    
    </summary>
    
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://imys.net/tags/Vuex/"/>
    
      <category term="Cache" scheme="http://imys.net/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>编写良好的前端组件</title>
    <link href="http://imys.net/20170317/write-good-front-end-component.html"/>
    <id>http://imys.net/20170317/write-good-front-end-component.html</id>
    <published>2017-03-17T02:22:38.000Z</published>
    <updated>2018-04-26T17:06:36.891Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 和 React 的大红大火，带来的是组件化和数据驱动的开发方式。Demo 很美好，但如果没有一定的实际开发经验积累，总是能把一个功能模块写成浆糊。<br>依托于 Webpack 等构建工具，使得前端代码具备了后端编程语言的代码组织能力，摆脱了传统的「一泻而下」式的代码编写。至此，作为前端也该对自己的代码有更高的要求。<br><a id="more"></a></p><h2 id="组件职责划分"><a href="#组件职责划分" class="headerlink" title="组件职责划分"></a>组件职责划分</h2><blockquote><p>一个组件只做一件事，基于功能做好职责划分。</p></blockquote><h3 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h3><p>公司用的是 Vue，最近又接触了下 React。<br>对比来说，React 由于 jsx 式（js和html混合）的写法，加上构建工具的模块化管理，一个文件中可以有多个组件。还支持纯函数式的<strong>无状态组件</strong>，只是单纯的接受数据渲染 DOM，没有生命周期等额外的概念。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/no-status-component.jpg" alt="无状态组件"></div><div class="image-caption">无状态组件</div></figure><figure class="highlight js"><figcaption><span>React</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="comment">// 无状态组件</span></div><div class="line"><span class="keyword">const</span> noStatus = <span class="function"><span class="params">props</span> =&gt;</span> &lt;h1&gt;&#123;props.title&#125;&lt;<span class="regexp">/h1&gt;</span></div></pre></td></tr></table></figure><p>看起来就像一个简单的模版渲染过程。</p><p>Vue 中没有<strong>无状态组件</strong>的概念，但实际上也存在类似功能的组件形式。比如图标组件，只接收 <code>props</code> 渲染模版，不做多余的动作。</p><figure class="highlight html"><figcaption><span>Vue</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">:class</span>=<span class="string">"'icon-' + name"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="built_in">String</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="端对端组件"><a href="#端对端组件" class="headerlink" title="端对端组件"></a>端对端组件</h3><p>端对端组件指的是不需要依赖外部给予，自身就可以负责从数据获取到展示过程的组件。<br>这类组件在业务开发中也很常见，比如公共的分类选择器。由于到多处调用，如果每次用的时候都由外部请求数据在调用组件展示，那么这个请求数据的代码显然是个重复的逻辑，索性直接就写入到组件内部了。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/end-to-end-component.jpg" alt="端对端组件"></div><div class="image-caption">端对端组件</div></figure><blockquote><p>当然端对端组件也有缺陷。就是每次调用不管数据有没有变化，都会重新请求，造成冗余。如何改善，那又是另一个话题了。这篇文章中有提到：<a href="https://github.com/xufei/blog/issues" target="_blank" rel="external">徐飞：复杂单页应用的数据层设计</a></p></blockquote><h3 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h3><p>UI 组件指的是界面扩展类组件，比如：输入框、表格、树、下拉框等。像 Element、Vux 等组件库均属于此类组件。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/ui-component.jpg" alt="UI组件"></div><div class="image-caption">UI组件</div></figure><p>此类组件的特点是：复用性强，只通过 <code>props</code>、<code>events</code> 和 <code>slots</code> 等组件接口与外部通信。<br>更像是一个对 HTML 的扩展标签。</p><h3 id="业务组件"><a href="#业务组件" class="headerlink" title="业务组件"></a>业务组件</h3><p>业务组件通常是根据最小业务状态抽象而出，有些业务组件也具有一定的复用性，但大多数是一次性组件。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/service-component.jpg" alt="业务组件"></div><div class="image-caption">业务组件</div></figure><p>之前提到的组件数据或自给自足（端对端组件），或来自 <code>props</code>，那么业务组件的数据呢？</p><ol><li>props</li><li>global state</li></ol><p>只能是以上两种了，如果还是组件内部去请求数据，那么就还是属于端对端组件了。</p><h3 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h3><p>这类组件就是一个盒子，一般当作一个业务子模块的入口，比如一个路由指向的组件。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/container-component.jpg" alt="容器组件"></div><div class="image-caption">容器组件</div></figure><p>通常是这种形式：</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">moduleA</span>&gt;</span><span class="tag">&lt;/<span class="name">moduleA</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">moduleB</span>&gt;</span><span class="tag">&lt;/<span class="name">moduleB</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">moduleC</span>&gt;</span><span class="tag">&lt;/<span class="name">moduleC</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>容器组件内的子组件通常具有业务或数据依赖关系。</li><li>如果没有使用全局状态管理，那么容器组件就是负责通过 <code>props</code> 分发数据到各个子组件，在通过 <code>events</code> 处理各个子组件的业务响应。此时容器组件需要做数据请求工作。</li><li>如果使用了全局状态管理，那么容器内部的业务组件可以自行调用全局状态处理业务。但并不是说此时容器组件什么都不用干了。即使不需要请求数据，还是有许多组件间或一个业务模块内的诸多统筹工作要做。</li></ul><p>把上面的各类组件组装到一起就组成一个业务模块。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/module-and-components.jpg" alt="业务模块"></div><div class="image-caption">业务模块</div></figure><h2 id="组件设计原则"><a href="#组件设计原则" class="headerlink" title="组件设计原则"></a>组件设计原则</h2><h3 id="尽可能的减少状态"><a href="#尽可能的减少状态" class="headerlink" title="尽可能的减少状态"></a>尽可能的减少状态</h3><ol><li>如果一个数据可以由另一个 state 变换得到，那么这个数据就不是一个 state。只需要写一个变换的处理函数，在 Vue 中可以使用计算属性。</li><li>如果你的 state 是一个数组，而模版最外层是渲染这个数组，那么你需要做的事是把渲染的项作为一个组件，只接受一个单级对象形式的数据，由外部决定这个组件的展示次数。</li><li>如果一个数据是固定的，不会变化的常量，那么这个数据就如同 HTML 固定的站点标题一样，写死或作为全局配置属性等，不属于 state。</li><li>如果一个数据需要从外部得到，它应该属于 props。</li><li>如果组件和兄弟组件拥有相同的 state，那么这个 state 应该放到更高的层级中，使用 props 传递到两个组件中。</li></ol><h3 id="合理的依赖关系"><a href="#合理的依赖关系" class="headerlink" title="合理的依赖关系"></a>合理的依赖关系</h3><ol><li>父组件不依赖子组件。要做到当我们把子组件删除后，只是丢失了一个功能，或一个模块等，而不会造成父组件及兄弟组件功能异常。</li><li>子组件基于父组件传递 props 作出个性化展示。</li></ol><h3 id="扁平化参数"><a href="#扁平化参数" class="headerlink" title="扁平化参数"></a>扁平化参数</h3><p>像 HTML 原生元素那样，只接受原始类型（字符串、数值、布尔值和函数）作为属性，避免复杂的对象。当然，数据除外。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span></span></div><div class="line">  <span class="attr">label</span>=<span class="string">"hello"</span></div><div class="line">  <span class="attr">:actived</span>=<span class="string">"true"</span></div><div class="line">  <span class="attr">:width</span>=<span class="string">"600"</span></div><div class="line">  <span class="attr">:on-show</span>=<span class="string">"show"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:config</span>=<span class="string">"myConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="良好的接口设计"><a href="#良好的接口设计" class="headerlink" title="良好的接口设计"></a>良好的接口设计</h3><ol><li>把组件内部可以完成的工作做到极致。虽然提倡拥抱变化，但接口不是越多越好。</li><li>如果常量变为 props 能应对更多的场景，那么就可以作为 props。原有的常量可作为默认值。</li><li>如果组件不能提供调用者所需求的功能，那么这个组件的接口还不够完善。</li><li>如果需要为了某一调用者编写大量特定需求的代码，那么可以考虑通过扩展等方式构建一个新的组件。</li><li>保证组件的属性和事件足够的给大多数的组件使用。</li></ol><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>设计模式六大原则在组件设计中也有适用的地方。</p>]]></content>
    
    <summary type="html">
    
      编写良好的前端组件
    
    </summary>
    
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="前端" scheme="http://imys.net/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="组件" scheme="http://imys.net/tags/%E7%BB%84%E4%BB%B6/"/>
    
      <category term="React" scheme="http://imys.net/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>关于拖拽排序后的持久化方案</title>
    <link href="http://imys.net/20170224/drag-the-sorted-field-design.html"/>
    <id>http://imys.net/20170224/drag-the-sorted-field-design.html</id>
    <published>2017-02-24T07:09:00.000Z</published>
    <updated>2017-04-16T07:03:00.368Z</updated>
    
    <content type="html"><![CDATA[<p>最近一次团队会议中提到了这个问题，感觉有点意思，就有了以下的思考。</p><p>我们可以很轻松的写出以下解决思路：</p><ol><li>每一项的数据模型都有一个字段<code>order</code>，表示排序的依据。</li><li>拖拽每一项后对<code>order</code>字段进行一定的变更，并发送修改请求，持久化排序字段。</li></ol><p>问题就在于第二步中的 <strong>进行一定的变更</strong>，是如何变更？<br>从这一点入手就出现了各种不同的解决方案。<br><a id="more"></a></p><h2 id="取前后项差值除以2"><a href="#取前后项差值除以2" class="headerlink" title="取前后项差值除以2"></a>取前后项差值除以2</h2><p>这是原来旧项目中采用的方案。</p><ol><li>每一项数据初始化一个较大的<code>order</code>值，如：10000、20000、30000…</li><li>拖拽变化后，取前后项的<code>order</code>值相加除以<code>2</code>。假如把第三行拖拽到第一和第二行之间，那么它的<code>order</code>值由<code>30000</code>改为<code>(10000 + 20000) / 2</code>。</li></ol><p>理论上来讲，如果允许存在浮点数且不限制数据精度，绝对是可取的。退一步来说，也可以在数据临界时，或者某个空闲的时候依照当前顺序对数据库中的<code>order</code>列重新初始化。</p><p>这种方案的特点是：新的<code>order</code>值永远在前后项<code>order</code>值的区间内。</p><p>由这个特点可以衍生出一些方案，比如：<strong>降位法</strong>。</p><p>原始数据：</p><table><thead><tr><th>ID</th><th>order</th></tr></thead><tbody><tr><td>1cE2927ef1C6</td><td>1</td></tr><tr><td>8ea5Ed2687A6</td><td>1.1</td></tr><tr><td>2c70bADbe43C</td><td>2</td></tr><tr><td>16DA261B24F1</td><td>2.1</td></tr><tr><td>4Da27EE5d3de</td><td>2.2</td></tr><tr><td>8ea5Ed2687A6</td><td>2.3</td></tr><tr><td>65A64F9c12Ae</td><td>3</td></tr></tbody></table><p>把最后一项放到倒数第二项之前：</p><table><thead><tr><th>ID</th><th>order</th></tr></thead><tbody><tr><td>1cE2927ef1C6</td><td>1</td></tr><tr><td>8ea5Ed2687A6</td><td>1.1</td></tr><tr><td>2c70bADbe43C</td><td>2</td></tr><tr><td>16DA261B24F1</td><td>2.1</td></tr><tr><td>4Da27EE5d3de</td><td>2.2</td></tr><tr><td>65A64F9c12Ae</td><td>2.21</td></tr><tr><td>8ea5Ed2687A6</td><td>2.3</td></tr></tbody></table><p>由于<code>2.2</code>和<code>2.3</code>在十分位上不存在数的间隔，所以插入到之间的项降一位到百分位上。</p><h2 id="取前后项的ID"><a href="#取前后项的ID" class="headerlink" title="取前后项的ID"></a>取前后项的ID</h2><p>这是由链表数据结构想到的方案。每一项数据记录前一项或后一项的<code>ID</code>，拖拽变化后，进行对应的修改。</p><p><strong>缺点</strong>：</p><ol><li>数据渲染排序阶段开销大。假如取前一项<code>ID</code>为排序依据，需要找到前一项ID为<code>null</code>的为第一行数据，再找出前一项ID为第一行数据ID的为第二行数据…要深度遍历。</li><li>前一项或后一项被删除，需要在删除数据的同时对受影响的排序字段进行数据修复，重新关联前一项或后一项的<code>ID</code>，至少 2 个请求。</li></ol>]]></content>
    
    <summary type="html">
    
      拖拽排序的数据库设计，拖拽排序后的结果保存
    
    </summary>
    
    
      <category term="drag" scheme="http://imys.net/tags/drag/"/>
    
      <category term="sort" scheme="http://imys.net/tags/sort/"/>
    
      <category term="db" scheme="http://imys.net/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>如何在Vue2中使用双向绑定？</title>
    <link href="http://imys.net/20170119/vue2-two-way-binding.html"/>
    <id>http://imys.net/20170119/vue2-two-way-binding.html</id>
    <published>2017-01-19T11:30:01.000Z</published>
    <updated>2017-01-19T13:04:45.718Z</updated>
    
    <content type="html"><![CDATA[<p>Vue2 取消了<code>.sync</code>指令修饰符，推崇单向闭环的数据流。即：父级通过<code>props</code>向子级传递数据，子级如果需要修改数据就需要在父级添加监听事件，并在子级中去触发事件修改值。</p><p>在多数情况下，是不需要双向绑定的，单向数据流更容易追踪数据变化排查问题。但一些特定场景下，如弹窗，除了外部由父组件控制显示和隐藏外，组件内部也有关闭和取消等按钮需要控制显示和隐藏。这虽然可以通过触发事件让父级修改显示状态来实现，但每一个弹窗组件都需要做一遍这样的事总觉得很不爽。<br><a id="more"></a></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p><code>v-model</code>是 Vue2 中唯一支持双向绑定的指令，用于表单控件绑定，但不代表它只能用在表单控件之上。在文档 <a href="https://vuefe.cn/v2/guide/components.html#使用自定义事件的表单输入组件" target="_blank" rel="external">使用自定义事件的表单输入组件</a> 一节中提到了，<code>v-model</code>其实是个语法糖。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"something"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 等价于以下内容 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"something"</span> @<span class="attr">input</span>=<span class="string">"something = $event.target.value"</span>&gt;</span></div></pre></td></tr></table></figure><p>也就是说，你只需要在组件中声明一个<code>name</code>为<code>value</code>的<code>props</code>，并且通过触发<code>input</code>事件传入一个值，就能修改这个<code>value</code>。</p><figure class="highlight html"><figcaption><span>父组件中引用</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">myComponent</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">myComponent</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>子组件</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> myComponent = &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;div&gt;&lt;h1&gt;&#123;&#123;value&#125;&#125;&lt;/h1&gt;&lt;button @click="changeTitle"&gt;Change&lt;/button&gt;&lt;/div&gt;'</span>,</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="built_in">String</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        changeTitle() &#123;</div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="string">'子组件'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面这个例子，最初显示的是父组件传入的<code>title</code>，点击子组件中的按钮后会修改显示值为<code>子组件</code>。</p><h2 id="组件内部控制关闭的弹窗"><a href="#组件内部控制关闭的弹窗" class="headerlink" title="组件内部控制关闭的弹窗"></a>组件内部控制关闭的弹窗</h2><p>现在可以解决弹窗组件内部自行关闭的问题了。</p><p><a href="https://jsfiddle.net/imys/279fo449/" target="_blank" rel="external">Demo</a></p><h2 id="多字段的双向绑定"><a href="#多字段的双向绑定" class="headerlink" title="多字段的双向绑定"></a>多字段的双向绑定</h2><blockquote><p>一个组件只能定义一个<code>v-model</code>，假如想双向绑定多个值怎么办？</p></blockquote><p><code>v-model</code>并没有限制<code>value</code>的数据类型，只是限制了是<strong>一个值！</strong>那么只需要把<code>value</code>的数据类型换成<code>Object</code>或者<code>Array</code>，把多出的字段作为对象的属性或数组的元素传入，多少个都不是问题了。</p><p>从最佳实践角度出发，推荐只是特定场景下使用，比如自定义的表单组件。</p>]]></content>
    
    <summary type="html">
    
      利用v-model指令实现Vue2中的双向绑定。
    
    </summary>
    
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>基于 document.execCommand 实现富文本编辑器</title>
    <link href="http://imys.net/20170113/create-rich-text-editor-by-execCommand.html"/>
    <id>http://imys.net/20170113/create-rich-text-editor-by-execCommand.html</id>
    <published>2017-01-12T16:30:09.000Z</published>
    <updated>2017-08-20T13:57:23.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在项目中准备集成一个富文本编辑器，原来使用的是 <a href="https://github.com/quilljs/quill" target="_blank" rel="external">Quill</a>，之后发现项目打包体积瞬增了 200kb。虽然 Quill 完全能够满足项目需求，但其提供的诸多功能是用不上的，可以使用更轻量的实现代替。</p><p>在寻找新的替代品时，也顺便瞄了下各种编辑器的内部实现。一些体积庞大的编辑器一般都兼容低版本浏览器，不得不写很多兼容性的代码。而一些 MINI、轻量的编辑器是不对低端浏览器作兼容的，使用<code>Selection</code>、<code>Range</code>或者<code>document.execCommand</code>实现。</p><p>之前在 <a href="https://imys.net/20161125/cursor-offset-at-input.html">JavaScript 获取输入时的光标位置及场景问题</a> 中提到过<code>Selection</code>和<code>Range</code>，这次就说说<code>document.execCommand</code>。</p><a id="more"></a><h2 id="document-execCommand"><a href="#document-execCommand" class="headerlink" title="document.execCommand"></a>document.execCommand</h2><p>该方法可以对可编辑器区域进行操作，比如加粗文字、改变字号、插入链接等。可编辑区域也就是设置了<code>contentEditable</code>属性的元素。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 语法</span></div><div class="line">bool = <span class="built_in">document</span>.execCommand(commandName, showDefaultUI[, arg])</div></pre></td></tr></table></figure><ul><li><code>commandName</code>：String，命令的名称</li><li><code>showDefaultUI</code>：Boolean，是否展示用户界面（暂时没有发现“用户界面”指的是什么），一般为<code>false</code></li><li><code>arg</code>：String，要传递的参数，比如插入链接需要传入一个 URL，可选</li><li>返回值：Boolean，表示操作是否支持或是否启用</li></ul><p>假如要把选中的文字加粗，只需要这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.execCommand(<span class="string">'bold'</span>, <span class="literal">false</span>)</div></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/execCommand-support-2017113.jpg" alt="execCommand-support"></div><div class="image-caption">execCommand-support</div></figure><p>对于现代浏览器的兼容度较好，不过 Android 53 取消兼容的什么鬼？</p><p>除了了解该方法的兼容性外，还需要了解每一种可执行命令的兼容性。比如<code>decreaseFontSize</code>，给选中文字添加<code>small</code>标签，也就是小号字体，谷歌是不支持的。</p><p>可以使用以下方法检测命令是否在浏览器中支持：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.queryCommandSupported(commandName)</div></pre></td></tr></table></figure><h2 id="简陋的实现"><a href="#简陋的实现" class="headerlink" title="简陋的实现"></a>简陋的实现</h2><p>不到 50 行代码，<a href="/demo/cmdEditor.html">基于document.execCommand实现富文本编辑器</a>。</p><p>有兴趣的同学可以以此为出发点，去开发一个具备完整功能的编辑器。懒得折腾的可以像我一样多搜索几下，找一个合适的轮子。😅</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand" target="_blank" rel="external">MDN: document.execCommand</a></li></ul>]]></content>
    
    <summary type="html">
    
      基于 document.execCommand 实现富文本编辑器
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="Editor" scheme="http://imys.net/tags/Editor/"/>
    
      <category term="ExecCommand" scheme="http://imys.net/tags/ExecCommand/"/>
    
  </entry>
  
  <entry>
    <title>Webpack按需打包Lodash的几种方式</title>
    <link href="http://imys.net/20161217/webpack-use-lodash.html"/>
    <id>http://imys.net/20161217/webpack-use-lodash.html</id>
    <published>2016-12-16T17:41:21.000Z</published>
    <updated>2017-04-16T07:03:00.368Z</updated>
    
    <content type="html"><![CDATA[<p>在数据操作时，Lodash 就是我的弹药库，不管遇到多复杂的数据结构都能用一些函数轻松拆解。</p><p>ES6 中也新增了诸多新的对象函数，一些简单的项目中 ES6 就足够使用了，但还是会有例外的情况引用了少数的 Lodash 函数。一个完整的 Lodash 库，即使是压缩后，现最新版本也有 <code>71k</code> 的体积。不能为了吃一口饭而买下一个饭店啊。</p><p>针对这个问题，其实已经有很多可选方案了。<br><a id="more"></a></p><h2 id="函数模块"><a href="#函数模块" class="headerlink" title="函数模块"></a>函数模块</h2><p>Lodash 中的每个函数在 NPM 都有一个单独的发布模块。<a href="https://www.npmjs.com/search?q=lodash" target="_blank" rel="external">NPM: results for ‘lodash’</a><br>假如你只需要使用<code>_.isEqual</code>，那么你只需要安装<code>lodash.isequal</code>模块，然后按以下方式引用。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> isEqual = <span class="built_in">require</span>(<span class="string">'lodash.isequal'</span>)</div><div class="line"><span class="comment">// or ES6</span></div><div class="line"><span class="keyword">import</span> isEqual <span class="keyword">from</span> <span class="string">'lodash.isequal'</span></div><div class="line"></div><div class="line"></div><div class="line">isEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// true</span></div></pre></td></tr></table></figure><h2 id="全路径引用"><a href="#全路径引用" class="headerlink" title="全路径引用"></a>全路径引用</h2><p>在你完整安装 Lodash 后，可以按<code>lodash/函数名</code>的格式单独引入需要的函数模块。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> difference = <span class="built_in">require</span>(<span class="string">'lodash/difference'</span>)</div><div class="line"><span class="comment">// or ES6</span></div><div class="line"><span class="keyword">import</span> difference <span class="keyword">from</span> <span class="string">'lodash/difference'</span></div><div class="line"></div><div class="line">difference([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>])  <span class="comment">// [2]</span></div></pre></td></tr></table></figure><h2 id="使用插件优化"><a href="#使用插件优化" class="headerlink" title="使用插件优化"></a>使用插件优化</h2><p>在简单场景下，以上两种方式足以解决问题。<br>而遇到复杂的数据对象时，我们不得不在一个文件中引入多个 Lodash 函数，这样就需要在文件中写多个<code>require</code>或<code>import</code>相关函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> remove <span class="keyword">from</span> <span class="string">'lodash/remove'</span></div><div class="line"><span class="keyword">import</span> uniq <span class="keyword">from</span> <span class="string">'lodash/uniq'</span></div><div class="line"><span class="keyword">import</span> invokeMap <span class="keyword">from</span> <span class="string">'lodash/invokeMap'</span></div><div class="line"><span class="keyword">import</span> sortBy <span class="keyword">from</span> <span class="string">'lodash/sortBy'</span></div><div class="line"><span class="comment">// more...</span></div></pre></td></tr></table></figure><p>正写到关键处却因为引入一个函数要拉到文件头部去定义引用而打乱了思路，很不爽！</p><p>于是我机智的到 Github 去搜索了<code>webpack</code>和<code>lodash</code>两个关键词的组合，排在首位的 <a href="https://github.com/lodash/lodash-webpack-plugin" target="_blank" rel="external">lodash-webpack-plugin</a> 就是为了解决这个问题而生。</p><p>使用时需要以下模块，其实除了前两个剩下的一般都已安装了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm i -S lodash-webpack-plugin babel-plugin-lodash babel-core babel-loader babel-preset-es2015 webpack</div></pre></td></tr></table></figure><p><strong>配置：</strong></p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LodashModuleReplacementPlugin = <span class="built_in">require</span>(<span class="string">'lodash-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [&#123;</div><div class="line">      <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">      <span class="attr">query</span>: &#123;</div><div class="line">        <span class="attr">plugins</span>: [<span class="string">'transform-runtime'</span>, <span class="string">'lodash'</span>],</div><div class="line">        <span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> LodashModuleReplacementPlugin,</div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin,</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>babel-plugin-lodash</code>的配置，也就是<code>plugins: [&#39;lodash&#39;]</code>，并不是一定要在<code>loaders</code>中，也可以单独定义<code>babel</code>。</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LodashModuleReplacementPlugin = <span class="built_in">require</span>(<span class="string">'lodash-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [&#123;</div><div class="line">      <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">babel</span>: &#123;</div><div class="line">    <span class="attr">presets</span>: [<span class="string">'es2015'</span>],</div><div class="line">    <span class="attr">plugins</span>: [<span class="string">'transform-runtime'</span>, <span class="string">'lodash'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> LodashModuleReplacementPlugin,</div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin,</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>又或者是<code>.babelrc</code>文件中。</p><p>以上工作完成了，在每个你需要使用 lodash 函数的文件中只需要引用一次 lodash，即可调用任意函数而不会造成完全打包。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></div><div class="line"></div><div class="line">_.add(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment">// 打包时只会引入这一个函数模块</span></div></pre></td></tr></table></figure><blockquote><p>注意：必须要使用 ES2015 的模块引用方式才有效。</p></blockquote><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>以上即是我目前所知道的几种方式，如果哪位朋友有更好的方式（比如只需要全局引入一次），请一定分享与我！😋</p>]]></content>
    
    <summary type="html">
    
      Webpakck打包优化，按需打包Lodash模块。
    
    </summary>
    
    
      <category term="Webpack" scheme="http://imys.net/tags/Webpack/"/>
    
      <category term="Lodash" scheme="http://imys.net/tags/Lodash/"/>
    
  </entry>
  
  <entry>
    <title>正确使用Vue指令的钩子函数</title>
    <link href="http://imys.net/20161216/vue-custom-directive-hook.html"/>
    <id>http://imys.net/20161216/vue-custom-directive-hook.html</id>
    <published>2016-12-16T14:45:54.000Z</published>
    <updated>2016-12-27T13:42:38.265Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 中可以把一系列<strong>复杂的操作</strong>包装为一个指令。</p><blockquote><p><strong>什么是复杂的操作？</strong><br>我的理解是：复杂逻辑功能的包装、违背数据驱动的 DOM 操作以及对一些 Hack 手段的掩盖等。我们总是期望以操作数据的形式来实现功能逻辑。</p></blockquote><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>对于自定义指令的定义，Vue2 有 5 个可选的钩子函数。</p><a id="more"></a><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次，指令与元素解绑时调用。</li></ul><p>接下来，定义一个简单的指令以验证这些钩子函数的触发时机。</p><figure class="highlight html"><figcaption><span>template</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">v-if</span>=<span class="string">"msg"</span> <span class="attr">:msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"update"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"uninstall"</span>&gt;</span>卸载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"install"</span>&gt;</span>安装<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><div class="line">Vue.directive(<span class="string">'hello'</span>, &#123;</div><div class="line">    <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'bind'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'inserted'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'update'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">componentUpdated</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'componentUpdated'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">unbind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'unbind'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> myComp = &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;h1 v-hello&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;'</span>,</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="built_in">String</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="string">'Hello'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="attr">myComp</span>: myComp</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.msg = <span class="string">'Hi'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">uninstall</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.msg = <span class="string">''</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">install</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.msg = <span class="string">'Hello'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="页面加载时"><a href="#页面加载时" class="headerlink" title="页面加载时"></a>页面加载时</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bind</div><div class="line">inserted</div></pre></td></tr></table></figure><h3 id="组件更新时"><a href="#组件更新时" class="headerlink" title="组件更新时"></a>组件更新时</h3><p>点击“更新”按钮，更改数据触发组件更新。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">update</div><div class="line">componentUpdated</div></pre></td></tr></table></figure><h3 id="卸载组件时"><a href="#卸载组件时" class="headerlink" title="卸载组件时"></a>卸载组件时</h3><p>点击“卸载”按钮，数据置空否定判断以触发组件卸载。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">unbind</div></pre></td></tr></table></figure><h3 id="重新安装组件时"><a href="#重新安装组件时" class="headerlink" title="重新安装组件时"></a>重新安装组件时</h3><p>点击“安装”按钮，数据赋值肯定判断以触发组件重新安装。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bind</div><div class="line">inserted</div></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>从案例的运行中，对 5 个钩子函数的触发时机有了初步的认识。存疑的也就是<code>bind</code>和<code>inserted</code>、<code>update</code>和<code>componentUpdated</code>的区别了。</p><h4 id="bind-和-inserted"><a href="#bind-和-inserted" class="headerlink" title="bind 和 inserted"></a>bind 和 inserted</h4><p>据文档所说，插入父节点时调用 inserted，来个测试。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">bind: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(el.parentNode)  <span class="comment">// null</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bind'</span>)</div><div class="line">&#125;,</div><div class="line"><span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(el.parentNode)  <span class="comment">// &lt;div id="app"&gt;...&lt;/div&gt;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inserted'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分别在两个钩子函数中输出父节点：<strong>bind 时父节点为 null，inserted 时父节点存在</strong>。</p><h4 id="update-和-componentUpdated"><a href="#update-和-componentUpdated" class="headerlink" title="update 和 componentUpdated"></a>update 和 componentUpdated</h4><p>关于这两个的介绍，从字眼上看感觉是组件更新周期有关，继续验证。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">update: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(el.innerHTML)   <span class="comment">// Hello</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'update'</span>)</div><div class="line">&#125;,</div><div class="line"><span class="attr">componentUpdated</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(el.innerHTML)   <span class="comment">// Hi</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'componentUpdated'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>没毛病，<strong>update 和 componentUpdated 就是组件更新前和更新后的区别</strong>。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>文档说的没错…😒<br><a href="https://jsfiddle.net/imys/twbv0sov/1/" target="_blank" rel="external">Demo</a></p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>根据需求的不同，我们要选择恰当的时机去初始化指令、更新指令调用参数以及释放指令存在时的内存占用等。</p><p>比较常见的场景是：用指令包装一些无依赖的第三方库以扩展组件功能。而一个健壮的库通常会包含：初始化实例、参数更新和释放实例资源占用等操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Vue.directive(<span class="string">'hello'</span>, &#123;</div><div class="line">    <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</div><div class="line">        <span class="comment">// 在 bind 钩子中初始化库实例</span></div><div class="line">        <span class="comment">// 如果需要使用父节点，也可以在 inserted 钩子中执行</span></div><div class="line">        el.__library__ = <span class="keyword">new</span> Library(el, binding.value)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</div><div class="line">        <span class="comment">// 模版更新意味着指令的参数可能被改变，这里可以对库实例的参数作更新</span></div><div class="line">        <span class="comment">// 酌情使用 update 或 componentUpdated 钩子</span></div><div class="line">        el.__library__.setOptions(<span class="built_in">Object</span>.assign(binding.oldValue, binding.value))</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">unbind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="comment">// 释放实例</span></div><div class="line">        el.__library__.destory()</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于Vue自定义指令定义，以及钩子函数的执行时机。
    
    </summary>
    
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="VueDirective" scheme="http://imys.net/tags/VueDirective/"/>
    
  </entry>
  
  <entry>
    <title>获取隐藏元素的高度</title>
    <link href="http://imys.net/20161208/get-height-of-hidden-element.html"/>
    <id>http://imys.net/20161208/get-height-of-hidden-element.html</id>
    <published>2016-12-08T02:15:25.000Z</published>
    <updated>2016-12-08T11:42:59.785Z</updated>
    
    <content type="html"><![CDATA[<p>当一个元素的样式被设置了<code>display: none</code>时，它的高度相关属性值为 0。<br>这是因为修改<code>display</code>属性会触发元素的重排和重绘，而元素重排时将会重新计算它的一些属性值。被设置<code>display: none</code>的元素不占用文档空间，自然计算到的高度值为 0。</p><blockquote><p>关于重排和重绘：<a href="https://xdlrt.github.io/2016/11/05/2016-11-05/" target="_blank" rel="external">重绘重排重渲染 - Icarus</a></p></blockquote><a id="more"></a><h2 id="隐藏元素的方式"><a href="#隐藏元素的方式" class="headerlink" title="隐藏元素的方式"></a>隐藏元素的方式</h2><p>“隐藏”元素的方式有多种，除了设置<code>display: none</code>以外，还有<code>visibility: hidden</code>、<code>opacity: 0</code>、<code>height: 0; overflow: hidden</code>、<code>transform: scale(0)</code>等。</p><p><strong>为什么这里我把“隐藏”加了引号？</strong></p><p>因为上面提到的各种方式，有“真实隐藏”和“视觉隐藏”之分。这应该不难理解，比如<code>visibility: hidden</code>和<code>opacity: 0</code>虽然视觉上看不到，可元素还是在文档流中占用了位置。</p><p>视觉隐藏的元素可以直接获取到元素的高度，所以我们要解决的问题主要还是设置<code>display: none</code>的元素。</p><h2 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h2><p>解决问题的关键在于透彻的分析问题。</p><ol><li>因为我们隐藏了元素，所以获取不到元素的高度。</li><li>我们想要获取“隐藏”元素的高度做一些事。</li><li>有没有一种“隐藏”元素的方式具有<code>display: none</code>的特征，且可以获取高度。</li></ol><p>OK。我们找到了一种可行性探索方案，接下来只要去验证各种隐藏元素的方式应该就能解决问题了。</p><h2 id="scrollHeight"><a href="#scrollHeight" class="headerlink" title="scrollHeight"></a>scrollHeight</h2><p>设置<code>overflow: hidden</code>可以根据元素高度裁剪视区，设置<code>height: 0; overflow: hidden</code>虽然文档流中占用了位置，由于高度为 0，最终表现特征达到了我们期望的<code>display: none</code>。</p><p>此时该元素<code>clientHeight</code>、<code>offsetHeight</code>为 0，但是<code>scrollHeight</code>是有值的。</p><ul><li><code>scrollHeight</code>是一个元素没有滚动条时的所有内容高度</li><li>当一个元素没有滚动条时<code>scrollHeight === offsetHeight</code></li></ul><p>当你有“获取隐藏元素的高度”这个需求时，真实目地其实就是要<strong>获取一个元素没有滚动条时的所有内容高度</strong>。否则固定高度加滚动条的情况下，高度是已知的，不会产生这个需求。<br>也就是说<code>scrollHeight</code>就是我们最后想要得到的值。</p><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><p>最后，容我一猜，当你有这个需求时，也许是要实现这样的效果吧：<a href="https://jsfiddle.net/imys/9ed940ke/1/" target="_blank" rel="external">SlideDown</a></p>]]></content>
    
    <summary type="html">
    
      如何获取隐藏元素的高度？
    
    </summary>
    
    
      <category term="scrollHeight" scheme="http://imys.net/tags/scrollHeight/"/>
    
      <category term="display" scheme="http://imys.net/tags/display/"/>
    
      <category term="height" scheme="http://imys.net/tags/height/"/>
    
      <category term="overflow" scheme="http://imys.net/tags/overflow/"/>
    
      <category term="SlideDown" scheme="http://imys.net/tags/SlideDown/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 获取输入时的光标位置及场景问题</title>
    <link href="http://imys.net/20161125/cursor-offset-at-input.html"/>
    <id>http://imys.net/20161125/cursor-offset-at-input.html</id>
    <published>2016-11-25T02:02:01.000Z</published>
    <updated>2016-12-16T14:37:46.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在输入编辑的业务场景中，可能会需要在光标当前的位置或附近显示提示选项。<br>比如社交评论中的<code>@user</code>功能，要确保提示的用户列表总是出现在<code>@</code>字符右下方，又或者是在自定义编辑器中 autocomplete 语法提示，都需要获取光标当前的位置作为参照点。</p><a id="more"></a><h2 id="两种位置"><a href="#两种位置" class="headerlink" title="两种位置"></a>两种位置</h2><p>对于 WEB 开发来讲，当我们提到某某元素的位置，通常是指这个元素相对于父级或文档的像素单位坐标。而对于输入框中光标，就有了额外的区分。</p><h3 id="相对于内容"><a href="#相对于内容" class="headerlink" title="相对于内容"></a>相对于内容</h3><p>相对于内容，光标位于第几个字符之后，姑且称之为<strong>字符位置</strong>吧。</p><h3 id="相对于UI"><a href="#相对于UI" class="headerlink" title="相对于UI"></a>相对于UI</h3><p>相对于UI，也就是跟普通页面元素一样的<strong>像素位置</strong>了。</p><h2 id="插入或替换内容"><a href="#插入或替换内容" class="headerlink" title="插入或替换内容"></a>插入或替换内容</h2><p>在前言提到的场景中，也有在光标位置处插入内容的需求，比如对选取文字加粗<code>text =&gt; &lt;strong&gt;text&lt;/strong&gt;</code>等。</p><h3 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h3><p><code>textarea</code>元素可以很容易获取到选择的一段文字的起止位置。如果当前没有选择文字，则两个位置值都为光标右侧字符的索引，从 0 开始。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 开始位置</span></div><div class="line">textarea.selectionStart</div><div class="line"><span class="comment">// 结束位置</span></div><div class="line">textarea.selectionEnd</div></pre></td></tr></table></figure><p>对于加粗功能，有了起止位置，就能获取到选择的文字内容，然后对内容进行替换。<br>由于<code>textarea</code>不能包含子元素，只有纯文本，所以基于<code>textarea</code>实现加粗只能像用 Markdown 标记语法实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> selectedText = textarea.value.substring(textarea.selectionStart, textarea.selectionEnd)</div><div class="line">textarea.setRangeText(<span class="string">'**'</span>+ selectedText +<span class="string">'**'</span>)</div></pre></td></tr></table></figure><blockquote><p><code>textarea.setRangeText(text: String)</code> 把选中的文字替换为其他内容。</p></blockquote><h3 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h3><p>也可能我们会使用<code>contenteditable</code>属性把一个元素变为可编辑元素。而上面所用的属性和函数都是普通元素所没有的，所以要换一种姿势实现。</p><p>还是以加粗功能为例。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 获取文档中选中区域</span></div><div class="line"><span class="keyword">var</span> range = <span class="built_in">window</span>.getSelection().getRangeAt(<span class="number">0</span>)</div><div class="line"><span class="keyword">var</span> strongNode = <span class="built_in">document</span>.createElement(<span class="string">'strong'</span>)</div><div class="line"><span class="comment">// 选中区域文本</span></div><div class="line">strongNode.innerHTML = range.toString()</div><div class="line"><span class="comment">// 删除选中区</span></div><div class="line">range.deleteContents()</div><div class="line"><span class="comment">// 在光标处插入新节点</span></div><div class="line">range.insertNode(strongNode)</div></pre></td></tr></table></figure><p>基于<code>contenteditable</code>的可编辑元素，其中的内容均为子元素，文本为<code>textNode</code>，加粗使用 HTML 元素，插入或替换是对元素的操作。</p><p>如果想使用操作内容的思路实现会比较麻烦，因为可以获取到的起止位置是基于子元素的。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>&gt;</span>hello<span class="tag">&lt;<span class="name">strong</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span>w<span class="tag">&lt;/<span class="name">big</span>&gt;</span>orld<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>假如选中的文字是<code>你好wor</code>，调用相关 API 的输出如下。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 当前在文档中选择的文本，document 和 window 都有这个函数</span></div><div class="line"><span class="comment">// var selection = document.getSelection()</span></div><div class="line"><span class="keyword">var</span> selection = <span class="built_in">window</span>.getSelection()</div><div class="line">selection.anchorNode    <span class="comment">// 你好</span></div><div class="line">selection.anchorOffset  <span class="comment">// 0</span></div><div class="line">selection.focusNode     <span class="comment">// orld</span></div><div class="line">selection.focusOffset   <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// 或者使用 Range</span></div><div class="line"><span class="keyword">var</span> range = selection.getRangeAt(<span class="number">0</span>)</div><div class="line">range.startContainer    <span class="comment">// 你好</span></div><div class="line">range.startOffset       <span class="comment">// 0</span></div><div class="line">range.endContainer      <span class="comment">// orld</span></div><div class="line">range.endOffset         <span class="comment">// 2</span></div></pre></td></tr></table></figure><p>最终可以获取到起止元素以及选中区域在开始元素内容中的字符位置和在结束元素内容中的字符位置。<br>其中的起止元素均为<code>textNode</code>类型，通过<code>parentNode</code>获取到包裹元素。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">range.startContainer.parentNode     <span class="comment">// &lt;strong&gt;你好&lt;/strong&gt;</span></div><div class="line">range.endContainer.parentNode       <span class="comment">// &lt;div contenteditable&gt;...&lt;/div&gt;</span></div></pre></td></tr></table></figure><blockquote><p>需要注意的是通过<code>Selection</code>和<code>Rang</code>获取到起止位置是有方向之分的，从左向右选择和从右向左选择得到的值是正好相反的。</p></blockquote><h2 id="基于光标像素位置创建内容"><a href="#基于光标像素位置创建内容" class="headerlink" title="基于光标像素位置创建内容"></a>基于光标像素位置创建内容</h2><p>这里就要开始用像素位置，同样分为两种实现来讲。</p><h3 id="contenteditable-1"><a href="#contenteditable-1" class="headerlink" title="contenteditable"></a>contenteditable</h3><p>可编辑元素获取光标像素位置就像<code>textarea</code>获取光标的字符位置一样简单。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> range = <span class="built_in">window</span>.getSelection().getRangeAt(<span class="number">0</span>)</div><div class="line">range.getBoundingClientRect()  <span class="comment">// &#123; width, height, top, right, bottom, right &#125;</span></div></pre></td></tr></table></figure><p>这么具体的尺寸值，实现自动完成真是 So easy!</p><h3 id="textarea-1"><a href="#textarea-1" class="headerlink" title="textarea"></a>textarea</h3><p><code>textarea</code>其中的内容都是纯文本，在 DOM 中不存在相关的对象，对于像素位置就得另作他想了。</p><h4 id="基于行高和字体大小计算"><a href="#基于行高和字体大小计算" class="headerlink" title="基于行高和字体大小计算"></a>基于行高和字体大小计算</h4><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1.获取光标结束位置</span></div><div class="line"><span class="keyword">var</span> end = textarea.selectionEnd</div><div class="line"><span class="comment">// 2.通过匹配光标之前文本中的换行符计算所在行</span></div><div class="line"><span class="keyword">var</span> row = textarea.value.substring(<span class="number">0</span>, end).match(<span class="regexp">/\r\n|\r|\n/</span>).length</div><div class="line"><span class="comment">// 3.计算 top，行高 * 行数 + 上填充 + 边框宽度</span></div><div class="line"><span class="keyword">var</span> top = lineHeight * (row + <span class="number">1</span>) + paddingTop + borderWidth</div><div class="line"><span class="comment">// 4.获取光标左侧的文本</span></div><div class="line"><span class="keyword">var</span> leftText = textarea.value.split(<span class="regexp">/\r\n|\r|\n/</span>)[row]</div><div class="line"><span class="comment">// 5.影响一段文字所占宽度的因素太多，除字体大小、中英文、符号、字符间距等，还有字体、浏览器、系统等客观因素</span></div><div class="line"><span class="comment">// var left = ...</span></div></pre></td></tr></table></figure><p>这个方案的思路是没问题的，但是考虑所有问题的成本太高。<br>虽然可以创建测试元素去计算文本宽度，但这个方案本身是从严谨的角度出发的。与其混在一块，直接用取巧的办法更简单。</p><blockquote><p><del>这个方案的潜台词是：明明可以靠脸吃饭，却偏偏要靠才华！</del> 🙄</p></blockquote><h4 id="镜像元素"><a href="#镜像元素" class="headerlink" title="镜像元素"></a>镜像元素</h4><p>文本不支持定位？那我创建 DOM 好了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 光标位置</span></div><div class="line"><span class="keyword">var</span> end = textarea.selectionEnd</div><div class="line"><span class="comment">// 光标前的内容</span></div><div class="line"><span class="keyword">var</span> beforeText = textarea.value.slice(<span class="number">0</span>, end)</div><div class="line"><span class="comment">// 光标后的内容</span></div><div class="line"><span class="keyword">var</span> afterText = textarea.value.slice(end)</div><div class="line"><span class="comment">// 对影响 UI 的特殊元素编码</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">escape</span> = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/&lt;|&gt;|`|"|&amp;/g</span>, <span class="string">'?'</span>).replace(<span class="regexp">/\r\n|\r|\n/g</span>, <span class="string">'&lt;br&gt;'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建镜像内容，复制样式</span></div><div class="line"><span class="keyword">var</span> mirror = <span class="string">'&lt;div class="'</span>+ textarea.className +<span class="string">'"&gt;'</span></div><div class="line">                + <span class="built_in">escape</span>(beforeText)</div><div class="line">                + <span class="string">'&lt;span id="cursor"&gt;|&lt;/span&gt;'</span></div><div class="line">                + <span class="built_in">escape</span>(afterText)</div><div class="line">            + <span class="string">'&lt;/div&gt;'</span></div><div class="line"><span class="comment">// 添加到 textarea 同级，注意设置定位及 zIndex，使两个元素重合</span></div><div class="line">textarea.insertAdjacentHTML(<span class="string">'afterend'</span>, mirror)</div><div class="line"><span class="comment">// 通过镜像元素中的假光标占位元素获取像素位置</span></div><div class="line"><span class="keyword">var</span> cursor = <span class="built_in">document</span>.getElementById(<span class="string">'cursor'</span>)</div><div class="line">cursor.getBoundingClientRect()  <span class="comment">// &#123; width, height, top, right, bottom, right &#125;</span></div></pre></td></tr></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>最后悄悄说一句，以上内容不兼容低版本 IE，但是 IE 毕竟主场运行，有些 API 反而是其他浏览器所没有的。就上面提到的案例来说，低版本 IE 也有对应的 API 可用。<br>真是不想在 IE 上去浪费精力了，索性不提。</p>]]></content>
    
    <summary type="html">
    
      JavaScript 如何获取输入时的光标位置，在光标处插入或替换内容
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="Range" scheme="http://imys.net/tags/Range/"/>
    
      <category term="Selection" scheme="http://imys.net/tags/Selection/"/>
    
  </entry>
  
  <entry>
    <title>Vue单元测试起步</title>
    <link href="http://imys.net/20161110/vue-unit-test-start.html"/>
    <id>http://imys.net/20161110/vue-unit-test-start.html</id>
    <published>2016-11-10T03:08:14.000Z</published>
    <updated>2017-08-20T13:57:23.874Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搭建一个项目的前端开发环境，准备趁此把一些没用过的东西尝试下，比如：单元测试。<br>使用<code>vue-cli</code>可以直接生成一个包含<code>unit</code>、<code>e2e</code>测试的开发环境，不过还是需要去了解其中的组织结构、配置和模块的使用等。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>没有一点相关经验，先把<code>vue-cli</code>生成后的<code>test/unit</code>目录拿到自己的项目中。<br><a id="more"></a></p><p><code>test</code> 目录结构:</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">└─ test</div><div class="line">    └─ unit</div><div class="line">        ├─ specs</div><div class="line">        ├─ .eslintrc</div><div class="line">        ├─ index.js</div><div class="line">        └─ karma.conf.js</div></pre></td></tr></table></figure><p>之后在<code>package.json</code>中找到<code>karma</code>相关的模块。</p><ul><li><a href="http://karma-runner.github.io/0.13/index.html" target="_blank" rel="external">karma</a> 一个 JavaScript 测试运行器，其在测试中的作用相当于开发构建中使用的<code>webpack</code>。</li><li><a href="https://github.com/webpack/karma-webpack" target="_blank" rel="external">karma-webpack</a> 连接<code>karma</code>和<code>webpack</code>的桥梁。不经过<code>webpack</code>编译命令是文件是无法独立运行的，<code>karma</code>需要了解你的<code>webpack</code>配置，决定如何处理你的测试文件。</li><li><a href="https://github.com/karma-runner/karma-phantomjs-launcher" target="_blank" rel="external">karma-phantomjs-launcher</a> 是<code>phantomjs</code>在<code>karma</code>中的启动器，由此引出了<code>phantomjs</code>。<a href="https://github.com/ariya/phantomjs" target="_blank" rel="external">PhantomJS</a> 是一个没有界面的 “浏览器” ，内置了 JavaScript API，支持各种Web标准：DOM 处理、CSS 选择器、JSON、Canvas 和 SVG 等。在查找相关资料时，也发现了其他的常规浏览器<code>launcher</code>，比如：Chrome、Firefox、Safari、IE 等，以应对不同浏览器或多浏览器的测试需求。见<a href="http://karma-runner.github.io/0.13/config/browsers.html" target="_blank" rel="external">Browsers</a></li><li><a href="https://github.com/demerzel3/karma-sourcemap-loader" target="_blank" rel="external">karma-sourcemap-loader</a> <code>Karma</code>插件，生成文件的<code>sourcemap</code>。</li><li><a href="https://github.com/karma-runner/karma-mocha" target="_blank" rel="external">karma-mocha</a> 让你在 karma 中使用 <a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a> 测试框架的插件，使用时还需要安装前置依赖<code>mocha</code>。</li><li><a href="https://github.com/domenic/sinon-chai" target="_blank" rel="external">karma-sinon-chai</a> 让你在<code>karma</code>中使用<code>sinon-chai</code>断言库的插件，前置依赖有<code>sinon-chai</code>、<code>sinon</code>、<code>chai</code>…😕</li><li><a href="https://github.com/mlex/karma-spec-reporter" target="_blank" rel="external">karma-spec-reporter</a> 用于将测试结果显示到控制台。</li><li><a href="https://github.com/karma-runner/karma-coverage" target="_blank" rel="external">karma-coverage</a> 生成代码覆盖率。</li></ul><p>其中要使用<code>karma-phantomjs-launcher</code>，需要先安装<code>PhantomJS</code>，通过<code>phantomjs-prebuilt</code>安装。</p><p>看到这一大堆依赖，感觉面前又是一个不亚于 Webpack 的技术栈。之所以去了解每个模块的用处，就是为了在学习的时候直插心脏，忽略那些不重要的模块。<br>以上来说，Karma 是基本的运行器，需要了解其配置和使用。测试框架 Mocha 和断言库 sinon-chai 类似于开发中使用的 Lodash，提供一系列用于测试的工具函数。剩下的按示例集成就好。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>整合一条命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i -D karma karma-webpack phantomjs-prebuilt karma-phantomjs-launcher karma-sourcemap-loader mocha karma-mocha sinon chai sinon-chai karma-sinon-chai karma-spec-reporter karma-coverage</div></pre></td></tr></table></figure><p>PhantomJS 安装比较慢，也可以去其<a href="http://phantomjs.org/download.html" target="_blank" rel="external">官网下载</a>，并手动<a href="http://phantomjs.org/build.html" target="_blank" rel="external">配置环境变量</a>。</p><p>安装好了，先跑一下看看是否安装正确，到<code>package.json</code>的<code>scripts</code>中注册一个命令：<code>&quot;unit&quot;: &quot;karma start test/unit/karma.conf.js --single-run&quot;</code>，然后运行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm run unit</div></pre></td></tr></table></figure><p>然后不出意料的报错了，只是少装了一个模块<code>isparta-loader</code>，是一个代码覆盖工具，继续安装后运行OK。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-unit-1.jpg" alt="vue-unit-1"></div><div class="image-caption">vue-unit-1</div></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>karma.conf.js 文件内容分为两部分。<br><code>module.exports</code> 以上是对 Webpack 配置的处理，像<code>webpack.dev.conf</code>和<code>webpack.prod.conf</code>那样，在不同的环境里使用不同的配置。后一部分就是对 Karma 的配置了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">    config.set(&#123;</div><div class="line">        <span class="comment">// 要启动的测试浏览器</span></div><div class="line">        browsers: [<span class="string">'PhantomJS'</span>],</div><div class="line">        <span class="comment">// 测试框架</span></div><div class="line">        frameworks: [<span class="string">'mocha'</span>, <span class="string">'sinon-chai'</span>],</div><div class="line">        <span class="comment">// 测试报告处理</span></div><div class="line">        reporters: [<span class="string">'spec'</span>, <span class="string">'coverage'</span>],</div><div class="line">        <span class="comment">// 要测试的目标文件</span></div><div class="line">        files: [<span class="string">'./index.js'</span>],</div><div class="line">        <span class="comment">// 忽略的文件</span></div><div class="line">        exclude: [],</div><div class="line">        <span class="comment">// 预处理文件</span></div><div class="line">        preprocessors: &#123;</div><div class="line">            <span class="string">'./index.js'</span>: [<span class="string">'webpack'</span>, <span class="string">'sourcemap'</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// webpack</span></div><div class="line">        webpack: webpackConfig,</div><div class="line">        <span class="attr">webpackMiddleware</span>: &#123;</div><div class="line">            <span class="attr">noInfo</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// Coverage options</span></div><div class="line">        coverageReporter: &#123;</div><div class="line">            <span class="attr">dir</span>: <span class="string">'./coverage'</span>,</div><div class="line">            <span class="attr">reporters</span>: [</div><div class="line">                &#123; <span class="attr">type</span>: <span class="string">'lcov'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span> &#125;,</div><div class="line">                &#123; <span class="attr">type</span>: <span class="string">'text-summary'</span> &#125;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// true: 自动运行测试并退出</span></div><div class="line">        <span class="comment">// false: 监控文件持续测试</span></div><div class="line">        singleRun: <span class="literal">true</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 以下是 vue-cli 没有生成的一些配置</span></div><div class="line"></div><div class="line">        <span class="comment">// 文件匹配的起始路径</span></div><div class="line">        <span class="comment">// basePath: '',</span></div><div class="line">        <span class="comment">// 服务器端口</span></div><div class="line">        <span class="comment">// port: 9876,</span></div><div class="line">        <span class="comment">// 输出着色</span></div><div class="line">        <span class="comment">// colors: true,</span></div><div class="line">        <span class="comment">// 日志级别</span></div><div class="line">        <span class="comment">// LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span></div><div class="line">        <span class="comment">// logLevel: config.LOG_INFO,</span></div><div class="line">        <span class="comment">// 监控文件更改</span></div><div class="line">        <span class="comment">// autoWatch: true,</span></div><div class="line">        <span class="comment">// 超时处理，6s内没有捕获浏览器将终止进程</span></div><div class="line">        <span class="comment">// captureTimeout: 6000</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中对于测试文件入口有点难以理解，仅仅是一个脚本文件，而不是路径匹配，也就是配置文件同级的那个<code>index.js</code>，只有 5 行代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">require</span>(<span class="string">'function-bind'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> testsContext = <span class="built_in">require</span>.context(<span class="string">'./specs'</span>, <span class="literal">true</span>, /\.spec$/)</div><div class="line">testsContext.keys().forEach(testsContext)</div><div class="line"></div><div class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'../../src'</span>, <span class="literal">true</span>, /^\.\/(?!main(\.js)?$)/)</div><div class="line">srcContext.keys().forEach(srcContext)</div></pre></td></tr></table></figure><p>看起来如果使用了高版本的 NodeJs 第一行代码是可以去掉了。</p><ul><li><code>testsContext</code>匹配的是<code>specs</code>目录，里面是存放的是测试用例；</li><li><code>srcContext</code>匹配的是<code>src</code>目录，从正则上看是除了<code>main.js</code>以外的所有文件。</li></ul><p>也就是说，也可以通过脚本文件这种方式设置匹配的目标文件。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>现在看起来一切妥当了，可以开始写测试用例了。</p><p>把以上步骤又重复了一遍，集成到了一个自己写的 Demo 项目中，然后运行测试。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-unit-2.jpg" alt="vue-unit-2"></div><div class="image-caption">vue-unit-2</div></figure><p>什么鬼，找不到 <code>less</code> 变量。</p><p>为了验证不是配置问题，我在 vue-cli 生成项目的组件中使用 less 写了个样式，运行测试出现了一样的问题。<br>最后找到了这条<a href="https://github.com/vuejs-templates/webpack/issues/163" target="_blank" rel="external">issue</a>。<br>翻译了半天，感觉是匹配文件的问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'../../src'</span>, <span class="literal">true</span>, /^\.\/(?!main(\.js)?$)/)</div></pre></td></tr></table></figure><p>原来的正则会匹配除了<code>main.js</code>以外的所有文件，所以样式文件也会被匹配上。使用 less 时一般只有一个变量文件，然后从一个 less 出口文件中解析，而单元测试本身做的工作是单文件测试，单个 less 文件肯定是找不到变量的。<br>不过样式本身是不会对逻辑产生影响的，可以不参与测试，干脆直接锁定目标文件后缀，也就是 vue 组件。</p><p>修改如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'../../src'</span>, <span class="literal">true</span>, /\.vue$/)</div></pre></td></tr></table></figure><p>刚翻过一座山，又遇到一条河。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-unit-3.jpg" alt="vue-unit-3"></div><div class="image-caption">vue-unit-3</div></figure><p>看起来是因为 API 不兼容，PhantomJS 中还没有集成 Promise。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-unit-4.jpg" alt="vue-unit-4"></div><div class="image-caption">vue-unit-4</div></figure><p>为了避免相似的问题，索性把 launcher 换掉了，用<code>karma-chrome-launcher</code>。<br>安装后，更改 Karma 配置中的<code>browsers</code>属性值为<code>[&#39;Chrome&#39;]</code>，测试运行成功。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vue-unit-5.png" alt="vue-unit-5"></div><div class="image-caption">vue-unit-5</div></figure><p>有一些青色的 LOG，第一条使用 Vue 的应该都已经熟悉了，是浏览器控制台输出的 LOG，所以其他的也是浏览器的日志了。</p><p>第 1、3、4 条 LOG 是有一个指令没有找到，第 2 条是关于路由的。指令和路由的引入是在项目入口的 js 文件内，可以预知如果我使用了其他类别的 Vue 插件也会报出 ERROR。<br>还是有问题要解决啊！😒</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>初次接触测试框架和断言，对于组件的测试用例也还在摸索中。<br>从例子上看，大概思路如下：</p><ol><li>引入一个组件；</li><li>创建一个用于测试的 Vue 实例，然后组件挂上去；</li><li>对实例进行模拟操作，然后断言期望值。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> SearchView <span class="keyword">from</span> <span class="string">'src/components/SearchView'</span></div><div class="line"></div><div class="line">describe(<span class="string">'SearchView.vue'</span>, () =&gt; &#123;</div><div class="line">    it(<span class="string">'Input is normal'</span>, () =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">            <span class="attr">el</span>: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">            <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(SearchView)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        vm.key = <span class="string">'曾经的你'</span></div><div class="line"></div><div class="line">        vm.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            expect(vm.$el.querySelector(<span class="string">'.m-key'</span>).textContent).to.equal(<span class="string">'曾经的你'</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>实际的项目中，针对复杂的逻辑或者异步操作，测试一定不会这么简单。😅<br>下一步准备找一些 Vue 的开源项目，学习一下其中的测试用例写法。</p><p>End!</p>]]></content>
    
    <summary type="html">
    
      Vue单元测试配置，Vue unit test, Vue Karma 配置
    
    </summary>
    
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="Unit test" scheme="http://imys.net/tags/Unit-test/"/>
    
      <category term="单元测试" scheme="http://imys.net/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Karma" scheme="http://imys.net/tags/Karma/"/>
    
      <category term="Phantomjs" scheme="http://imys.net/tags/Phantomjs/"/>
    
  </entry>
  
  <entry>
    <title>关于 text-transform: capitalize 失效的场景与解决方案</title>
    <link href="http://imys.net/20161031/text-transform-capitalize-not-working.html"/>
    <id>http://imys.net/20161031/text-transform-capitalize-not-working.html</id>
    <published>2016-10-31T05:39:02.000Z</published>
    <updated>2016-11-12T19:41:28.738Z</updated>
    
    <content type="html"><![CDATA[<p><code>text-transform</code> 是一个可以将文字进行大小写转换或单词首字符大写的 CSS 属性。自从知道了它，我就开始偷懒不在 js 中去在调用相关的转换函数了。</p><p>昨天在给多说扩展用户 UA 功能时遇到一个 <code>text-transform: capitalize</code> 失效的问题，经过一番测试，找到了问题的原因。<br><a id="more"></a></p><h2 id="场景还原"><a href="#场景还原" class="headerlink" title="场景还原"></a>场景还原</h2><p>根据当时场景，抽取关键 css 属性：</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.capitalize</span> &#123;</div><div class="line">  <span class="attribute">text-transform</span>: capitalize</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.before</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'hello'</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.after</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'world'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现有如下的 HTML，你们猜最终会是什么结果？</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"capitalize"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"capitalize"</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"capitalize before"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"capitalize after"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello World</div><div class="line">HELLO WORLD</div><div class="line">Helloworld</div><div class="line">Helloworld</div></pre></td></tr></table></figure><p>问题DEMO链接：<a href="https://jsfiddle.net/imys/2mb9ykL3/" target="_blank" rel="external">text-transform: capitalize 失效demo</a></p><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><p>通过运行结果可以发现全小写单词组合时，转换没有任何问题，略过。</p><h3 id="大写单词组合"><a href="#大写单词组合" class="headerlink" title="大写单词组合"></a>大写单词组合</h3><p>全大写单词组合，转换失效？真的是这样吗？</p><p>通过查阅相关文档，关于 <code>capitalize</code> 的介绍为：<strong>将每个单词的第一个字母转换成大写</strong>。<br>看来是我们对它期望太高了，<code>text-transform: capitalize</code>并不能像 <code>lodash</code> 库中的转换函数那样，将全大写的的 <code>AAA</code> 转换成你期望的 <code>Aaa</code>。</p><h3 id="含有伪元素"><a href="#含有伪元素" class="headerlink" title="含有伪元素"></a>含有伪元素</h3><p>这也是我面临到的问题，每个 UA 标签上的 tootip 都是我用伪类模拟的。<br>由于当时伪元素是绝对定位的，在视觉上真的是当作了另外的元素看待。</p><p>而在问题 DEMO 中，我们还原了伪元素默认显示的位置：<code>:before</code> 就是在原始内容前追加内容，<code>:after</code> 就是在原始内容后追加内容。<br><strong>由于最后生成的内容之间没有间隙，导致 <code>text-transform</code> 转换时将其当作一个单词。</strong></p><p>为了验证我的结论，我在含有伪元素的内容前或后加了个空格：</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"capitalize before"</span>&gt;</span> world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"capitalize after"</span>&gt;</span>hello <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><p>最后转换成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello World</div><div class="line">Hello World</div></pre></td></tr></table></figure><p><a href="https://jsfiddle.net/imys/2mb9ykL3/1/" target="_blank" rel="external">DEMO</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>虽然找到了问题的原因，但是实际场景中使用伪元素的初衷就是要将一个元素当作多个元素使用，HTML 中加空格会有半个中文字符宽度的空白，也就等于产生了不必要的边距。</p><p>做到这里真是感觉不如直接写个 js 转换函数算了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">string</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> string.charAt(<span class="number">0</span>).toUpperCase() + string.substr(<span class="number">1</span>).toLowerCase()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>写出来后忽然发现这段代码完全可以用 CSS 去“实现”。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.capitalize</span> &#123;</div><div class="line">    <span class="attribute">text-transform</span>: lowercase;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.capitalize</span><span class="selector-pseudo">:first-letter</span> &#123;</div><div class="line">    <span class="attribute">text-transform</span>: uppercase;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上个月旭哥博客有篇很详细的 <code>:first-letter</code> 介绍：<a href="http://www.zhangxinxu.com/wordpress/2016/09/css-first-letter-pseudo-element/" target="_blank" rel="external">张鑫旭：深入CSS :first-letter伪元素及其实例等</a></p><p>其中提到了 <code>:first-letter</code> 和 <code>:before</code> 之间的猫腻，就是说 <code>:first-letter</code> 也生效于 <code>:before</code> 伪元素。<br>不过我测试后发现，<strong>当 <code>:before</code> 伪元素设置为绝对定位时，<code>:first-letter</code>将只作用于原始内容</strong>。</p><p><a href="https://jsfiddle.net/imys/x4ntopqr/" target="_blank" rel="external">:first-letter和:before示例demo</a></p><p>利用这个机制，总算可以给自己一个完美的答复了。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.capitalize</span> &#123;</div><div class="line">  <span class="attribute">text-transform</span>: capitalize</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.before</span> &#123;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">2.5em</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.before</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'hello'</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.before</span><span class="selector-pseudo">:first-letter</span> &#123;</div><div class="line">  <span class="attribute">text-transform</span>: uppercase</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.after</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'world'</span>;</div><div class="line">  <span class="attribute">text-transform</span>: capitalize</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>附加内容在 <code>:before</code> 时，使用 <code>:first-letter</code> + <code>uppercase</code> 解决，如果原始内容有大写，需要再给原标签加 <code>lowercase</code>；</li><li>附加内容在 <code>:after</code> 时，给 <code>:after</code> 再加 <code>capitalize</code>。</li></ul><p><a href="https://jsfiddle.net/imys/2mb9ykL3/2/" target="_blank" rel="external">DEMO</a></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2>]]></content>
    
    <summary type="html">
    
      关于 text-transform: capitalize 失效的场景与解决方案
    
    </summary>
    
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://imys.net/tags/CSS3/"/>
    
      <category term="text-transform" scheme="http://imys.net/tags/text-transform/"/>
    
      <category term="capitalize" scheme="http://imys.net/tags/capitalize/"/>
    
  </entry>
  
  <entry>
    <title>使用“队列”解决“插队”业务场景</title>
    <link href="http://imys.net/20161027/use-queue-solve-continuous-request.html"/>
    <id>http://imys.net/20161027/use-queue-solve-continuous-request.html</id>
    <published>2016-10-27T09:21:23.000Z</published>
    <updated>2016-11-12T19:39:34.539Z</updated>
    
    <content type="html"><![CDATA[<p>为了达到操作变化的实时性，在多选择项的业务场景中，往往点击一次就会发送一次 HTTP 请求。<br>但同时又面临另外一个问题，在连续点击同一个选择项时，就会连续触发针对此项的删除或添加逻辑，进而连续发送 POST 或 DELETE 请求。<br>理想的状态是上一个请求结束后才开始下一个请求，但是网络请求是异步的、请求耗时是不可控的，也就有可能在此项的添加请求未完成前，删除请求先完成了。</p><p>我觉得用“插队”来描述这个场景真是再好不过了。<br><a id="more"></a></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>既然有人要“插队”，我们就要定义一个规则：<strong>先进先出</strong>。<br>也就是数据结构中的“队列”了。</p><p>javascript 中队列的实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 实现1</span></div><div class="line"><span class="keyword">var</span> queue = []</div><div class="line"><span class="comment">// 进队</span></div><div class="line">queue.push(<span class="number">1</span>)</div><div class="line">queue.push(<span class="number">2</span>)</div><div class="line">queue.push(<span class="number">3</span>)</div><div class="line"><span class="comment">// 出队</span></div><div class="line">queue.shift() <span class="comment">// 1</span></div><div class="line">queue.shift() <span class="comment">// 2</span></div><div class="line">queue.shift() <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 实现2</span></div><div class="line"><span class="keyword">var</span> queue2 = []</div><div class="line"><span class="comment">// 进队</span></div><div class="line">queue2.unshift(<span class="number">1</span>)</div><div class="line">queue2.unshift(<span class="number">2</span>)</div><div class="line">queue2.unshift(<span class="number">3</span>)</div><div class="line"><span class="comment">// 出队</span></div><div class="line">queue2.pop() <span class="comment">// 1</span></div><div class="line">queue2.pop() <span class="comment">// 2</span></div><div class="line">queue2.pop() <span class="comment">// 3</span></div></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>定义一个数组存放每一次点击的 HTTP 请求，此外不管你使用何种开发技术都应该有个发送请求的函数或库，如果是基于 promise 就更好了，这里简单用 XHR 代替。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> requestQueue = []</div><div class="line"><span class="keyword">var</span> XHR = <span class="function"><span class="keyword">function</span>(<span class="params">method, url, param</span>) </span>&#123;&#125;</div></pre></td></tr></table></figure><p>点击操作的入口函数，先创建请求进队。<br>因为第二次请求必须要在第一次请求完成之后，所以只有队列中仅存在一个请求时才去触发更新。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params">method, url, param</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = requestQueue.push(XHR(method, url, param))</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(len === <span class="number">1</span>) &#123;</div><div class="line">        update()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行的永远是队列中的第一个请求。<br>当一个请求完成后，就出队，队列中剩余的请求依次前进一个位置。<br>如果存在未完成的请求，继续调用更新操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    requestQueue[<span class="number">0</span>].then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        <span class="comment">// request success</span></div><div class="line">        requestQueue.shift()</div><div class="line">        requestQueue.length &amp;&amp; update()</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      开发实践中数据结构的应用，使用“队列”解决需要连续请求的业务场景
    
    </summary>
    
    
      <category term="Promise" scheme="http://imys.net/tags/Promise/"/>
    
      <category term="Request" scheme="http://imys.net/tags/Request/"/>
    
      <category term="HTTP" scheme="http://imys.net/tags/HTTP/"/>
    
      <category term="Queue" scheme="http://imys.net/tags/Queue/"/>
    
      <category term="数据结构" scheme="http://imys.net/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java项目下基于webpack的前端开发环境构建</title>
    <link href="http://imys.net/20161013/java-webpack-dev-build.html"/>
    <id>http://imys.net/20161013/java-webpack-dev-build.html</id>
    <published>2016-10-13T06:05:56.000Z</published>
    <updated>2016-11-12T19:20:21.641Z</updated>
    
    <content type="html"><![CDATA[<p>标题可能不是很恰当，想不到一个合适的标题来概括我遇到以及解决的问题，暂且这样吧。</p><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>是一个不完全与后端分离的基于 webpack 构建的 Vue 项目。</p><p>项目入口是一个 jsp 页面，其中引用了一些 jsp 模版。我想是因为有一些内容需要后端直出到页面上。<br>该页面上固定引用了 webpack 打包好的 css 及 js 文件路径，当然也加了动态参数用于刷新版本更新后的客户端缓存。</p><p>可以使用 <code>webpack</code> 命令打包，或是用 <code>webpack --progress --colors --watch</code> 命令启动监听模式动态构建。<br><a id="more"></a></p><p>这让前端开发环境变的不够友好：监听模式下修改文件后，是需要通过刷新页面获取更改的。<br>好像回到了传统的前端开发环境中。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由于入口页面是由后端渲染 jsp 生成的，用 <code>html-webpack-plugin</code> 插件生成 html 并注入脚本、样式的法子行不通了。</p><p>热替换感觉没戏了，就想办法加个自动刷新吧。</p><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>开始用 <code>webpack-dev-server</code> 代理后端服务器，可以实现监听更改、实时构建，但由于页面上的页面样式脚本引用与 webpack 构建好的文件路径匹配不上，还是获取不到更改。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">var</span> webpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>)</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> webpackDevServer(webpack(config), &#123;</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">quiet</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">stats</span>: &#123; </div><div class="line">        <span class="attr">chunks</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">colors</span>: <span class="literal">true</span> </div><div class="line">    &#125;,</div><div class="line">    <span class="attr">proxy</span>: &#123;</div><div class="line">        <span class="string">'**'</span>: <span class="string">'http://localhost:8080'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure><p>跑了 3000 端口，页面上的文件引用依然是 8080 端口，好像是在后端就写死了。即使是我临时改了 jsp 文件的引用路径，还是需要手动刷新下页面才能获取更改。</p><h3 id="browsersync"><a href="#browsersync" class="headerlink" title="browsersync"></a>browsersync</h3><p>想起了 gulp 时代一直用的 <code>browsersync</code>，用它代理后端服务，监听文件变更并执行 <code>webpack</code> 命令，刷新浏览器。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'shelljs/global'</span>)</div><div class="line"><span class="keyword">var</span> bs = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create()</div><div class="line"></div><div class="line">bs.init(&#123;</div><div class="line">    <span class="attr">proxy</span>: <span class="string">'http://localhost:8080'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">bs.watch(<span class="string">'./src/**/*.*'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    exec(<span class="string">'webpack'</span>, bs.reload)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>但这样每次执行 <code>webpack</code> 命令，都相当于全新编译，所以速度很慢。以该项目而言，每次更改后需要等待 6s 才刷新浏览器。</p><p>还实验了 gulp + webpack-stream，属于换汤不换药，每次还是全新编译。</p><p>今天忽然想到，直接用 webpack 的监听模式启动，在每次编译后刷新浏览器就可以了。监听模式下，只有第一次是全新编译，之后会缓存未变化的模块，所以速度很快。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">var</span> webpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>)</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</div><div class="line"><span class="keyword">var</span> bs = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create()</div><div class="line"></div><div class="line"><span class="keyword">var</span> compiler = webpack(config)</div><div class="line"></div><div class="line">bs.init(&#123;</div><div class="line">    <span class="attr">proxy</span>: <span class="string">'http://localhost:8080'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">compiler.watch(&#123; </div><div class="line">    <span class="attr">aggregateTimeout</span>: <span class="number">300</span>,      <span class="comment">// 300ms 内的文件更改聚合到一次构建中</span></div><div class="line">    ignored: <span class="regexp">/node_modules/</span>,    <span class="comment">// 忽略大文件或基本不会变更的目录</span></div><div class="line">    poll: <span class="literal">true</span>                  </div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</div><div class="line"></div><div class="line">    bs.reload()</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(stats.toString(&#123;</div><div class="line">        <span class="attr">chunks</span>: <span class="literal">false</span>, </div><div class="line">        <span class="attr">colors</span>: <span class="literal">true</span></div><div class="line">    &#125;))</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>监听模式除了命令行启动外，也可以使用 <code>watch</code> 方法调用，还可以通过 <code>ignored</code> 配置项忽略一些不会变更的目录。<br>之后每次保存文件，只需要 100ms 左右就会刷新浏览器。</p><h2 id="感叹一句"><a href="#感叹一句" class="headerlink" title="感叹一句"></a>感叹一句</h2><blockquote><p>如今的前端把多少时间都耗在环境搭建上了~</p></blockquote>]]></content>
    
    <summary type="html">
    
      java项目下基于webpack的前端开发环境构建，实时刷新预览
    
    </summary>
    
    
      <category term="Java" scheme="http://imys.net/tags/Java/"/>
    
      <category term="jsp" scheme="http://imys.net/tags/jsp/"/>
    
      <category term="Webpack" scheme="http://imys.net/tags/Webpack/"/>
    
      <category term="BrowserSync" scheme="http://imys.net/tags/BrowserSync/"/>
    
  </entry>
  
  <entry>
    <title>如何为Canvas中特定图形绑定事件？</title>
    <link href="http://imys.net/20160808/canvas-event.html"/>
    <id>http://imys.net/20160808/canvas-event.html</id>
    <published>2016-08-08T06:43:38.000Z</published>
    <updated>2016-11-12T19:10:45.627Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas 本身也属于 HTMLElement，自然也是支持各种事件绑定的。<br>但绘制在其中的图形并不作为其子元素存在，这就不能方便的为 Canvas 中的某个特定图形去绑定事件。</p><p>我们都知道 js 中的事件委托，将事件绑定到父节点上，待到父节点响应事件时，动态判断当前响应元素为目标子节点时再执行对应的操作。</p><p>这个思想同样也可以用在 Canvas 上，只需要为 <code>canvas</code> 元素绑定事件，事件响应时判断当前鼠标位置处于哪个图形之上，执行对应的操作。<br><a id="more"></a></p><h2 id="isPointInPath"><a href="#isPointInPath" class="headerlink" title="isPointInPath"></a>isPointInPath</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">context.isPointInPath(x, y);</div></pre></td></tr></table></figure><p>理论上讲，想要知道一个点是否处于一个图形之中，现成的算法应该是有很多了。不过难得 canvas 本身就提供了这样的函数，用来判断一个点是否处于当前路径中。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</div><div class="line">ctx.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="built_in">console</span>.log(ctx.isPointInPath(<span class="number">50</span>, <span class="number">100</span>))  <span class="comment">// true</span></div></pre></td></tr></table></figure><p>就像这样，当你创建一个矩形时，就会产生一个路径，此时就可以调用该方法去判断一个点是否存在于该路径。</p><p>产生路径的函数还有其他，比如：<code>lineTo()</code>、<code>clip()</code>、<code>arc()</code>、<code>arcTo()</code> 等。</p><h2 id="实现图形的事件绑定"><a href="#实现图形的事件绑定" class="headerlink" title="实现图形的事件绑定"></a>实现图形的事件绑定</h2><p>先来个简单的饼图吧。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'c'</span>);</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="keyword">var</span> r = canvas.width / <span class="number">2</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(r, r, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span>);</div><div class="line">ctx.fillStyle = <span class="string">'#2196f3'</span>; <span class="comment">//蓝色</span></div><div class="line">ctx.fill();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(r, r, r, <span class="built_in">Math</span>.PI * <span class="number">1</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">ctx.fillStyle = <span class="string">'#f44336'</span>; <span class="comment">//红色</span></div><div class="line">ctx.fill();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInPath</span> (<span class="params">x, y</span>)</span>&#123;</div><div class="line">    ctx.arc(r, r, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ctx.isPointInPath(x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">canvas.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(isInPath(e.offsetX, e.offsetY)) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>现在创建一个红蓝拼接的饼图，<code>isInPath</code> 方法判断一个点是否处于蓝色区。理想的结果是只有当鼠标点击区域为蓝色区域时才输出 <code>hello</code>。</p><p>但事实确不是如此，<a href="https://jsfiddle.net/imys/7r4xes6v/1/" target="_blank" rel="external">示例Demo</a>。无论点击红色还是蓝色区域均会输出 <code>hello</code>，这是怎么回事呢？</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>既然 <code>isPointInPath(x, y)</code> 的基于路径判断的，那我们就从路径入手。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">ctx.arc(r, r, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span>);</div><div class="line">ctx.fillStyle = <span class="string">'#2196f3'</span>;</div><div class="line">ctx.fill();</div><div class="line"></div><div class="line">ctx.arc(r, r, r, <span class="built_in">Math</span>.PI * <span class="number">1</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">ctx.fillStyle = <span class="string">'#f44336'</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure><p>当我们把画图时的 <code>ctx.beginPath()</code> 去掉后，发现生成的图形变成一个红色的整圆了：<a href="https://jsfiddle.net/imys/7r4xes6v/2/" target="_blank" rel="external">示例Demo</a>。</p><p><code>beginPath()</code> 用来重置路径，由于第一个半圆画完路径未重置，第二个半圆就绘制了两条路径。这似乎解释了上个问题的答案。</p><p>在 <code>isInPath(x, y)</code> 函数中，由于路径没有重置，所以最终最终判断的不止是 <code>ctx.arc(r, r, r, 0, Math.PI * 1)</code> 这个路径，还有方法外的画红色圆的路径。两个路径加一起自然就是个整圆，所以无论蓝色区还是红色区都会输出。</p><h3 id="正确结果"><a href="#正确结果" class="headerlink" title="正确结果"></a>正确结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInPath</span> (<span class="params">x, y</span>)</span>&#123;</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(r, r, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ctx.isPointInPath(x, y)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改 <code>isInPath</code> 函数，加入重置路径，结果正确输出：<a href="https://jsfiddle.net/imys/58965umL/1/" target="_blank" rel="external">示例Demo</a>。</p><h2 id="实战示例"><a href="#实战示例" class="headerlink" title="实战示例"></a>实战示例</h2><p><a href="https://jsfiddle.net/imys/48xx5fxu/2/" target="_blank" rel="external">鼠标悬浮显示区块数据的饼图</a>。</p>]]></content>
    
    <summary type="html">
    
      Canvas绑定事件，为Canvas中特定图形绑定事件
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="Canvas" scheme="http://imys.net/tags/Canvas/"/>
    
      <category term="Event" scheme="http://imys.net/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>VsCode插件：七牛图床工具，写文章更快一步</title>
    <link href="http://imys.net/20160726/vscode-extension-qiniu-upload.html"/>
    <id>http://imys.net/20160726/vscode-extension-qiniu-upload.html</id>
    <published>2016-07-26T01:53:52.000Z</published>
    <updated>2017-08-20T13:57:23.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来，我都很少在文章中加插图。因为每加一张插图，我都需要先把图片上传到七牛，然后才能获取外链插入文章。</p><p>之前写 Markdown 一直是用的 Sublime，直到 Vscode 最近一次更新有了 Tabs 之后，便开始尝试在工作中使用。与最初的预览版相比进步蛮大的，能看到很多 VS 的影子。之前也用过一段时间 Atom，虽然界面挺喜欢，但始终没有原生客户端的流畅感。到底客户端还是微软的强项，Vscode 这方面舒服多了，启动与大文件编辑都不比 Sublime 差。</p><p>Vscode 是基于浏览器内核的跨平台编辑器，底层代码大部分都是 TypeScript，当然最终还是会编译为 javascript。这样对于一个前端而言就倍感亲切了，可以轻易的使用自己吃饭的语言去扩展功能。</p><p>所以这个<a href="https://github.com/yscoder/vscode-qiniu-upload-image" target="_blank" rel="external">七牛图床工具</a>就诞生了。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/vscode-qiniu-pv.gif" alt="vscode-qiniu-pv"></div><div class="image-caption">vscode-qiniu-pv</div></figure><a id="more"></a><h2 id="如何开始插件编写"><a href="#如何开始插件编写" class="headerlink" title="如何开始插件编写"></a>如何开始插件编写</h2><p>这里还是有必要把这个插件编写过程回顾一下，因为现在可供参考的中文资料实在不多。<br>可以参考这篇文章 <a href="http://www.cnblogs.com/caipeiyu/p/5507252.html" target="_blank" rel="external">vscode编写插件详细过程</a> 来完成插件开发环境部署和创建基本项目。</p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>以 Javascript 编写插件为例，这里我假设你已经建立了一个基础项目。</p><p>就如我们经常在 github 上见到的前端或 Node 项目一样，都有一个 <code>package.json</code> 用于描述项目信息，也可以使用 <code>npm</code> 命令安装你需要的第三方库。此外这个文件中又包含了一些专属于 Vscode 的配置项。</p><p>这里不在关注常规的 <code>package.json</code> 配置项，只介绍 Vscode 相关的。</p><h3 id="activationEvents"><a href="#activationEvents" class="headerlink" title="activationEvents"></a>activationEvents</h3><p>插件在何时被激活。</p><ul><li><code>onLanguage:${language}</code>：打开某种格式的文件时</li><li><code>onCommand:${command}</code>：输入某种命令时（Vscode中按F1）</li><li><code>onDebug:${type}</code>：调试某种语言类型时</li><li><code>workspaceContains:${toplevelfilename}</code>：当你的工作区包含某种文件时？</li><li><code>*</code>：任何时候，编辑器启动就激活</li></ul><p>描述可能有误，对应文档：<a href="https://code.visualstudio.com/docs/extensionAPI/activation-events" target="_blank" rel="external">Activation Events</a>。</p><h3 id="contributes"><a href="#contributes" class="headerlink" title="contributes"></a>contributes</h3><p>Contributes 意思是贡献，这个属性中包含的都是可扩展点。</p><ul><li><code>keybindings</code>：绑定按键来执行某个命令</li><li><code>configuration</code>：定义你的插件个性化配置</li><li><code>menus</code>：扩展菜单</li><li><code>commands</code>：用命令名执行某个命令</li><li>……</li></ul><p>这四项应该是最常用的，更多：<a href="https://code.visualstudio.com/docs/extensionAPI/extension-points" target="_blank" rel="external">Contribution Points</a>。</p><p>OK，有了这些，大概可以为你的插件编写作构思了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// 插件何时被激活</span></div><div class="line">  <span class="string">"activationEvents"</span>: [</div><div class="line"></div><div class="line">      <span class="comment">// 打开一个 Markdown 文件时，插件将被激活</span></div><div class="line">    <span class="string">"onLanguage:markdown"</span></div><div class="line"></div><div class="line">  ],</div><div class="line">    <span class="comment">// 插件入口文件</span></div><div class="line">  <span class="string">"main"</span>: <span class="string">"./extension"</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 扩展点</span></div><div class="line">  <span class="string">"contributes"</span>: &#123;</div><div class="line"></div><div class="line">      <span class="comment">// 按键绑定，当编辑区具有焦点且语言为 markdown 时，按 ctrl+q 执行 extension.qiniu.upload，也可针对 mac 平台独立配置</span></div><div class="line">    <span class="string">"keybindings"</span>: [&#123;</div><div class="line">        <span class="string">"command"</span>: <span class="string">"extension.qiniu.upload"</span>,</div><div class="line">        <span class="string">"key"</span>: <span class="string">"ctrl+q"</span>,</div><div class="line">        <span class="string">"mac"</span>: <span class="string">"ctrl+q"</span>,</div><div class="line">        <span class="string">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; editorLangId == 'markdown'"</span></div><div class="line">    &#125;],</div><div class="line"></div><div class="line">    <span class="comment">// 插件配置属性，当你想要获取 qiniu 的配置时，以下所有 qiniu.xx 属性将合并于一个对象中</span></div><div class="line">    <span class="comment">// title 和 description 将作为注释和属性提示分别在默认配置文件和用户配置文件中呈现</span></div><div class="line">    <span class="string">"configuration"</span>: &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"object"</span>,</div><div class="line">        <span class="string">"title"</span>: <span class="string">"qiniu configuration"</span>,</div><div class="line">        <span class="string">"properties"</span>: &#123;</div><div class="line">            <span class="string">"qiniu.enable"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"boolean"</span>,</div><div class="line">                <span class="string">"default"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="string">"description"</span>: <span class="string">"七牛图片上传工具开关"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"qiniu.access_key"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"string"</span>,</div><div class="line">                <span class="string">"default"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"description"</span>: <span class="string">"一个有效的七牛 AccessKey 签名授权。"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"qiniu.secret_key"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"string"</span>,</div><div class="line">                <span class="string">"default"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"description"</span>: <span class="string">"一个有效的七牛 SecretKey 签名授权。"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"qiniu.bucket"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"string"</span>,</div><div class="line">                <span class="string">"default"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"description"</span>: <span class="string">"七牛图片上传空间."</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"qiniu.remotePath"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"string"</span>,</div><div class="line">                <span class="string">"default"</span>: <span class="string">"$&#123;fileName&#125;"</span>,</div><div class="line">                <span class="string">"description"</span>: <span class="string">"七牛图片上传路径，参数化命名。"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"qiniu.domain"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"string"</span>,</div><div class="line">                <span class="string">"default"</span>: <span class="string">""</span>,</div><div class="line">                <span class="string">"description"</span>: <span class="string">"七牛图床域名。"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以我的 <code>package.json</code> 为例，描述了以下信息：</p><ol><li>当你打开一个 Markdown 文件时，插件将被激活。</li><li>执行 <code>ctrl+Q</code> 将启动一个命令，还有一个 <code>when</code> 属性，表示额外的命令激活条件。</li><li>因为要上传到七牛，所以需要一些你的七牛用户信息，也就是 <code>configuration</code>，这可以在代码中方便的读取到。</li></ol><p>最后我需要以合适的方式获取你想上传的本地图片，以 Markdown 的图片格式写入到你的光标位置。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>插件的入口文件只有一个，也就是配置中的 <code>&quot;main&quot;: &quot;./extension&quot;</code>。</p><p>一个基础的入口文件是这样的：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> vscode = <span class="built_in">require</span>(<span class="string">'vscode'</span>);</div><div class="line"><span class="comment">// 插件激活时执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">context</span>) </span>&#123;</div><div class="line">    <span class="comment">// 注册命令</span></div><div class="line">    <span class="keyword">var</span> disposable = vscode.commands.registerCommand(<span class="string">'extension.hello'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 编辑器上方显示一条信息</span></div><div class="line">        vscode.window.showInformationMessage(<span class="string">'hello!'</span>);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 加入释放队列？</span></div><div class="line">    context.subscriptions.push(disposable);</div><div class="line">&#125;</div><div class="line">exports.activate = activate;</div><div class="line"><span class="comment">// 插件停用时执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deactivate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">exports.deactivate = deactivate;</div></pre></td></tr></table></figure><p>通过这个文件，可以发现 <code>vscode</code> 是个关键的对象，插件能做多少事都取决于这个对象可以提供多少接口支持。</p><p>最初我是想通过复制命令实现功能的，也就是用户复制一个图片到编辑器，然后拦截剪贴板拿到图片路径上传、插入文档。事与愿违，Vscode 没有提供这方法的接口支持，见：<a href="https://github.com/Microsoft/vscode/issues/4972" target="_blank" rel="external">Issues: Clipboard access through Extensions API</a>。下面提到一个第三方包 <code>node-copy-paste</code> 也仅能访问字符串信息，只好作罢。</p><p>Vscode 的接口调用大概分为两类：命令调用：<a href="https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands" target="_blank" rel="external">Complex Commands API</a> 和对象方法调用：<a href="https://code.visualstudio.com/docs/extensionAPI/vscode-api" target="_blank" rel="external">vscode namespace API</a>。</p><p>前者很易用，比如预览 html 的示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> success = <span class="keyword">await</span> commands.executeCommand(<span class="string">'vscode.previewHtml'</span>, Uri.parse(<span class="string">'file:///some/path/to/file.html'</span>));</div></pre></td></tr></table></figure><p>文档的示例是 TypeScript 写的，转换为 ES5 应该是这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> success = commands.executeCommand(<span class="string">'vscode.previewHtml'</span>, Uri.parse(<span class="string">'file:///some/path/to/file.html'</span>))</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</div><div class="line">        <span class="comment">// success</span></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="comment">// error</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure><p>如果能调用一个选择文件的窗口获取本地图片路径最好不过了。可我翻遍了文档，也只找到了一个选择文件夹的命令 <code>vscode.openFolder</code>，简直就是不想让你写的太轻松。</p><p>最终只能使用一个输入框来接收本地图片路径，也就是预览图中的效果。</p><p>以下是我用到的一些API：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 获取配置文件中的插件配置</span></div><div class="line">vscode.workspace.getConfiguration(<span class="string">'qiniu'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 显示错误信息</span></div><div class="line">vscode.window.showErrorMessage(<span class="string">'error'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 显示一个输入框，返回 Promise 对象</span></div><div class="line">vscode.window.showInputBox(option)</div><div class="line"></div><div class="line"><span class="comment">// 编辑文件的函数，参数还是一个函数，这个回调函数的参数才是真正的可以用来增删文字的对象</span></div><div class="line">vscode.window.activeTextEditor.edit(<span class="function"><span class="keyword">function</span>(<span class="params">textEditorEdit</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 在光标位置插入文本</span></div><div class="line">    <span class="comment">// textEditorEdit.insert(editor.selection.active, img);</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>最终技术支持其实是 <a href="http://developer.qiniu.com/code/v6/sdk/nodejs.html" target="_blank" rel="external">七牛SDK</a> ヾ(･ω･`｡)。<br>具体的代码可以去 Github 上看。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打包、发布那篇文章中也提到了，我已经打包放到了 Github 仓库中，就是那个 <code>·vsix</code> 文件。使用 <code>Ctrl+O</code> 选择插件包就可以安装了，在用户配置文件中加一下你的七牛配置，重启下就能用了，快捷键 <code>ctrl+q</code>。</p><p>同时可以通过编辑器左侧插件面板在线搜索 <code>qiniu-upload-image</code> 安装。</p><p><strong>文件 -&gt; 首选项 -&gt; 用户设置</strong>，在右侧区域编写插件配置覆盖默认配置。<br>配置文件示例如下，参考你的七牛用户信息填写：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"qiniu.enable"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"qiniu.access_key"</span>: <span class="string">"xxxxxxxxxxxxx"</span>,</div><div class="line">    <span class="attr">"qiniu.secret_key"</span>: <span class="string">"xxxxxxxxxxxxx"</span>,</div><div class="line">    <span class="attr">"qiniu.bucket"</span>: <span class="string">"yourBucket"</span>,</div><div class="line">    <span class="attr">"qiniu.remotePath"</span>: <span class="string">"$&#123;fileName&#125;"</span>,</div><div class="line">    <span class="attr">"qiniu.domain"</span>: <span class="string">"http://xxx.xxxxx.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>编辑器中鼠标悬浮会显示属性提示。</p><p>Enjoy!</p>]]></content>
    
    <summary type="html">
    
      VsCode插件：七牛图床工具，写文章更快一步
    
    </summary>
    
    
      <category term="VsCode" scheme="http://imys.net/tags/VsCode/"/>
    
      <category term="Qiniu" scheme="http://imys.net/tags/Qiniu/"/>
    
      <category term="Markdown" scheme="http://imys.net/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>对元素特性巧妙利用的一些例子</title>
    <link href="http://imys.net/20160715/clever-use-of-elements-feature.html"/>
    <id>http://imys.net/20160715/clever-use-of-elements-feature.html</id>
    <published>2016-07-15T01:10:40.000Z</published>
    <updated>2016-11-12T19:11:10.123Z</updated>
    
    <content type="html"><![CDATA[<p>在一些框架和库中都可见到一些创建一个空元素，通过对该元素特性测试来判定当前运行环境是否支持某种特性的运用。<code>jQuery</code> 也是以此来 support 各种环境，与其通过可被随意修改的 UA 测试环境倒不如直接创建元素测试来的准确。</p><p>我们可利用元素本身特性去做的事并不止于 <strong>特性测试</strong>。细心一点，你会发现一些元素独一无二的特性可以被巧妙利用来做一些工作。<br><a id="more"></a></p><h2 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h2><p>创建 <code>Option</code> 实例，传入要被转义的字符串。因为 <code>Option</code> 构造函数第一个参数为 <code>text</code>，所以任你传入任何 <code>html</code> 代码都会被转义为 <code>textNode</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Option(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>).innerHTML     <span class="comment">// "&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;"</span></div></pre></td></tr></table></figure><p>同理，给 <code>div</code> 的 <code>innerText</code> 赋值，再通过 <code>innerHTML</code> 取，也可以做到，只是看起来不如一行代码来的巧妙。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">div.innerText = <span class="string">'&lt;a&gt;&lt;/a&gt;'</span>;</div><div class="line"><span class="built_in">console</span>.log(div.innerHTML)      <span class="comment">// "&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;"</span></div></pre></td></tr></table></figure><h2 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h2><p><code>a</code> 标签天生支持这些 URL 属性，是不是像极了 NodeJS 中 URL 对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">a.href = <span class="string">'http://test.com:3000/a/b?k=1#dd'</span>;</div><div class="line"><span class="built_in">console</span>.log(a.protocol);    <span class="comment">// "http:"</span></div><div class="line"><span class="built_in">console</span>.log(a.host);        <span class="comment">// "test.com"</span></div><div class="line"><span class="built_in">console</span>.log(a.hostname)     <span class="comment">// "test.com"</span></div><div class="line"><span class="built_in">console</span>.log(a.port)         <span class="comment">// 3000</span></div><div class="line"><span class="built_in">console</span>.log(a.pathname)     <span class="comment">// "/a/b"</span></div><div class="line"><span class="built_in">console</span>.log(a.search)       <span class="comment">// "?k=1"</span></div><div class="line"><span class="built_in">console</span>.log(a.hash)         <span class="comment">// "#dd"</span></div></pre></td></tr></table></figure><h2 id="获取一串文字在浏览器中所占的宽度"><a href="#获取一串文字在浏览器中所占的宽度" class="headerlink" title="获取一串文字在浏览器中所占的宽度"></a>获取一串文字在浏览器中所占的宽度</h2><p>想知道宽度还不简单，扔到浏览器中跑一圈看看。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tester = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">tester.style.display = <span class="string">'inline-block'</span>;</div><div class="line">tester.innerHTML = <span class="string">'博客：imys.net'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(tester);</div><div class="line"><span class="built_in">console</span>.log(tester.offsetWidth)</div></pre></td></tr></table></figure><p><code>display</code> 属性一定要设置为 <code>inline-block</code>。因为 <code>div:display</code> 默认为 <code>block</code>，块级元素宽度默认等于父级元素宽度，这样获取到的宽度就不是字符的宽度了。</p><p>当你想用 js 去截断一段长文字时，可以使用这个例子。</p><h2 id="判断canvas是否为空"><a href="#判断canvas是否为空" class="headerlink" title="判断canvas是否为空"></a>判断canvas是否为空</h2><p>两个等宽等高内容相同的 canvas 所生成的 <code>dataURL</code> 是相同的，这样最终把对象的比较转换为字符串的比较。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCanvasBlank</span>(<span class="params">canvas</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> blank = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">    blank.width = canvas.width;</div><div class="line">    blank.height = canvas.height;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> canvas.toDataURL() === blank.toDataURL();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="获取Computed-styles"><a href="#获取Computed-styles" class="headerlink" title="获取Computed styles"></a>获取Computed styles</h2><p>这里的 <code>Computed styles</code> 不是指 <code>getComputedStyle(element)</code> 函数结果，而是像浏览器 Dev Tools 中 Styles 面板右侧的计算样式。是要获取最终被样式表影响的 css 属性，不包括标签默认属性和 <code>user agent stylesheet</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterInheritedStyles</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tester = <span class="built_in">document</span>.createElement(el.tagName);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(tester);  <span class="comment">// 元素必须插入到文档中才能计算出默认样式</span></div><div class="line">    <span class="keyword">var</span> defaultStyle = <span class="built_in">window</span>.getComputedStyle(tester, <span class="literal">null</span>);</div><div class="line">    <span class="keyword">var</span> currentStyle = <span class="built_in">window</span>.getComputedStyle(el, <span class="literal">null</span>);</div><div class="line">    <span class="keyword">var</span> ret = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> currentStyle) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(currentStyle.getPropertyValue(k) !== defaultStyle.getPropertyValue(k)) &#123;</div><div class="line">        </div><div class="line">            ret[k] = currentStyle.getPropertyValue(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">document</span>.body.removeChild(tester);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建一个标签相同的 <code>Element</code> 添加到文档中产生默认样式，与当前元素样式逐个比较，返回不一致的样式属性。</p><p>不过这个函数还不是最终版的。当一个元素被插入到文档中时，由于没有添加 id 、 class 、style 属性，也就不会受 id 选择器、类选择器、行内样式影响，但显然会受标签选择器影响。</p><p>所以如果能在返回值基础上对标签选择器属性进行过滤，才是最终结果。但目前通过 <code>document.styleSheets</code> 只限于获取内联样式表中规则，对于外部样式表中的规则检索还没有什么好的办法。</p><hr><p>暂时只知道这么多。针对前端复杂的客户环境，单就 <strong>特性测试</strong> 而言已经可以帮我们解决很多问题了。</p>]]></content>
    
    <summary type="html">
    
      对元素特性巧妙利用的一些案例
    
    </summary>
    
    
      <category term="Html" scheme="http://imys.net/tags/Html/"/>
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="技巧" scheme="http://imys.net/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Element" scheme="http://imys.net/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>获取移动设备旋转方向的几个方案</title>
    <link href="http://imys.net/20160622/screen-rotation-case.html"/>
    <id>http://imys.net/20160622/screen-rotation-case.html</id>
    <published>2016-06-22T01:02:03.000Z</published>
    <updated>2017-08-20T13:57:23.790Z</updated>
    
    <content type="html"><![CDATA[<p>某些偏门的 API 真是没有需求一辈子都不知道啊。</p><p>分享一下最近对于获取移动设备旋转方向的探索。</p><h2 id="deviceorientation"><a href="#deviceorientation" class="headerlink" title="deviceorientation"></a>deviceorientation</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'deviceorientation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'absolute: '</span> + e.absolute)</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'alpha: '</span> + e.alpha)</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'beta: '</span> + e.beta)</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'gamma: '</span> + e.gamma)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>之前在 segmentfault 回答过相关问题，当时是从 MDN 翻出了这个事件。</p><p><a href="https://segmentfault.com/q/1010000005630022?share_user=1030000002791361" target="_blank" rel="external">原贴：h5 页面如何获取手机陀螺仪的参数</a></p><p>该事件在移动端兼容较好：Android Webview 4.3+、Chrome for Android 5.0、iOS 8.4+，据我测试微信也是支持的。<br>没有在低端机上测试过，可能该事件会依赖设备传感器，可以加个 <code>&#39;ondeviceorientation&#39; in window</code> 判断一下。</p><p>该事件触发频率高，适合对设备旋转精度要求较高的场景或是 3d 场景等，比如上面问题中的平衡球。<br><a id="more"></a></p><h2 id="orientationchange"><a href="#orientationchange" class="headerlink" title="orientationchange"></a>orientationchange</h2><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/Events/orientationchange" target="_blank" rel="external">当设备的方向改变时，触发该事件。</a></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'angle: '</span> + screen.orientation.angle);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>该事件是基于 2d 平面角度触发，输出仅有 <code>0、90、270</code> 3个数值，可以用来知晓当前设备的手持方向。<br>至于为什么没有 360 这个角度，可能跟设备有关。我的手机怎么转都到不了 360 度，也就是竖屏时无法翻转。</p><p>触发这个事件需要设备开启屏幕旋转，或者叫屏幕锁定，不同的设备叫法不一样。</p><p>兼容性是个大问题，目前只发现手机上的 Chrome 可以使用，微信、iOS、以及一些双核国产浏览器都不兼容。</p><h2 id="screen-orientation"><a href="#screen-orientation" class="headerlink" title="screen.orientation"></a>screen.orientation</h2><p>通过上个事件让我发现了<code>screen.orientation</code>，在控制台输出后，发现它也有事件支持。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(screen.orientation)  <span class="comment">// &#123;angle: 0, type: "landscape-primary", onchange: null&#125;</span></div><div class="line"></div><div class="line">screen.orientation.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'angle: '</span> + screen.orientation.angle);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过对该对象输出，发现也可以使用 screen.orientation.type 判断设备方向。</p><ul><li>landscape-primary | landscape-secondary：横屏；</li><li>portrait-primary | portrait-secondary: 竖屏；</li><li>primary 表示向上或向右，secondary 表示向左或向下。</li></ul><p>之后测试该事件，手机 Chrome 和国产双核浏览器通过，生产环境下使用还不够理想。</p><h2 id="window-onresize"><a href="#window-onresize" class="headerlink" title="window.onresize"></a>window.onresize</h2><p>完全是灵机一动想到的，设备旋转会使屏幕宽高置换，自然就会触发 resize 事件。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'innerWidth: '</span> + <span class="keyword">this</span>.innerWidth + <span class="string">' innerHeight: '</span> + <span class="keyword">this</span>.innerHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过屏幕宽高比较来判断横屏还是竖屏，设备兼容度毋容置疑。</p><h2 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h2><p>最后就是 css3 媒体查询了。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (orientation: portrait)&#123;</div><div class="line">    <span class="comment">/* 横屏 */</span></div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (orientation: landscape)&#123;</div><div class="line">    <span class="comment">/* 竖屏 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果仅仅是为了针对屏幕方向添加样式的话，使用媒体查询是最佳方案了。</p><p>移动端使用也没有兼容问题，媒体查询从 IE9 就开始支持了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><a href="/demo/screenRotation.html">Demo</a></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/1466565951.png" alt="测试Demo"></div><div class="image-caption">测试Demo</div></figure>]]></content>
    
    <summary type="html">
    
      移动设备旋转方向, 移动端屏幕旋转方向
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="Mobile" scheme="http://imys.net/tags/Mobile/"/>
    
      <category term="deviceorientation" scheme="http://imys.net/tags/deviceorientation/"/>
    
      <category term="orientation" scheme="http://imys.net/tags/orientation/"/>
    
  </entry>
  
  <entry>
    <title>javascript高阶函数介绍</title>
    <link href="http://imys.net/20160530/javascript-advanced-functions.html"/>
    <id>http://imys.net/20160530/javascript-advanced-functions.html</id>
    <published>2016-05-30T15:02:08.000Z</published>
    <updated>2016-11-12T19:20:15.899Z</updated>
    
    <content type="html"><![CDATA[<p>javascript 语言的特色之一便是函数即对象，因此便满足了高级函数的条件。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>在《javascript设计模式和开发实践》中是这样定义的。</p><ul><li>函数可以作为参数被传递；</li><li>函数可以作为返回值输出。</li></ul><p>实际上我们日常开发中会经常用到高阶函数。</p><p>接下来通过几个经典的应用案例，带你认知<code>高阶函数</code>。<br><a id="more"></a></p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>提起回调，经典的应用莫过于 Ajax 异步请求。</p><p>以 jQuery 为例。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">    $.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        callback(data);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于网络请求时间的不固定性，我们不能确定请求完成的具体时间，那么解决的办法就是传递一个处理函数作为参数到请求数据的方法中，请求完成后执行回调函数。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP（面向切面编程）是著名的<code>Java Spring</code>框架中的核心概念之一。通过此编程模式可以在保持主逻辑代码不变的前提下，进行额外的功能拓展。</p><p>在 Java 中使用 AOP 往往要通过一些高级特性来实现，而 javascript 就简单多了。</p><p>比如测试一个函数的执行效率。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> service = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'功能逻辑...'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> test = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> time_start;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">before</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            time_start = (+<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'计时开始...'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">after</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> end = (+<span class="keyword">new</span> <span class="built_in">Date</span>()) - time_start;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'计时结束，用时：'</span> + end);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> aop = <span class="function"><span class="keyword">function</span>(<span class="params">fn, proxy</span>)</span>&#123;</div><div class="line">    proxy.before &amp;&amp; proxy.before();</div><div class="line">    fn();</div><div class="line">    proxy.after &amp;&amp; proxy.after();</div><div class="line">&#125;</div><div class="line"></div><div class="line">aop(service, test);</div><div class="line"><span class="comment">//   计时开始...</span></div><div class="line"><span class="comment">//   功能逻辑...</span></div><div class="line"><span class="comment">//   计时结束：1</span></div></pre></td></tr></table></figure><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><blockquote><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p></blockquote><p>这概念着实让我琢磨了半天，转换成代码大概是这样的。</p><pre><code>fn(1, 2, 3, 4)  -&gt;  fn(1)(2)(3)(4)()
</code></pre><p>假设这个函数是用于求和，那么就是把本来接收多个参数一次性求和的函数改成了接收单一参数逐个求和的函数。这样是不是容易理解了。</p><p>来实现一个柯里化求和函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = [];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(!!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">            [].push.apply(args, <span class="built_in">arguments</span>);</div><div class="line">            <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</div><div class="line">            ret += <span class="built_in">arguments</span>[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> newSum = currying(sum);</div><div class="line"></div><div class="line">newSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)()  <span class="comment">// 10</span></div></pre></td></tr></table></figure><p>看起来挺巧妙，但是这种案例明摆着就像不从实际出发的面试题。那再看下一个例子。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> find = <span class="function"><span class="keyword">function</span>(<span class="params">arr, el</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.indexOf(el) !== <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一个简单的函数用于查询数组中是否某个值，每次使用都需要这样调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">find(arr, <span class="number">1</span>);</div><div class="line"></div><div class="line">find(arr, <span class="number">2</span>);</div></pre></td></tr></table></figure><p>既然 arr 是个固定参数，那么我们可以先保存一个接收过 arr 的函数，再用这个函数去处理变化的参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> newFind = currying(find)(arr);</div><div class="line"></div><div class="line">newFind(<span class="number">1</span>);</div><div class="line">newFind(<span class="number">2</span>);</div></pre></td></tr></table></figure><h3 id="反柯里化"><a href="#反柯里化" class="headerlink" title="反柯里化"></a>反柯里化</h3><p>与柯里化相对应。</p><ul><li>柯里化是为了缩小适用范围，创建一个针对性更强的函数；</li><li>反柯里化则是扩大适用范围，创建一个应用范围更广的函数。</li></ul><p>对应的代码转换就变成这样。</p><pre><code>fn(1)(2)(3)(4)  -&gt;  fn(1, 2, 3, 4)
</code></pre><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Array</span>.forEach = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> fn = [].pop.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ? <span class="built_in">arguments</span> : <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> [].forEach.call(arr, fn);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.forEach(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);     <span class="comment">// 1 2 3</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.forEach(<span class="string">'123'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);     <span class="comment">// 1 2 3</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.forEach(&#123;</div><div class="line">    <span class="string">'0'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'1'</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">'2'</span>: <span class="number">3</span>,</div><div class="line">    <span class="string">'length'</span>: <span class="number">3</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);     <span class="comment">// 1 2 3</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>类数组借用 Array 原型函数，是很常见的应用了。这个例子应用 call 函数提取出一个新的函数，可以接收更多的参数和类型，适用性更广。</p><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>函数节流也不算很厉害的技巧了，平常写代码严谨的人应该都有此类应用的经历。</p><p>比如页面滚动加载数据的场景。</p><p>当页面滚动到底部时，会触发 Ajax 去请求数据；当页面滚动频繁时，就可能出现上个请求还未结束又开始了一个新的请求。<br>这个时候就需要用函数节流了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getData = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> onAjax = <span class="literal">false</span>;     <span class="comment">// 是否开始 ajax</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!onAjax) &#123;</div><div class="line"></div><div class="line">            onAjax = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            $.get(<span class="string">'/xxx'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                callback(data);</div><div class="line">                onAjax = <span class="literal">false</span>;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(滚动到底部) &#123;</div><div class="line">        getData(render);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="分时函数"><a href="#分时函数" class="headerlink" title="分时函数"></a>分时函数</h3><p>与函数节流一样，分时函数也是用来解决函数频繁执行带来的性能问题。<br>不同的是，函数节流场景为被动调用，分时函数为主动调用。</p><p>就算一个列表展示页面没有使用分页组件，也会像上个例子那样触发式分组渲染。而如果真的遇到需要一次性把所有数据渲染到列表时，大量的 DOM 创建会对浏览器造成极大开销，或卡顿、或假死等。</p><ul><li>该处理是否必须同步完成？</li><li>数据是否必须按顺序完成？</li></ul><p>如果以上两个问题都为“否”的话，为何不尝试分割这个处理过程。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//  arr: 源数据</span></div><div class="line"><span class="comment">//  process: 处理函数</span></div><div class="line"><span class="comment">//  count: 每次抽取个数</span></div><div class="line"><span class="keyword">var</span> chunk = <span class="function"><span class="keyword">function</span>(<span class="params">arr, process, count</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(count, arr.length); i++) &#123;</div><div class="line">            process(arr.shift());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arr.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建一个队列，使用定时器取出下一批要处理的项目进行处理，接着在设置另一个定时器。</p><blockquote><p>一旦某个函数需要花 50ms 以上的时间完成，那么最好看看能否将任务分割为一系列可以使用定时器的小任务。</p></blockquote><h3 id="惰性加载"><a href="#惰性加载" class="headerlink" title="惰性加载"></a>惰性加载</h3><p>当你逛网店发现了心怡的商品时，是立刻收藏或加购物车，还是等到买的时候再搜索相关商品一个一个的找到它？</p><p>浏览器特征检测是前端开发中必不可少的，比如返回顶部，我们需要区分火狐和其他浏览器来决定 scrollTop 应当设置给谁。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 新手</span></div><div class="line"><span class="keyword">var</span> gotop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/firefox/i</span>.test(navigator.userAgent)) &#123;</div><div class="line">        <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 老司机</span></div><div class="line"><span class="keyword">var</span> gotop = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> isFF = <span class="regexp">/firefox/i</span>.test(navigator.userAgent);</div><div class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>[ isFF ? <span class="string">'documentElement'</span> : <span class="string">'body'</span> ];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        docEl.scrollTop = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>浏览器的特征是保持不变的，既然如此为什么不一开始就保存下来呢。</p><p>与此同理，日常编程中要注意缓存那些经常使用、改变较少或不做改变的内容。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript设计模式与开发实践》</a></li><li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》 第三版</a></li><li><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html" target="_blank" rel="external">JS函数式编程指南 - 柯里化</a></li><li>《编写高质量代码：改善JavaScript程序的188个建议》</li></ul>]]></content>
    
    <summary type="html">
    
      javascript高阶函数介绍
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="Function" scheme="http://imys.net/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加站内搜索功能初步完成</title>
    <link href="http://imys.net/20160511/hexo-search.html"/>
    <id>http://imys.net/20160511/hexo-search.html</id>
    <published>2016-05-11T08:08:50.000Z</published>
    <updated>2017-08-20T13:57:23.790Z</updated>
    
    <content type="html"><![CDATA[<p>不止一次有同学在 <a href="https://github.com/yscoder/hexo-theme-indigo/issues" target="_blank" rel="external">Issues</a>、邮件等渠道中向我反馈<strong>增加站内搜索功能</strong>。本来准备什么时候搞个 2.0 版的主题再加上这些新功能，可一直没什么太好的想法，反正也是折腾，就把搜索功能做了一下。</p><h2 id="搜索方案"><a href="#搜索方案" class="headerlink" title="搜索方案"></a>搜索方案</h2><p>针对无数据库的静态博客搜索方案一般有两种：</p><ol><li>第三方搜索服务；</li><li>序列化站点内容作为数据源，然后自己写查询方法。<a id="more"></a></li></ol><h2 id="第三方搜索服务"><a href="#第三方搜索服务" class="headerlink" title="第三方搜索服务"></a>第三方搜索服务</h2><h3 id="基于搜索引擎的"><a href="#基于搜索引擎的" class="headerlink" title="基于搜索引擎的"></a>基于搜索引擎的</h3><p>包括 Google 和百度提供的站内搜索，比如 Hexo 文档中的辅助函数 <a href="https://hexo.io/zh-cn/docs/helpers.html#search-form" target="_blank" rel="external">search-form</a> 就提供了一个 Google 搜索框。搜索结果取决于该搜索引擎对你站点的收录情况。</p><p>抛开其他原因来讲，没有颜值的搜索服务我是不会考虑的。</p><p>接着我实验了一下在 Hexo 中有用户基础的 <strong>Swiftype</strong> 和 Hexo 官网使用的 <strong>Algolia</strong>。</p><h3 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h3><p><a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a> 安装很简单，关于其在 Hexo 中使用的文章介绍也很多，我只说下使用体验。</p><p>配合我自定义的搜索框样式，外观展现还算过关。</p><p>可以对色调进行修改，由于是在单页面展示搜索结果，就算不提供外观修改也可以自己重写 css ，类似多说。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-colors.jpg" alt="Swiftype-colors"></div><div class="image-caption">Swiftype-colors</div></figure><p>搜索结果的展示可以自定义，包括内容布局、字段排列、分页等。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-results.jpg" alt="Swiftype-results"></div><div class="image-caption">Swiftype-results</div></figure><p>搜索结果容器可完全自定义，可设置单页或新页面显示搜索结果，对外观的控制力更强。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-container.jpg" alt="Swiftype-container"></div><div class="image-caption">Swiftype-container</div></figure><p>可以设置字段权重，比如优先展示文章标题的匹配结果。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-sort.jpg" alt="Swiftype-sort"></div><div class="image-caption">Swiftype-sort</div></figure><p>可以单独为某个关键字搜索结果进行管理，比如排序、置顶、删除等等，话说某度推广不就是这样吗。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-rank.jpg" alt="Swiftype-rank"></div><div class="image-caption">Swiftype-rank</div></figure><p>可以设置抓取规则，比如只抓取文章页。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-rules.jpg" alt="Swiftype-rules"></div><div class="image-caption">Swiftype-rules</div></figure><p>默认的字段匹配不满意，下图是对<code>hexo</code>的搜索结果。Swiftype 的<code>body</code>字段默认抓取整个页面，我每个页面的左侧 footer 都有<code>hexo</code>这个单词，在我设置了只抓取文章页后，博客一共 46 篇文章也就匹配了 46 个结果。我期望它只对文章内容检索，这样更精准。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/Swiftype-show.jpg" alt="Swiftype-show"></div><div class="image-caption">Swiftype-show</div></figure><p>如果能自定义抓取字段，指定抓取内容当然是极好的。Swiftype 文档中也提供了这方面内容，<a href="https://swiftype.com/documentation/crawler_quick_start" target="_blank" rel="external">Crawler</a>。</p><p>大概看了一下，感觉 <strong>Content Inclusion/Exclusion</strong> 和 <strong>Meta Tags</strong> 方式应该能满足需求。我也尝试了一下，发现没效果，不知道是不是要重新抓取才生效。</p><p>设置重新抓取后等了 1 个小时还没什么效果，我只好先进行下一步了。</p><h3 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h3><p><a href="https://www.algolia.com/" target="_blank" rel="external">Algolia</a> 我只注册了账户，然后就没有然后了。。。因为我准备使用方案2了。</p><p>从 Algolia 管理界面和文档上来看不会比 Swiftype 差，可留作备选。</p><h2 id="自定义搜索"><a href="#自定义搜索" class="headerlink" title="自定义搜索"></a>自定义搜索</h2><p>没有数据库的前提下实现查询，也可以使用数据文件做数据源。Hexo 中也有这方面的先驱者，在 <a href="https://hexo.io/plugins/" target="_blank" rel="external">Hexo-Plugins</a> 页可以找到生成数据文件的两个插件，<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a> 和 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a>。</p><p>hexo-generator-json-content 生成的数据文件为<code>json</code>格式。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">meta: &#123;</div><div class="line">    <span class="attr">title</span>: hexo.config.title,</div><div class="line">    <span class="attr">subtitle</span>: hexo.config.subtitle,</div><div class="line">    <span class="attr">description</span>: hexo.config.description,</div><div class="line">    <span class="attr">author</span>: hexo.config.author,</div><div class="line">    <span class="attr">url</span>: hexo.config.url</div><div class="line">&#125;,</div><div class="line"><span class="attr">pages</span>: [&#123; <span class="comment">//-&gt; all pages</span></div><div class="line">  title: page.title,</div><div class="line">  <span class="attr">slug</span>: page.slug,</div><div class="line">  <span class="attr">date</span>: page.date,</div><div class="line">  <span class="attr">updated</span>: page.updated,</div><div class="line">  <span class="attr">comments</span>: page.comments,</div><div class="line">  <span class="attr">permalink</span>: page.permalink,</div><div class="line">  <span class="attr">path</span>: page.path,</div><div class="line">  <span class="attr">excerpt</span>: page.excerpt, <span class="comment">//-&gt; only text ;)</span></div><div class="line">  keywords: <span class="literal">null</span> <span class="comment">//-&gt; it needs settings</span></div><div class="line">  text: page.content, <span class="comment">//-&gt; only text minified ;)</span></div><div class="line">  raw: page.raw, <span class="comment">//-&gt; original MD content</span></div><div class="line">  content: page.content <span class="comment">//-&gt; final HTML content</span></div><div class="line">&#125;],</div><div class="line"><span class="attr">posts</span>: [&#123; <span class="comment">//-&gt; only published posts</span></div><div class="line">  title: post.title,</div><div class="line">  <span class="attr">slug</span>: post.slug,</div><div class="line">  <span class="attr">date</span>: post.date,</div><div class="line">  <span class="attr">updated</span>: post.updated,</div><div class="line">  <span class="attr">comments</span>: post.comments,</div><div class="line">  <span class="attr">permalink</span>: post.permalink,</div><div class="line">  <span class="attr">path</span>: post.path,</div><div class="line">  <span class="attr">excerpt</span>: post.excerpt, <span class="comment">//-&gt; only text ;)</span></div><div class="line">  keywords: <span class="literal">null</span> <span class="comment">//-&gt; it needs settings</span></div><div class="line">  text: post.content, <span class="comment">//-&gt; only text minified ;)</span></div><div class="line">  raw: post.raw, <span class="comment">//-&gt; original MD content</span></div><div class="line">  content: post.content, <span class="comment">//-&gt; final HTML content</span></div><div class="line">  categories: [&#123;</div><div class="line">    <span class="attr">name</span>: category.name,</div><div class="line">    <span class="attr">slug</span>: category.slug,</div><div class="line">    <span class="attr">permalink</span>: category.permalink</div><div class="line">  &#125;],</div><div class="line">  <span class="attr">tags</span>: [&#123;</div><div class="line">    <span class="attr">name</span>: tag.name,</div><div class="line">    <span class="attr">slug</span>: tag.slug,</div><div class="line">    <span class="attr">permalink</span>: tag.permalink</div><div class="line">  &#125;]</div><div class="line">&#125;]</div></pre></td></tr></table></figure><p>hexo-generator-search 生成的数据文件为<code>xml</code>格式。</p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">search</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Post title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://yourposturl.html<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">"html"</span>&gt;</span>helloworldhelloworldhelloworldhelloworldhelloworldhelloworld<span class="tag">&lt;/<span class="name">content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Post title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://yourposturl.html<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">"html"</span>&gt;</span>helloworldhelloworldhelloworldhelloworldhelloworldhelloworld<span class="tag">&lt;/<span class="name">content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">search</span>&gt;</span></div></pre></td></tr></table></figure><p>对于 js 语言来说还是解析 json 更方便，如果需要用<code>xml</code>做数据文件我完全可以使用已有的<a href="/atom.xml">atom.xml</a>。</p><p><a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a> 生成的<code>json</code>数据内容挺全的，不过并不是我都需要的。可以通过添加站点配置设置你需要生成的字段。</p><p><code>meta</code>是站点信息，<code>pages</code>是除文章页以外的页面信息，这都是我不需要的，我只要求搜索文章页。</p><p>此外，文章页的字段也可以根据需求减少，以减小数据文件大小。下图可以直观看出每个字段表示的内容。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/hexo-generator-json-content.jpg" alt="hexo-generator-json-content"></div><div class="image-caption">hexo-generator-json-content</div></figure><ul><li><code>slug</code>、<code>comments</code>、<code>link</code>、<code>keywords</code>、<code>categories</code>都是无内容或不需要的字段；</li><li><code>date</code>和<code>updated</code>、<code>path</code>和<code>permalink</code>留其一即可；</li><li><code>excerpt</code>可以不要，因为我们要检索文章全文；</li><li><code>raw</code>是<code>markdown</code>元数据，<code>content</code>是包含<code>html</code>标签的文章内容，处理起来最方便的是<code>text</code>纯文本。</li></ul><p>最后的配置如下，需要放到<code>hexo/_config.yml</code>中。</p><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  pages:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>接着就是实现查询方法并把结果渲染到页面。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// xhr加载数据</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// 略...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 匹配文章内容返回结果</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">matcher</span>(<span class="params">post, regExp</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 匹配优先级：title &gt; tags &gt; text</span></div><div class="line">    <span class="keyword">return</span> regExp.test(post.title) || post.tags.some(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> regExp.test(tag.name);</div><div class="line">    &#125;) || regExp.test(post.text);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 渲染到页面</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">// 略...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 查询</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="comment">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></div><div class="line">    <span class="comment">// a b c =&gt; /a|b|c/gmi</span></div><div class="line">    <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key.replace(<span class="regexp">/[ ]/g</span>, <span class="string">'|'</span>), <span class="string">'gmi'</span>);</div><div class="line"></div><div class="line">    loadData(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> result = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> matcher(post, regExp);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        render(result);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>正则加上<code>filter</code>、<code>some</code>两个数组过滤函数，就这么简单。也没想做太复杂，否则匹配结果高亮、匹配片段截取又够折腾半天。</p><p>完成后就是现在博客的搜索了，PC 端浮动面板显示，Mobile 端全屏显示。</p>]]></content>
    
    <summary type="html">
    
      Hexo search, Hexo文章搜索, Hexo站内搜索
    
    </summary>
    
    
      <category term="Hexo" scheme="http://imys.net/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的数据交互</title>
    <link href="http://imys.net/20160503/vue-data-interaction.html"/>
    <id>http://imys.net/20160503/vue-data-interaction.html</id>
    <published>2016-05-03T09:39:44.000Z</published>
    <updated>2016-11-12T19:31:18.042Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 中通常以一个 Vue 实例来表示一个应用，一个应用由若干个组件拼装而成。<br>没错，就像“装机”一样。当你把主板、CPU、显卡、内存、散热器、SSD、电源等摆放到机箱的各个位置后，很明显产生了一个明确的需求：我怎么让这些东西协同工作？<br>回到 Vue 中，处理不同组件之间的数据或状态是一件经常遇到的事。<br><a id="more"></a></p><p>好在 <a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">Vue的文档</a> 足够详细。关于组件交互的部分，如果没有实际需求，我表示难以明白<code>props</code>以及自定义事件等使用场景是什么。</p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p><code>props</code>是定义在子组件中的属性，用来定义期望从父组件传下来的数据。</p><p>从实际场景着手，写一个简单的需求。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;helloWorld&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><p>当父组件中输入内容时显示到子组件中。</p><p>这时，我需要在子组件中声明一个 props 属性来接收父组件中输入的内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 子组件</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">props</span>: &#123;</div><div class="line">        <span class="attr">helloWorld</span>: <span class="built_in">String</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 父组件</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="attr">child</span>: <span class="built_in">require</span>(<span class="string">'child'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>还需要告诉子组件，它的 props 对应父组件中的哪个数据。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在子组件上标记 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:hello-world</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>camelCase 格式属性用作 HTML 特性时需要转换成 kebab-case 格式。</p></blockquote><p>当前需求轻松的解决了！</p><p>有没有发现 props 好像是单向的，父 -&gt; 子？</p><p>不，并不是。只是默认是单向的。可以通过添加额外的修饰符来显示强制双向或单词绑定。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 双向绑定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:hello-world.sync</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 单次绑定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:hello-world.once</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div></pre></td></tr></table></figure><p>而正像 Vue 文档中所说的，默认单向绑定是<strong>为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</strong></p><p>举个例子，如果当前子组件设置为双向绑定，另有其他的子组件依赖父组件的<code>helloWorld</code>属性。这种关系下如果子组件修改了数据，势必引起其他子组件的状态改变。某些场景下我们并不希望发生这种情况。</p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>使用自定义事件也可以实现父子组件之间的通信，通过事件触发的形式来传递数据。</p><ul><li>使用<code>$on()</code>监听事件；</li><li>使用<code>$emit()</code>在它上面触发事件；</li><li>使用<code>$dispatch()</code>派发事件，事件沿着父链冒泡；</li><li>使用<code>$broadcast()</code>广播事件，事件向下传导给所有的后代。</li></ul><p>现在变更需求，把输入框拿出来作为子组件B。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 子组件B模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child-b</span>&gt;</span><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><p>当子组件B内容变化时，我应当通知父组件：头儿，我的工作完成了。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> @<span class="attr">change</span>=<span class="string">"onInput"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">text</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">onInput</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.text.trim()) &#123;</div><div class="line">                <span class="keyword">this</span>.$dispatch(<span class="string">'child-next'</span>, <span class="keyword">this</span>.text);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>父组件收到通知后，广播给其他需要的子组件：B已经完成XXX了，剩下的东西交给你了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="attr">child</span>: <span class="built_in">require</span>(<span class="string">'child'</span>),</div><div class="line">        <span class="string">'child-b'</span>: <span class="built_in">require</span>(<span class="string">'childB'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">events</span>: &#123;</div><div class="line">        <span class="string">'child-next'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.$broadcast(<span class="string">'child-finish'</span>, text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>或者为了能从父组件中直观的看出事件来源，可以使用显示声明绑定事件。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child-b</span> @<span class="attr">child-next</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-b</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        <span class="attr">child</span>: <span class="built_in">require</span>(<span class="string">'child'</span>),</div><div class="line">        <span class="string">'child-b'</span>: <span class="built_in">require</span>(<span class="string">'childB'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">handle</span>: <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.$broadcast(<span class="string">'child-finish'</span>, text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>接收广播的子组件，需要添加对应的处理事件。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;helloWorld&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">helloWorld</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">events</span>: &#123;</div><div class="line">        <span class="string">'child-finish'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.helloWorld = text;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>与 props 方式相比，自定义事件的方式各个组件的数据独立，不会被父或子组件轻易修改。因为我们能控制在何时进行事件派发和广播。</p><p>当然这两种方式并不冲突，可以结合使用来创造最佳实践。</p><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>最后就是使用大杀器 <a href="http://vuejs.github.io/vuex/" target="_blank" rel="external">Vuex</a> 了。</p><p>不管是<code>props</code>还是<code>自定义事件</code>，如果数据要由子组件到另一个子组件中，都要进行父组件的中转。随着项目的逐步增大，数据流也会变得复杂，难以管理和发现问题。</p><p>而 Vuex 就是独立的一个数据管理层。你需要把组件的本地状态和应用状态区分开来，把应用状态交由 Vuex 来管理，方便每一个组件去交换数据更新状态。</p><p><a href="http://vuejs.github.io/vuex/zh-cn/tutorial.html" target="_blank" rel="external">这是一个简单的例子</a></p>]]></content>
    
    <summary type="html">
    
      vue组件数据交互, vue路由数据交互, vuex
    
    </summary>
    
    
      <category term="Vue" scheme="http://imys.net/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://imys.net/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>一个HTML元素可以做什么？</title>
    <link href="http://imys.net/20160413/one-element-can-do-much.html"/>
    <id>http://imys.net/20160413/one-element-can-do-much.html</id>
    <published>2016-04-13T08:37:53.000Z</published>
    <updated>2016-11-12T19:24:25.424Z</updated>
    
    <content type="html"><![CDATA[<p>自 CSS3 问世以来，在广大开发者的智慧下诞生了很多创造性的设计，如：<a href="http://www.html5cn.org/article-8663-1.html" target="_blank" rel="external">18个你可能不相信是用CSS制作出来的东西</a>。个人平时也喜欢收藏这些有趣的东西，其中一些设计对单个 HTML 元素的极限利用，很值得我们去学习。</p><p>以下就来说一说这些神奇的<strong>黑科技</strong>。</p><a id="more"></a><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p>伪元素是比较常见的单元素利用了，<code>:before</code>与<code>:after</code>基本上支持普通元素的所有 CSS 属性，它使 1 个元素可以当作 3 个元素来使用。</p><p>比如制作一个单元素的菜单图标，三条线。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.icon-menu</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-menu</span>,</div><div class="line"><span class="selector-class">.icon-menu</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.icon-menu</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">height</span>: .<span class="number">25em</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-menu</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.icon-menu</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-menu</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">top</span>: .<span class="number">3125em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-menu</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">top</span>: .<span class="number">625em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在辅以圆角、CSS三角等，一些看起来复杂的图标也不是不能实现。<br>Github 早已有 css 图标的项目了：<a href="https://github.com/zzap/Cikonss" target="_blank" rel="external">Cikonss</a>。</p><p>实际场景中的应用不限于此，如：下拉菜单上的三角箭头、时间线上的圆点标记（在我的博客归档页就是此种）等。<br>当你需要添加一些无内容的修饰性元素时，你就该想到使用伪元素。但也不是说有内容的用伪元素无法实现，一些静态的展示内容也可以用，可以利用伪元素<code>content</code>属性。</p><p>比如一个带统计数量的<code>badge</code>，对应的 html 可以这样写。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-count</span>=<span class="string">"10"</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p>在 css 中利用伪元素展示自定义属性。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.badge</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-count);</div><div class="line">   <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我的博客 PC 端文章页右侧的分享所用的 tips 就是利用伪元素纯 css 实现的。</p><h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><p><code>border</code>实现 css 图形的案例已经屡见不鲜了，实际应用中常用的还是三角形。</p><p>既然提到了<code>border</code>，也应该顺带提下<code>outline</code>。两者都可以肆意的实现各种长短粗细的线条，一些特殊的场景中一条粗边框就可当作一个矩形来利用。还拿菜单图标来说，设置上下两个边框样式，outline 在画上一条，可以通过<code>outline-offset</code>来调整间距，是不是也能凑出一个图标呢。</p><p>除了使用<code>border</code>绘制多边形外，其实扇形、弧线也是可以很容易实现的。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 扇形 */</span></div><div class="line"><span class="selector-class">.sector</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">30px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">border-top-color</span>: transparent;</div><div class="line">    <span class="attribute">border-bottom-color</span>: transparent;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 弧线 */</span></div><div class="line"><span class="selector-class">.arc</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">border-top-color</span>: transparent;</div><div class="line">    <span class="attribute">border-bottom-color</span>: transparent;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体是什么效果，自测吧。</p><p>扇形、弧线可以轻易的制作一个 loading 效果：<a href="http://cssload.net/" target="_blank" rel="external">css实现的各种loading效果</a>。</p><h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><p><code>box-shadow</code>可以设置元素阴影效果，且可以设置多组值。但是我万万没有想到它居然强大如斯：<a href="http://codepen.io/HugoGiraudel/pen/gpcwa" target="_blank" rel="external">1个元素实现的像素画</a>。</p><p>先看下<code>box-shadow</code>的文档介绍压压惊。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-attr">[inset]</span> <span class="selector-tag">offset-x</span> <span class="selector-tag">offset-y</span> <span class="selector-attr">[blur]</span> <span class="selector-attr">[spread]</span> <span class="selector-attr">[color]</span>;</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">inset</td><td>可选，默认阴影在边框外。使用inset后，阴影在边框内（即使是透明边框），背景之上内容之下。</td></tr><tr><td style="text-align:center">offset-x/offset-y</td><td>必需，用来设置阴影偏移量。<code>offset-x</code>设置水平偏移量，如果是负值则阴影位于元素左边。<code>offset-y</code>设置垂直偏移量，如果是负值则阴影位于元素上面。如果两者都是 0，那么阴影位于元素后面。这时如果设置了<code>blur</code>或<code>spread</code>则有模糊效果。</td></tr><tr><td style="text-align:center">blur</td><td>可选，模糊距离。值越大，糊糊面积越大，阴影就越大越淡。 不能为负值。默认为 0，此时阴影边缘锐利。</td></tr><tr><td style="text-align:center">spread</td><td>可选，阴影的大小。取正值时，阴影扩大；取负值时，阴影收缩。默认为0，此时阴影与元素同样大。</td></tr><tr><td style="text-align:center">color</td><td>可选，阴影的颜色。</td></tr></tbody></table><p>平常使用中一般会设置 4 个值来实现阴影效果，即<code>offset-x</code>、<code>offset-y</code>、<code>blur</code>、<code>color</code>。从属性介绍中看当<code>blur</code>省略后，默认值为 0，边缘锋利，也就是小方块的效果。而通过设置每一组<code>offset-x</code>、<code>offset-y</code>的偏移值，加上不同的颜色设置，的确是实现像素画的绝妙之想。</p><p>当前博客的<a href="/404">404页面</a>就是用<code>box-shadow</code>堆叠出来的。</p><p>相关资源分享：</p><ul><li><a href="http://a.singlediv.com/" target="_blank" rel="external">singlediv</a></li><li><a href="https://css-tricks.com/examples/ShapesOfCSS/" target="_blank" rel="external">css图形</a></li><li><a href="http://yusugomori.com/projects/css-sans/fonts" target="_blank" rel="external">26个字母</a></li></ul><p>原来这个世界还有另外一种 css：<strong>别人手中的 css</strong>。</p>]]></content>
    
    <summary type="html">
    
      一个标签可以实现什么效果，一个标签可以做什么
    
    </summary>
    
    
      <category term="Html" scheme="http://imys.net/tags/Html/"/>
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://imys.net/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS实用Tips</title>
    <link href="http://imys.net/20160406/css-tips.html"/>
    <id>http://imys.net/20160406/css-tips.html</id>
    <published>2016-04-06T09:42:48.000Z</published>
    <updated>2016-11-12T19:11:43.514Z</updated>
    
    <content type="html"><![CDATA[<p>作为自己做前端开发以来的CSS爬坑总结，内容偏向PC端，不定期补充。<br>只作提示，不深谈。</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>1、区分<code>content-box</code>和<code>border-box</code>的尺寸计算。</p><p>2、行级元素无宽高，但可设内外边距。</p><p>3、外边距<code>margin</code>可设负值，内边距<code>padding</code>不可以。</p><p>4、当内外边距值为百分比时是相对于元素宽度计算的。</p><p>5、<code>border</code>是个好玩的东西，关键字：<strong>css三角形</strong>。</p><a id="more"></a><h2 id="定位与布局"><a href="#定位与布局" class="headerlink" title="定位与布局"></a>定位与布局</h2><p>1、添加了<code>position: absolute</code>与<code>float</code>样式后，元素会隐式改变<code>display</code>属性为<code>inline-block</code>，可以设置宽高属性，不需要再显示设置<code>display</code>。</p><p>2、清除浮动，一般有<code>clear: both/left/right</code>和<code>overflow: hidden</code>。首选<code>clear</code>，如果目标区块存在溢出元素时，会被<code>overflow: hidden</code>截断。</p><p>3、绝对定位的元素，在<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>属性未设置时，默认为<code>auto</code>，在文档流中紧跟前一个元素。这个特性通常可以实现一些神奇的效果。</p><p>4、尽量为每一个定位元素合理分配<code>z-index</code>，特别是<code>relative</code>元素。按级别一般为：主体内容 &lt; 下拉列表、日历等与主体紧密联系的内容 &lt; 浮动的头部或左右导航、工具栏等 &lt; 遮罩、模态窗口等。遵循这个规则能少踩很多坑。</p><p>5、绝对定位的元素可以溢出添加了<code>overflow: hidden</code>的父容器且不被截断；绝对定位的起始点是参照离其最近的祖先定位元素，一直到<code>body</code>。</p><p>6、隐藏元素一般用<code>display: none</code>、<code>visibility: hidden</code>，使用CSS3过渡和动画时首选<code>visibility</code>。因为<code>display</code>只有两个状态改变<code>none -&gt; block/inline-block/...</code>，没有值域的变化（我是这么理解的），<code>visibility</code>在底层实现中是有一个 0-1 的变化。</p><p>7、当IE&lt;=7时，遇到定位布局问题，你可能需要了解<code>haslayout</code>与<strong>层叠上下文</strong>。</p><p>8、在移动端开发中，使用<code>Flexbox</code>新旧语法混合是很好用的布局解决方案。</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>1、一些简单的交互效果就不需要用js去实现了，灵活使用选择器就可以搞定。如：鼠标悬浮于一个元素时显示某个子元素或兄弟元素、输入框具有焦点时显示输入提示、CSS模拟单复选框等。</p><p>2、jquery中有的选择器，基本上也能在CSS中使用或找到替代方案。</p><p>3、链接的伪类样式要按照<code>link</code>、<code>visited</code>、<code>hover</code>、<code>active</code>顺序设置，移动端用<code>active</code>代替<code>hover</code>。</p><p>4、除了首元素、末元素外，还有首行选择器<code>:first-line</code>和首字符选择器<code>:first-letter</code>。</p><p>5、使用子元素伪类选择器<code>:nth-child(n)</code>可以按照你的规则选取任意组合的子元素。</p><p>6、伪元素选择器<code>:before/:after</code>可以把一个元素当作三个元素使用，需注意某些元素不支持该选择器。其属性<code>content</code>为必设值，可以是字符串或使用<code>attr()</code>插入元素属性值、使用<code>url()</code>插入图像等。</p><h2 id="排版与修饰"><a href="#排版与修饰" class="headerlink" title="排版与修饰"></a>排版与修饰</h2><p>1、文本处理：大小写转换<code>text-transform</code>、文字截断<code>text-overflow</code>、改变文本流方向<code>direction</code>、书写方向<code>writing-mode</code>、换行处理<code>white-space</code>等。</p><p>2、当<code>font-weight</code>设为数值时，需要对应的字体有该数值字重支持，否则无效。<code>bold</code>等价于700数值。</p><p>3、垂直对齐<code>vertical-align</code>是个资深奇葩，各个浏览器解析均有差异。除了一些固有属性值外，还可以设数值、百分比。</p><p>4、你想设置2个边框吗？使用<code>outline</code>吧。</p><p>5、浏览器字体最小基准是12px。</p><p>6、设计图中的一些字体效果，可以尝试用<code>text-shadow</code>实现，减少图片应用。</p><p>7、使用CSS3时遵循渐进增强原则，对于不支持的浏览器保证布局无错乱、功能正常使用。</p>]]></content>
    
    <summary type="html">
    
      CSS实用Tips
    
    </summary>
    
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://imys.net/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>使用HTML5 history API增强移动端用户体验</title>
    <link href="http://imys.net/20160316/use-history-pushState.html"/>
    <id>http://imys.net/20160316/use-history-pushState.html</id>
    <published>2016-03-16T06:42:51.000Z</published>
    <updated>2016-11-12T19:30:03.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近做的一个图片浏览功能，请自行脑补手机图库、微博查看图片等场景。<br>功能做好之后，马上有同学反应：<strong>进入图片浏览层时，如果用户触摸手机后退按钮，整个页面都会返回，能否在触摸返回时只关闭浏览层？</strong></p><p>一般移动端会对 WebView 做一些默认的设置，比如 Hook 用户触摸后退按钮，调用 WebView 后退方法。既然如此，就可以利用这一点，通过操纵浏览记录使用户触摸后退关闭浏览层。</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>想要操纵浏览记录，就不得不提<code>history</code>对象了。通过常用的<code>back()</code>、<code>forward()</code>、<code>go()</code>方法就可以自由的控制浏览器跳转到任意一个历史记录。<br>而在 HTML5 中，history 又添加一些新的成员，允许你对浏览记录进行添加和修改却不会刷新页面，这就是解决问题的关键了。</p><ul><li><code>history.pushState(stateObj, title, url)</code> 用于创建新历史记录；</li><li><code>history.replaceState(stateObj, title, url)</code> 用于修改当前历史记录；</li><li><code>history.state</code> 读取当前状态，创建历史记录时会添加状态对象；</li><li><code>window.onpopstate</code> 是一个事件，当历史记录被修改时会触发。</li></ul><a id="more"></a><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>就把这个 div 看作一个图片浏览层吧，样式脑补。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.getElementById(id);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Demo.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Demo,</div><div class="line">    <span class="attr">show</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 处理显示的代码...</span></div><div class="line">        <span class="keyword">this</span>.el.classList.add(<span class="string">'in'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">hide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 处理隐藏的代码...</span></div><div class="line">        <span class="keyword">this</span>.el.classList.remove(<span class="string">'in'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">useState</span>: &#123;</div><div class="line">        <span class="attr">show</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">// 参数1是 Object 类型，可以被 history.state 读取</span></div><div class="line">            <span class="comment">// 参数2是标题，在一些浏览器中会被忽略，象征性的传空就可以了</span></div><div class="line">            <span class="comment">// 参数3是新记录的地址，会在末尾追加，如：http://test.com/demo</span></div><div class="line">            history.pushState(&#123; <span class="attr">page</span>: <span class="string">'demo'</span> &#125;, <span class="string">''</span>, <span class="string">'/demo'</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 调用真正的显示方法</span></div><div class="line">            <span class="keyword">this</span>.show();</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">hide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 返回上一条历史记录</span></div><div class="line">            history.back();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bindEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>,</div><div class="line">            handelShow = <span class="keyword">this</span>.show,</div><div class="line">            handelHide = <span class="keyword">this</span>.hide,</div><div class="line">            imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>),</div><div class="line">            <span class="comment">// 假设图片浏览层上有一个 .back 后退按钮</span></div><div class="line">            back = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'back'</span>)[<span class="number">0</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 加个判断避免兼容性问题</span></div><div class="line">        <span class="keyword">if</span>(history.pushState) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 如果可以使用 history API 就重新赋值 handelShow 和 handelHide</span></div><div class="line">            handleShow = <span class="keyword">this</span>.useState.show.bind(<span class="keyword">this</span>);</div><div class="line">            handleHide = <span class="keyword">this</span>.useState.hide.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">            <span class="comment">// history.state 变化时触发，假设初始 URL = http://test.com</span></div><div class="line">            <span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="comment">// 这里的 e.state 和 history.state 等价的</span></div><div class="line">                <span class="keyword">if</span>(!e.state) &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// 无状态时隐藏</span></div><div class="line">                    _this.hide();</div><div class="line">                    <span class="built_in">console</span>.log(<span class="built_in">document</span>.location);     <span class="comment">// http://test.com</span></div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(e.state.page === <span class="string">'demo'</span>) &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// 如果是自己定义的状态就显示</span></div><div class="line">                    _this.show();</div><div class="line">                    <span class="built_in">console</span>.log(<span class="built_in">document</span>.location);     <span class="comment">// http://test.com/demo</span></div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 给图片绑定事件</span></div><div class="line">        [].forEach.call(imgs, <span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</div><div class="line"></div><div class="line">            img.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                handelShow();</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 图片浏览层上的后退事件</span></div><div class="line">        back.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            handelHide();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="keyword">new</span> Demo(<span class="string">'container'</span>);</div></pre></td></tr></table></figure><p>执行<code>history.pushState()</code>时不会触发<code>window.onpopstate</code>，只有前进<code>forward()</code>、后退<code>back()</code>时才会触发，所以在之后还需要调用显示的方法。<br>对于不支持<code>history.pushState</code>的浏览器执行的还是原来的显示和隐藏方法，<code>handleShow</code>和<code>handleHide</code>在判断内才被重新赋值。<br>通过在<code>window.onpopstate</code>判断<code>history.state</code>来执行不同的操作，当然你也可以判断<code>location</code>。</p><p>以上代码未经测试，只作思路展示，注释说明了一切。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在 SPA 场景中，history 早已大显神通。与<code>history.state</code>相似的还有<code>location.hash</code>，也有其对应的事件<code>window.onhashchange</code>，一般用于处理 IE 低版本的兼容。<br>抛开本篇描述的功能需求，类似的场景也可以运用。比如左侧导航在原生APP都是可以通过触摸返回来关闭，在浏览器中也可以模拟这种操作体验。</p>]]></content>
    
    <summary type="html">
    
      使用HTML5 history API增强移动端用户体验
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="History" scheme="http://imys.net/tags/History/"/>
    
      <category term="用户体验" scheme="http://imys.net/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>阿里云搭建Git服务，实现Hexo自动部署</title>
    <link href="http://imys.net/20160303/hexo-nginx-auto-deploy.html"/>
    <id>http://imys.net/20160303/hexo-nginx-auto-deploy.html</id>
    <published>2016-03-03T08:33:19.000Z</published>
    <updated>2016-11-12T19:07:27.842Z</updated>
    
    <content type="html"><![CDATA[<p>使用 gitcafe pages 更新博客只需要敲几条命令，如果因为博客搬到了阿里云，却没有原来操作方便，那便得不偿失了。<br>所以就准备在服务器上建个 Git 远程仓库，用 Git Hooks 实现自动部署。</p><h2 id="Git-Hooks"><a href="#Git-Hooks" class="headerlink" title="Git Hooks"></a>Git Hooks</h2><p>Git Hooks 就是一些触发特定事件的脚本。比如 commit、push、merge 等等，也区分本地 Hooks 和服务端 Hooks。<br>我这次使用的是<code>post-receive</code>。</p><blockquote><p>当用户在本地仓库执行<code>git-push</code>命令时，服务器上远程仓库就会对应执行<code>git-receive-pack</code>命令，而<code>git-receive-pack</code>命令会调用<code>pre-receive</code>钩子。</p></blockquote><p>这需要在服务器上建立一个 Git 远程仓库，和一个用于获取更新（git pull）的本地仓库。</p><p>远程仓库：最原始的版本库，所有的本地仓库就可以克隆这个仓库。就像你在 Github 创建一个项目，这就是一个远程仓库。<br>本地仓库：这个就是平常的工作目录，容易理解。<br><a id="more"></a></p><p>总体的流程为：</p><ol><li>本地执行<code>git push</code>；</li><li>Git 服务器更新并 Hook；</li><li>执行<code>pre-receive</code>脚本，命令为：定位到服务器本地仓库目录，执行<code>git pull</code>。</li></ol><p>我的 git 已经安装了，Ubuntu 安装很简单：</p><pre><code>sudo apt-get install git
</code></pre><p>创建 git 用户，用来运行 git 服务：</p><pre><code>sudo adduser git
</code></pre><p>用 git 用户运行貌似是约定俗成的事，像 github 一个仓库的 URL 为<code>git@github.com:user/project.git</code>，@ 符号前面的 git 就是运行 git 服务的用户名。</p><p>初始化远程仓库：</p><p>我的目录名为<code>website</code>，仓库名为<code>blog</code>，以此为例。</p><pre><code>cd /website
sudo git init --bare blog.git
</code></pre><p>远程仓库名以<code>.git</code>结尾。还需要给 git 用户设置该目录的权限：</p><pre><code>sudo chown -R git:git blog.git
</code></pre><p>出于安全考虑，禁用 shell 登录：</p><pre><code>vi /etc/passwd
</code></pre><p>找到这一行：</p><pre><code>git:x:1002:1002:,,,:/home/git:/bin/bash
</code></pre><p>修改为：</p><pre><code>git:x:1002:1002:,,,:/home/git:/usr/bin/git-shell
</code></pre><p>可以使用<code>git-shell</code>，通过<code>ssh</code>使用 git，但无法使用 shell 登录。</p><p>创建证书登录，把本地公钥添加到<code>/home/git/.ssh/authorized_keys</code>。<br>不过默认的<code>id_rsa</code>公钥一般都被占用了，可以再建个其他名字，创建<code>.ssh/config</code>区分。</p><p>初始化服务器本地仓库：</p><p>我是在远程仓库旁边建立的。</p><pre><code>cd /website
git clone blog.git
</code></pre><p>因为是在同一台电脑上，所以克隆直接使用本地路径。这将会在<code>website</code>生成一个名为<code>blog</code>本地仓库。</p><pre><code>ls -la
</code></pre><p>可以看到当前路径下有一个<code>blog.git</code>目录和一个<code>blog</code>目录。</p><p>考虑到 git-hooks 运行使用的是 git 用户，也对服务器本地仓库授权：</p><pre><code>chown -R git:git blog
</code></pre><p>设置 hook 执行脚本：</p><pre><code>vi blog.git/hooks/post-receive
</code></pre><p>输入以下内容：</p><pre><code>#!/bin/sh
cd /website/blog
git pull origin master
</code></pre><p>很好理解，就是定位到服务器本地仓库然后拉取更新。</p><p>保存后赋予可执行权限：</p><pre><code>chmod +x blog.git/hooks/post-receive
</code></pre><p>现在可以在本地（你的电脑上）进行测试了。</p><p>找一个目录，进行版本库克隆：</p><pre><code>git clone git@server:/website/blog.git
</code></pre><p>server 是你的服务器域名或者IP。</p><p>因为仓库还没有内容，所以会显示：<code>You appear to have cloned an empty repository.</code> 你克隆了一个空仓库。</p><p>现在可以随便创建点东西，push 到远程仓库，然后到<code>/website/blog</code>目录下看看有没有变化。</p><p>我在操作的时候遇到一个错误：<strong>fatal: Not a git repository: ‘.’</strong></p><blockquote><p>因为 hook 脚本执行了 cd 之后，继续执行 git 语句拉取的时候还是在 hooks 文件夹下，而不是 cd 的文件路径。</p></blockquote><p>修改后的脚本如下：</p><pre><code>#!/bin/sh
unset GIT_DIR #还原环境变量
cd /website/blog
git pull origin master
</code></pre><p>现在已经实现本地到远程服务器的同步了，只差一个 Web 服务器了。</p><h2 id="Nginx安装配置"><a href="#Nginx安装配置" class="headerlink" title="Nginx安装配置"></a>Nginx安装配置</h2><p>目前我的博客在 gitcafe 上，在 URL 后面随便加点后缀进入 404 页面，可以清楚的看到 nginx/1.8.0 的字样。以后还要玩负载均衡，服务器肯定就选它了。</p><pre><code>sudo apt-get install nginx
</code></pre><p>看了很多文章，发现其中描述的 Nginx 的文件结构都不太一样，看来跟系统环境有关系。<br>我的目录结构如下，环境是阿里云 Ubuntu 14.04 ：</p><ul><li>所有的配置文件都在<code>/etc/nginx</code>下，并且每个虚拟主机已经安排在了<code>/etc/nginx/sites-available</code>下</li><li>启动程序文件在<code>/usr/sbin/nginx</code></li><li>日志放在了<code>/var/log/nginx</code>中，分别是<code>access.log</code>和<code>error.log</code></li><li>在<code>/etc/init.d/</code>下创建了启动脚本<code>nginx</code></li><li>默认的虚拟主机的目录设置在<code>/usr/share/nginx/html</code></li></ul><p>启动 Nginx ：</p><pre><code>sudo /etc/init.d/nginx start
</code></pre><p>默认的服务器配置是 80 端口，如果你没有其他的 Web Server 在运行，打开服务器域名或 IP 应该可以看到<strong>Welcome to nginx!</strong></p><p>现在定位到配置文件，修改配置：</p><pre><code>vi /etc/nginx/nginx.conf
</code></pre><p>找到<code>server { ... }</code>区域：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen      80;     #端口</div><div class="line">    server_name localhost yoursite.com;     #域名或IP</div><div class="line">    root        /website/blog;      #站点根目录</div><div class="line">    charset     utf-8;              #文件编码</div><div class="line">    index       index.html index.htm;    #首页</div><div class="line"></div><div class="line">    error_page  404     /404.html;   #404页面</div><div class="line">    error_page  500 502 503 504     /50x.html;   #服务端错误页面</div><div class="line"></div><div class="line">    #url访问匹配路径，可以添加多个</div><div class="line">    location / &#123;</div><div class="line">        index       index.html index.htm;</div><div class="line">        root        /website/blog;   #这里可以是绝对路径或者相对路径，基于站点根目录</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以用一条命令测试配置是否正确：</p><pre><code>nginx -t -c /etc/nginx/nginx.conf
</code></pre><p>重启 Nginx 服务器使配置生效：</p><pre><code>/etc/init.d/nginx restart
</code></pre><p>现在开始部署 Hexo。</p><h2 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h2><p>原来的 Hexo 使用的是 hexo-deployer-git 插件，会在 Hexo 下生成一个 .deploy_git 目录，从这个目录上传到 pages 分支。<br>现在我觉得不需要这个插件了，可以直接在 public 目录下初始化 git 仓库然后上传。</p><pre><code>cd hexo/public
git init
git add -A
git commit -m &apos;add myBlog&apos;
git remote add origin git@server:/website/blog.git
git push origin master
</code></pre><p>这时候打开站点，就可以看到博客了。</p><p>我的域名还没有备案，之前注册的域名有备案号，需要迁到阿里云。<br>好像审核期间需要关站，真是麻烦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="external">廖雪峰-搭建Git服务器</a></li><li><a href="http://icyleaf.com/2012/03/apps-auto-deploy-with-git/" target="_blank" rel="external">使用 Git Hooks 实现自动项目部署</a></li><li><a href="http://www.nginx.cn/doc/index.html" target="_blank" rel="external">Nginx中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      Hexo自动部署，阿里云Ubuntu安装配置Nginx
    
    </summary>
    
    
      <category term="Hexo" scheme="http://imys.net/tags/Hexo/"/>
    
      <category term="Nginx" scheme="http://imys.net/tags/Nginx/"/>
    
      <category term="Linux" scheme="http://imys.net/tags/Linux/"/>
    
      <category term="部署" scheme="http://imys.net/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Linux-Ubuntu折腾记</title>
    <link href="http://imys.net/20160220/start-linux-on-aliyun.html"/>
    <id>http://imys.net/20160220/start-linux-on-aliyun.html</id>
    <published>2016-02-20T08:25:34.000Z</published>
    <updated>2016-11-12T19:27:58.353Z</updated>
    
    <content type="html"><![CDATA[<p>观望阿里云很久了，终于在这个春节来了后，一咬牙、一狠心、一跺脚就买下了一台 ECS。不分昼夜的折腾了几天后，终于在几天前配置好了自己期望的使用环境。<br>由于本人初次接触 Linux，配置期间三度初始化磁盘（等价于手机恢复出厂设置），可以说是一步一个坑的走下来的。现趁热打铁对最后一次正确的安装配置做一下总结，给后人乘凉吧。</p><h2 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h2><p>作为开发者，选择 Linux 是毋庸置疑的。</p><p>CPU 单核2G，对于我目前来说绝对是够用了。我会用来做什么？当然是瞎折腾了！一台远程服务器就相当于你多了一台24小时不关机的电脑，可以挂点有趣的服务跑着，比如爬虫之类。或者当个代码仓库，用来项目演示。当然，博客也肯定会迁过去的。<br>带宽 2G，不知道带宽提升是不是会影响远程桌面速度。<br>对于 Linux 的诸多版本之间的优劣，我也不甚了解，就选了个耳濡目染较多的 Ubuntu，版本自然是选最新版的64位。<br>Linux 自带 20G 系统盘，另外我又加了一块 100G 云盘，感觉现在还用不了这么大空间。</p><p>以上配置一年的价格是 1200+，我选择的地域是青岛，比国内其他地域相对便宜点。另外付款的时候填写推荐码可以优惠 10%，这是我的推荐码：<strong>rg2j5m</strong>。当然你使用我的推荐码付款后我将得到一定的返比代金卷，可以用来购买阿里云的产品。<br><a id="more"></a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本文最终将会配置完成这样一个 Linux 使用环境：</p><ol><li>GNOME 中文图形界面；</li><li>Windows 远程桌面连接；</li><li>Nodejs 安装。</li></ol><h2 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h2><p>不管是从阿里云连接管理终端还是用的 Putty 等 SSH 连接工具，总之你现在应该已经打开一个黑窗口了。<br>开始第一步。</p><pre><code>sudo apt-get update
</code></pre><p><code>apt-get</code>是一个包管理工具，在 Ubuntu 环境下，会是你以后经常用到的命令之一，类似于 Nodejs 环境下的<code>npm</code>。<br>apt-get 命令一般需要 root 权限执行，所以一般跟着<code>sudo</code>命令。某些情况下，如果你的一个命令运行失败，可以加上<code>sudo</code>命令再尝试下，也许就神奇的成功了。</p><p>Linux 系统基本上分两大类：</p><ol><li>RedHat系列：Redhat、Centos、Fedora等，使用 <code>yum</code>；</li><li>Debian系列：Debian、Ubuntu等，使用 <code>apt-get</code>。</li></ol><p>apt-get 常用命令：</p><ul><li><code>update</code> 更新软件包列表</li><li><code>upgrade</code> 升级软件包</li><li><code>install pkg</code> 安装软件包</li><li><code>remove</code> 移除软件包</li></ul><p>参考：<a href="http://www.cnblogs.com/pswzone/archive/2012/04/09/2438885.html" target="_blank" rel="external">apt-get的更多使用</a></p><blockquote><p>在查找 Linux 相关资料时，尽量带上系统环境与版本，不同版本环境下出现问题的解决办法不一定适用。</p></blockquote><h2 id="GNOME-安装"><a href="#GNOME-安装" class="headerlink" title="GNOME 安装"></a>GNOME 安装</h2><p>安装 x-window 的基础：</p><pre><code>sudo apt-get install x-window-system-core
</code></pre><p>安装 GNOME 登录管理器：</p><pre><code>sudo apt-get install gdm
</code></pre><p>安装 Ubuntu 的桌面：</p><pre><code>sudo apt-get install ubuntu-desktop
</code></pre><p>安装 GNOME 基础软件：</p><pre><code>sudo apt-get install GNOME-core
</code></pre><p>OK！现在从阿里云连接管理终端登录的话，就可以看到 GNOME 漂亮的登录界面。<br>如果还是黑屏的话，执行<code>startX</code>命令。</p><blockquote><p>startX 即为启动 x-window 服务，适用于任何图形界面的启用。</p></blockquote><p>在 Ubuntu 环境下当然不止 GNOME 一种图形界面，常见的还有 KDE、XFCE 等，从第2个步骤开始对应命令如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install kdm 或 xdm</div><div class="line">sudo apt-get install Kubunut-desktop 或 Xubuntu-desktop</div></pre></td></tr></table></figure><p>我没有使用经验，不知道孰优孰劣，有兴趣，可自行尝试。<br>不过这三种桌面我倒是都安装过，之所以最后选择 GNOME 完全是撞上了，因为我三度初始化磁盘。对，是巧合！<br>从界面美观上看，我更倾向于最后的 GNOME。</p><h2 id="设置中文环境"><a href="#设置中文环境" class="headerlink" title="设置中文环境"></a>设置中文环境</h2><p>这个坑我爬了很久！</p><p>如果你的人品好，请使用最简单的界面设置方式来切换语言环境。</p><ol><li>System Settings -&gt; Language Support 进来会有一个弹出框自动安装语言更新，直接关掉</li><li>Install/Remove Languages… -&gt; Chinese Simplified 勾选 -&gt; Apply Changes</li><li>从上面列表里把汉语拉到第一位，如果可以的话（反正我是怎么都拉不上去）</li><li>选项卡 Text -&gt; 列表里选择汉语 -&gt; Apply System-Wide…</li><li>注销后登录就是汉语了</li></ol><p>而我是使用命令的方式强行设置的。上面的步骤最好先尝试下，我也不确定直接使用命令形式设置能否成功。</p><p>安装中文的支持</p><pre><code>sudo apt-get install language-selector language-env language-pack-zhv
</code></pre><p>使安装生效，配置区域，看到<code>zh_CN.UTF-8... up-to-date</code>就表示成功了</p><pre><code>dpkg-reconfigure locales 
</code></pre><p>将本地默认语言改为中文</p><pre><code>LC_ALL=zh_CN.UTF-8
</code></pre><p>配置系统环境</p><pre><code>sudo vi /var/lib/locales/supported.d/zh
</code></pre><p>加入以下配置参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">zh_CN.GB18030 GB18030</div><div class="line">zh_CN.GBK GBK</div><div class="line">zh_CN.GB2312 GB2312</div><div class="line">zh_CN.GB18031 GB18031</div><div class="line">zh_HK.BIG5 BIG5</div><div class="line">zh_TW.BIG5 BIG5</div></pre></td></tr></table></figure><p>生成locale（保存在/usr/lib/locale/中）：</p><pre><code>sudo locale-gen
</code></pre><p>编辑<code>vi /etc/profile</code>：</p><pre><code>export LC_ALL=&quot;zh_CN.GB18030&quot;
</code></pre><p>编辑<code>vi /etc/default/locale</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#LANG=&quot;zh_CN.UTF-8&quot;</div><div class="line">#LANGUAGE=&quot;zh_CN:zh&quot;</div><div class="line">LC_ALL=&quot;zh_CN.GB18030&quot;</div><div class="line">LANG=&quot;zh_CN.GB18030&quot;</div><div class="line">LANGUAGE=&quot;zh_CN.GB18030:zh_CN.GB2312:zh_CN&quot;</div><div class="line">SUPPORTED=&quot;zh_CN.GB18030:zh_CN:zh:en_US.UTF-8:en_US:en&quot;</div><div class="line">SYSFONT=&quot;lat0-sun16&quot;</div><div class="line">SYSFONTACM=&quot;8859-15&quot;</div></pre></td></tr></table></figure><p>添加个人系统变量，当 GNOME 启动后，会读取这个文件里面的设置：<code>vi ~/.profile</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export G_FILENAME_ENCODING=GB18030</div><div class="line">export G_BROKEN_FILENAMES=1</div></pre></td></tr></table></figure><p>注销重新登录或重启生效。</p><p>在以上的步骤中用到了<code>vi</code>命令，运行后可以在 shell 环境中编辑文件。著名的 VIM 编辑器就是在 VI 的基础上改进的。<br>以下这些操作可能让你很快上手 VI，比如对路径为<code>/a</code>文件进行编辑。</p><ol><li>执行<code>vi /a</code>打开文件，不存在则创建；</li><li>按键盘编辑功能键<code>insert</code>使文件进入输入模式，现在可对文件进行修改，像使用任意文本编辑器一样；</li><li>按<code>esc</code>退出输入模式，进入指令模式；</li><li>输入<code>:wq!</code>对修改的文件进行保存并退出；</li><li>如果文件没有进行修改，输入<code>:q</code>退出；如果要放弃修改，输入<code>:q!</code>退出。</li></ol><p>参考：<a href="http://www.cnblogs.com/88999660/articles/1581524.html" target="_blank" rel="external">Linux下vi命令大全</a></p><h2 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h2><p>阿里云的网页版连接管理终端在图形界面下非常卡，一定让你很不爽。<br>让我们开始有趣的部分吧！</p><p>安装 Xrdp：</p><pre><code>sudo apt-get install xrdp vnc4server xbase-clients
</code></pre><p>安装 dconf-editor：</p><pre><code>sudo apt-get install dconf-editor
</code></pre><p>运行 dconf-editor：</p><pre><code>dconf-editor
</code></pre><p>展开<code>org -&gt; GNOME -&gt; desktop -&gt; remote-access</code>；<br>只打开<code>enabled</code>和<code>notify-on-connect</code>，其他都关掉；<br>修改<code>vnc-password</code>，这是你的远程登录密码；<br>启动远程桌面连接：Windows 上，按<code>win + R</code>运行<code>mstsc</code>；<br>输入你的服务器 IP 和用户名连接；<br>登陆模式选<code>vnc-any</code>，IP和密码输入连接成功。</p><p>如果你依然觉得卡的话，可以对远程连接做以下配置。</p><ol><li>启动远程桌面连接 -&gt; 显示选项</li><li>显示 -&gt; 颜色可进行降级调整，还可以在显示设置调整远程桌面窗口大小</li><li>体验 -&gt; 进行连接和功能的降级调整</li></ol><p>这些调整需要结合服务器配置和网络条件进行合理的选择。</p><p>另外还有一种基于 XFCE 桌面环境的连接方式，这在我第一回合就尝试过，也是可行的。<br>参考：<a href="http://jingyan.baidu.com/article/8ebacdf0cdc64949f75cd555.html" target="_blank" rel="external">Windows 7远程桌面连接Ubuntu 14.04</a></p><h2 id="Nodejs-安装"><a href="#Nodejs-安装" class="headerlink" title="Nodejs 安装"></a>Nodejs 安装</h2><p>Nodejs 的安装有很多种，最简单的就是在服务器浏览器里面从 Nodejs 网站中选择对应版本下载，其次还可以下载源码编译以及从软件中心(apt-get)安装等。</p><p>我这里使用的是 NVM 安装，它是一个 Node 版本管理器。</p><p>安装 Git：</p><pre><code>sudo apt-get install git
</code></pre><p>安装 NVM：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd ~/安装路径</div><div class="line">git clone https://github.com/creationix/nvm.git</div></pre></td></tr></table></figure><p>设置 NVM 下载源为淘宝镜像：</p><pre><code>NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist nvm install 0.11.11
</code></pre><p>配置 NVVM 的相关环境变量，编辑<code>~/.bashrc</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source ~/git/nvm/nvm.sh</div><div class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist</div></pre></td></tr></table></figure><p>安装 Nodejs，<code>nvm install version</code>：</p><pre><code>nvm install v4.2.4
</code></pre><p>同时可以安装下<code>cnpm</code>，从淘宝镜像安装模块：</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><p>开始进行服务器连接测试，以下不是必须要做的。</p><p>安装 Express 生成器：</p><pre><code>cnpm install express-generator -g
</code></pre><p>生成测试应用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd ~/demo</div><div class="line">express test</div></pre></td></tr></table></figure><p>安装所有依赖包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd test</div><div class="line">cnpm install</div></pre></td></tr></table></figure><p>启动测试应用：</p><pre><code>npm start
</code></pre><p>从本地打开<code>http://服务器IP:3000</code>可以看到 <strong>Welcome to Express</strong>，就证明服务器连接成功。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li><a href="http://blog.csdn.net/sunnylgz/article/details/40779973" target="_blank" rel="external">Windows使用VNC viewer访问Ubuntu 14.04远程桌面的简单方法</a></li><li><a href="http://www.cnblogs.com/huangfenghit/archive/2011/05/08/2040201.html" target="_blank" rel="external">http://www.cnblogs.com/huangfenghit/archive/2011/05/08/2040201.html</a></li><li><a href="https://cnodejs.org/topic/5338c5db7cbade005b023c98" target="_blank" rel="external">快速搭建 Node.js 开发环境以及加速 npm快速搭建 Node.js 开发环境以及加速 npm</a></li></ul><p>当然，实际参考的文章远比这多的多。不过，是这几篇文章在重要的阶段带我登上云端。<br>遗憾的是安装过程中没有截图，只是凭记忆把这些东西串连起来了，实际操作中难免有误，见谅！</p>]]></content>
    
    <summary type="html">
    
      阿里云Linux-Ubuntu环境配置，阿里云Linux安装Nodejs，Ubuntu远程桌面, GNOME图形界面安装和中文环境配置
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://imys.net/tags/Nodejs/"/>
    
      <category term="Linux" scheme="http://imys.net/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://imys.net/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>写一个歌曲下载工具</title>
    <link href="http://imys.net/20160215/download-music-by-nodejs.html"/>
    <id>http://imys.net/20160215/download-music-by-nodejs.html</id>
    <published>2016-02-15T08:33:31.000Z</published>
    <updated>2017-08-20T13:57:23.776Z</updated>
    
    <content type="html"><![CDATA[<p>最近有朋友找我帮他下载歌曲，果然在其他人眼里，程序员简直是“无所不能”的存在啊。<br>不过，这个需求对于程序员来讲，还算是比较正常的，比那些找你“刷QB”、“盗号”什么的强多了。</p><p>要是放到以前下载歌曲，直接回一句“搜百度”完事，近年来歌曲版权逐渐被重视了，一些歌曲逐渐变为会员下载或者收费下载。不过好歹还是可以在线播放的，只要能播放，那想找到歌曲文件就很简单了。</p><p>可以从<strong>开发者工具 - Network</strong> 里找音乐文件的请求链接，或者打开浏览器本地缓存文件夹找大文件。</p><p>为了防止以后有朋友发出重复需求，我决定写一个工具出来。</p><p>这其中涉及到了跨域访问、页面内容抓取，最终决定用<code>express</code>和<code>cheerio</code>来搞，服务端不存在跨域问题。</p><p>试了一些音乐网站的歌曲搜索和播放后，最终把目标瞄准了<strong>酷我音乐</strong>。</p><a id="more"></a><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>酷我的歌曲搜索就是一个表单提交，页面跳转，服务端直接输出一个包含搜索结果的页面，这个页面的 URL 包含了查询字符串。</p><p><a href="http://sou.kuwo.cn/ws/NSearch?type=music&amp;key=曾经的你" target="_blank" rel="external">http://sou.kuwo.cn/ws/NSearch?type=music&amp;key=曾经的你</a></p><p>字段<code>type</code>表示搜索类型，也就是该页面上的 7 个标签页。</p><p>对应关系如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">all         --综合</div><div class="line">artist      --歌手</div><div class="line">music       --歌曲</div><div class="line">album       --专辑</div><div class="line">mv          --MV</div><div class="line">playlist    --歌单</div><div class="line">lyric       --歌词</div></pre></td></tr></table></figure></p><p>对于目前的需求来说，<code>type=music</code>已经足够了。</p><p><code>key</code>是搜索关键字。该页签下还有一个参数<code>pn</code>表示页数，每页最多显示 25 项，该参数省略表示第一页。</p><p>该页面的搜索列表和分页均为后端直出，想要封装自己的接口只好获取整个页面内容，然后解析 DOM ，组成自己需要的数据。</p><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><p>views/index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"曾经的你"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"search"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.9.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>模版使用的 ejs。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 页面渲染</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.render(<span class="string">'index'</span>, &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'Music'</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 搜索</span></div><div class="line">app.get(<span class="string">'/search/:key/:pn'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>逻辑很简单，点击搜索时取文本框的值 ajax 请求<code>/search/:key/:pn</code>获取数据渲染<code>#list</code>和<code>#page</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> $key = $(<span class="string">'#key'</span>),</div><div class="line">        $so = $(<span class="string">'#search'</span>),</div><div class="line">        $list = $(<span class="string">'#list'</span>),</div><div class="line">        $page = $(<span class="string">'#page'</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">key, pn</span>) </span>&#123;</div><div class="line"></div><div class="line">        $.getJSON(<span class="string">'/search/'</span> + key + <span class="string">'/'</span> + pn, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">// 渲染 #list 和 #page</span></div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> key = $.trim($key.val());</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!key) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        getData(key, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $so.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        search();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $key.keyup(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.keyCode === <span class="number">13</span>) &#123;</div><div class="line">            search();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;.call(<span class="keyword">this</span>));</div></pre></td></tr></table></figure><p>根据前端的需求，后端输出的数据格式应该是这样的。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">list</span>: [],</div><div class="line">    <span class="attr">page</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>开始封装对应格式的数据。</p><p>通过开发者工具 - Elements 可以找到酷我搜索结果页面的列表和分页的 Dom。可以使用 http 模块去请求这个页面，拿到整个页面文档，使用 cheerio 选取对应的 Dom 来组装成我们需要的数据。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/dmn-1.jpg" alt="相关Dom"></div><div class="image-caption">相关Dom</div></figure><p>歌曲列表的选择器为<code>.m_list ul</code>，分页的选择器为<code>.page</code>。<br>当然，使用类选择器时要确定该类在页面内是唯一的。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 搜索</span></div><div class="line">app.get(<span class="string">'/search/:key/:pn'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// http://sou.kuwo.cn/ws/NSearch?type=music&amp;key=曾经的你&amp;pn=1</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> key = req.params.key,</div><div class="line">        pn = req.params.pn,</div><div class="line">        option = &#123;</div><div class="line">            <span class="attr">host</span>: <span class="string">'sou.kuwo.cn'</span>,</div><div class="line">            <span class="attr">port</span>: <span class="number">80</span>,</div><div class="line">            <span class="attr">path</span>: <span class="string">'/ws/NSearch?'</span> + querystring.stringify(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'music'</span>,</div><div class="line">                <span class="attr">key</span>: key,</div><div class="line">                <span class="attr">pn</span>: pn</div><div class="line">            &#125;),</div><div class="line">            <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> req2 = http.request(option, <span class="function"><span class="keyword">function</span>(<span class="params">res2</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line"></div><div class="line">        res2.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">        res2.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            body += data;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        res2.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">// 解析 html</span></div><div class="line">            <span class="keyword">var</span> $ = cheerio.load(body),</div><div class="line">                $list = $(<span class="string">'.m_list ul li'</span>),</div><div class="line">                $page = $(<span class="string">'.page'</span>),</div><div class="line">                list = [];</div><div class="line"></div><div class="line">            $list.each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = $(el);</div><div class="line"></div><div class="line">                list.push(&#123;</div><div class="line">                    <span class="attr">id</span>: <span class="built_in">parseInt</span>($<span class="keyword">this</span>.find(<span class="string">'input[name="musicNum"]'</span>).val()),</div><div class="line">                    <span class="attr">name</span>: $<span class="keyword">this</span>.find(<span class="string">'.m_name a'</span>).attr(<span class="string">'title'</span>),</div><div class="line">                    <span class="attr">album</span>: $<span class="keyword">this</span>.find(<span class="string">'.a_name a'</span>).attr(<span class="string">'title'</span>),</div><div class="line">                    <span class="attr">singer</span>: $<span class="keyword">this</span>.find(<span class="string">'.s_name a'</span>).attr(<span class="string">'title'</span>)</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            $page.find(<span class="string">'a'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = $(el),</div><div class="line">                    href = $<span class="keyword">this</span>.attr(<span class="string">'href'</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (href !== <span class="string">'#@'</span>) &#123;</div><div class="line">                    <span class="keyword">var</span> num = href.split(<span class="string">'='</span>).reverse()[<span class="number">0</span>];</div><div class="line">                    $<span class="keyword">this</span>.attr(<span class="string">'data-option'</span>, <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">                        <span class="attr">key</span>: key,</div><div class="line">                        <span class="attr">pn</span>: num</div><div class="line">                    &#125;));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                $<span class="keyword">this</span>.attr(<span class="string">'href'</span>, <span class="string">'javascript:;'</span>);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            res.send(&#123;</div><div class="line">                <span class="attr">page</span>: $page.html(),</div><div class="line">                <span class="attr">list</span>: list</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req2.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req2.end();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>歌曲的数据项取了 id、歌名、专辑、歌手。<br>分页的 Dom 结构比较简单，我直接把分页内的<code>a:href</code>属性替换了，添加自定义数据用于前端点击重渲染，直接返回整个分页的 HTML。</p><p>以上代码引用的模块有<code>http</code>、<code>querystring</code>、<code>cheerio</code>。<br>不得不说<code>cheerio</code>用来爬页面实在是太棒了！</p><p>以上代码在一个请求处理逻辑中又发出 http 请求，显然可以封装出一个请求模块，以备其他地方使用。</p><p>lib/request.js</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line"></div><div class="line">            res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">            res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                body += data;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                resolve(body);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            reject(e);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        req.end();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>添加一个 request 模块用于 http 请求，以 Promise 方式返回。<br>这样搜索的处理逻辑代码就变成这样。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/search/:key/:pn'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// http://sou.kuwo.cn/ws/NSearch?type=music&amp;key=曾经的你&amp;pn=1</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> key = req.params.key,</div><div class="line">        pn = req.params.pn,</div><div class="line">        option = &#123;</div><div class="line">            <span class="attr">host</span>: <span class="string">'sou.kuwo.cn'</span>,</div><div class="line">            <span class="attr">port</span>: <span class="number">80</span>,</div><div class="line">            <span class="attr">path</span>: <span class="string">'/ws/NSearch?'</span> + querystring.stringify(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'music'</span>,</div><div class="line">                <span class="attr">key</span>: key,</div><div class="line">                <span class="attr">pn</span>: pn</div><div class="line">            &#125;),</div><div class="line">            <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    request(option).then(<span class="function"><span class="keyword">function</span>(<span class="params">body</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 解析 html</span></div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(body),</div><div class="line">            $list = $(<span class="string">'.m_list ul li'</span>),</div><div class="line">            $page = $(<span class="string">'.page'</span>),</div><div class="line">            list = [];</div><div class="line"></div><div class="line">        $list.each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $<span class="keyword">this</span> = $(el);</div><div class="line"></div><div class="line">            list.push(&#123;</div><div class="line">                <span class="attr">id</span>: <span class="built_in">parseInt</span>($<span class="keyword">this</span>.find(<span class="string">'input[name="musicNum"]'</span>).val()),</div><div class="line">                <span class="attr">name</span>: $<span class="keyword">this</span>.find(<span class="string">'.m_name a'</span>).attr(<span class="string">'title'</span>),</div><div class="line">                <span class="attr">album</span>: $<span class="keyword">this</span>.find(<span class="string">'.a_name a'</span>).attr(<span class="string">'title'</span>),</div><div class="line">                <span class="attr">singer</span>: $<span class="keyword">this</span>.find(<span class="string">'.s_name a'</span>).attr(<span class="string">'title'</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $page.find(<span class="string">'a'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $<span class="keyword">this</span> = $(el),</div><div class="line">                href = $<span class="keyword">this</span>.attr(<span class="string">'href'</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (href !== <span class="string">'#@'</span>) &#123;</div><div class="line">                <span class="keyword">var</span> num = href.split(<span class="string">'='</span>).reverse()[<span class="number">0</span>];</div><div class="line">                $<span class="keyword">this</span>.attr(<span class="string">'data-option'</span>, <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">                    <span class="attr">key</span>: key,</div><div class="line">                    <span class="attr">pn</span>: num</div><div class="line">                &#125;));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $<span class="keyword">this</span>.attr(<span class="string">'href'</span>, <span class="string">'javascript:;'</span>);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        res.send(&#123;</div><div class="line">            <span class="attr">page</span>: $page.html(),</div><div class="line">            <span class="attr">list</span>: list</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>数据有了，开始写前端页面渲染部分。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">key, pn</span>) </span>&#123;</div><div class="line"></div><div class="line">    $.getJSON(<span class="string">'/search/'</span> + key + <span class="string">'/'</span> + pn, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line">        data.list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</div><div class="line">            body +=<span class="string">'&lt;li&gt;&lt;a href="download/'</span>+ v.id +<span class="string">'"&gt;'</span>+ v.name +<span class="string">'  '</span>+ v.album +<span class="string">'  '</span>+ v.singer +<span class="string">'&lt;/a&gt;&lt;/li&gt;'</span>;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $list.html(body);</div><div class="line">        $page.html(data.page);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>每次调用这个方法都会获取数据渲染列表和分页。<br>歌曲列表的每一项直接使用了 a 链接，点击直接下载歌曲，会有一个新的路由<code>/download/:id</code>。</p><p>分页内的 a 链接已经加上了自定义数据，直接添加点击事件拿到数据调用<code>getData</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$page.on(<span class="string">'click'</span>, <span class="string">'a[data-option]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> option = $(<span class="keyword">this</span>).data(<span class="string">'option'</span>);</div><div class="line">    getData(option.key, option.pn);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>至此，搜索加分页就全部完成了。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在酷我的页面中点击歌曲名可以跳转到一个歌曲播放页，该页面 URL 格式为<code>http://www.kuwo.cn/yinyue/100062/</code>，其中的 100062 就是歌曲ID了。<br>对于资源文件，直接分析 Network，找到资源文件请求和歌曲ID之间的关系，期望可以直接获取到资源文件的链接。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/dmn-2.jpg" alt="酷我Network"></div><div class="image-caption">酷我Network</div></figure><p>最终分析结果：</p><p>ID100062 的资源文件名是 1058000744.aac。<br>有一个请求 <a href="http://antiserver.kuwo.cn/anti.s?rid=MUSIC_100062&amp;format=aac|mp3&amp;type=convert_url&amp;response=url" target="_blank" rel="external">http://antiserver.kuwo.cn/anti.s?rid=MUSIC_100062&amp;format=aac|mp3&amp;type=convert_url&amp;response=url</a> 的结果为 <a href="http://win.web.ra03.sycdn.kuwo.cn/07baab80f0a6dd9b3a091879b308ae68/56c2840e/resource/a1/48/63/96/1058000744.aac" target="_blank" rel="external">http://win.web.ra03.sycdn.kuwo.cn/07baab80f0a6dd9b3a091879b308ae68/56c2840e/resource/a1/48/63/96/1058000744.aac</a>。</p><p>这样我们直接用歌曲ID去请求<code>http://antiserver.kuwo.cn/anti.s</code>就能获得歌曲链接了。</p><p>酷我的默认请求为<code>.aac</code>格式，应该是和参数<code>format=aac|mp3</code>有关，可以改成<code>format=mp3|aac</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/download/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="comment">// http://antiserver.kuwo.cn/anti.s?rid=MUSIC_100062&amp;format=aac|mp3&amp;type=convert_url&amp;response=url</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> option = &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">'antiserver.kuwo.cn'</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">80</span>,</div><div class="line">        <span class="attr">path</span>: <span class="string">'/anti.s?rid=MUSIC_'</span> + req.params.id + <span class="string">'&amp;format=mp3|aac&amp;type=convert_url&amp;response=url'</span>,</div><div class="line">        <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    request(option).then(<span class="function"><span class="keyword">function</span>(<span class="params">body</span>) </span>&#123;</div><div class="line">        res.redirect(body);</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>request 模块又派上用场了，由于该请求直接返回了歌曲链接，我就直接重定向到该链接了。<br>为了使歌曲在新窗口打开，前端页面列表项中的 a 链接要添加<code>target=&quot;_blank&quot;</code>。</p><h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/dmn-3.jpg" alt="DownloadMusic"></div><div class="image-caption">DownloadMusic</div></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/yscoder/DownloadMusic" target="_blank" rel="external">Github - DownloadMusic</a></p>]]></content>
    
    <summary type="html">
    
      使用nodejs下载歌曲, express应用, cheerio解析网页
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://imys.net/tags/Nodejs/"/>
    
      <category term="Express" scheme="http://imys.net/tags/Express/"/>
    
      <category term="Cheerio" scheme="http://imys.net/tags/Cheerio/"/>
    
  </entry>
  
  <entry>
    <title>我为什么选择了前端？</title>
    <link href="http://imys.net/20160207/end-2015.html"/>
    <id>http://imys.net/20160207/end-2015.html</id>
    <published>2016-02-07T05:43:14.000Z</published>
    <updated>2016-11-12T19:06:15.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初出茅庐"><a href="#初出茅庐" class="headerlink" title="初出茅庐"></a>初出茅庐</h2><p>前年的腊月二十九我接到了上传简历后的第一个面试通知，于是去年初六没到，我就收拾好东西来郑州了。</p><p>我当时的求职意向写的是：.NET/JAVA/前端。<br>不知道哪儿来的自信，我就是感觉自己干什么都可以。我从来都觉得一个程序员不应该被语言和技术所标记。在这个行业，学习能力决定了你能走多远。</p><p>事实上，我根本就是一个刚出炉的菜鸟。那个时候已经有一年多的码龄，看起来什么都会点，也能写出一些让初学者感觉叼炸天的东西来。可是对于很多东西的理解都不够深，感觉就是学了一些杂七杂八的招式，所知种种也都还在基本应用的层面。<br>这些也终于在面试的时候暴漏了。</p><p>由于我的求职岗位多，面试机会也多。写简历的时候还想把安卓也写上，尝试写过一个APP，感觉代码跟 java swing 差不多，上手也不难。当时跨平台呼声很大，还是决定走 WEB 路线。</p><a id="more"></a><h2 id="面试挫折"><a href="#面试挫折" class="headerlink" title="面试挫折"></a>面试挫折</h2><p>不到一周的时间，大概面试了六七家公司，现在所在是面试的第三家。并不是这家公司的待遇有多好，而是有一家公司打击到了我（虽然我不服）。</p><p>那家公司面试的是前端，还是我比较看好的一家。<br>懂后端的去面试前端一般是很受欢迎的，我也这么认为的。虽然当时对于原型、作用域、闭包等一些进阶知识都一头雾水，但是我还是玩出了 java 编程的感觉。我还写了类、对象、继承、简单工厂模式，硬是用 js 实现了一个棋牌游戏的规则。最后导师告诉我，面向对象运用的不错，编程套路是不区分语言的，但是规则如果写到前端是不是就不安全了。<br>也对，我开个控制台，改点变量不就无敌了。</p><p>所以说，当时的我对于面试前端有着盲目的自信。</p><p>一到那边就开始做笔试了。<br>该公司逼格很高，两套面试题，一套中文，一套英文，我当时懵逼了。然后向 HR 确认可以不做英文才放下了心。<br>这显然是一个对英语水平的检测，至于我的英文水平？我可以这么说，谷歌懂的我都懂！</p><p>面试题也都很基础，比如 HTML 标签的使用（考察文档结构语义化）、HTML5 和 CSS3 常用标签和属性（考察对新技术的了解）、实现某种需求要如何写样式（考察基本功）、如何解决某种页面 兼容性问题（考察经验）、js 语言基础和 jquery 的一些属性和方法的掌握（也是基本功），还有判断 js 代码的执行结果（考察对 js 语言的掌握）。</p><p>我是一题不落的写完了，不求对，只求完整。<br>在写题的过程中我已经发现了自己的不足。主要是页面兼容性和 js 语言基础。<br>学习过程中都是后端为主，作为处女座，前端我也会用CSS3、jq特效以及bootstrap之类的框架打扮的漂漂亮亮的。我怎么可能去想什么页面兼容性问题。写 js，大概除了判断、循环、定义变量和函数就全是一股脑儿 jq 了。</p><p>不足是不足，我相信这些我都是可以在以后的工作中快速掌握的。我还是对面试成功抱有希望的。</p><p>做完面试题后，HR 叫了一个小伙子进来，看来是要进行真正的考验了。说一下印象深刻的几个问题。</p><p>问我<strong>为什么要做前端？</strong><br>的确，我的简历上后端技术居多，不知道一些人是不是会以为我是二傻子。<br>我脱口而出：<strong>前端好玩！</strong>这是来自心底的答案。</p><p>难道前端不好玩吗？<br>用 winform、swing 写界面的时候太痛苦了。而在前端简直就没有实现不了的，加上新的 h5、css3 又让网页增添许多表现力。学后端不代表我不关注前端，通过一些技术社区和博客，我可是知道前端进入了一个怎样的时代。这让我感觉前端大有可为！<br>这也是我在求职意向写上前端的理由之一。还有一个理由是 CURD 写烦了，前端直接处理数据合理的展示给用户，更能有成就感！</p><p>问了一个我从来没有关心过的问题，<strong>js 有哪几种基本数据类型？</strong><br>我回答的是：整型、浮点型、布尔型和字符串，还是十分肯定的语气。从后端的角度考虑，基本类型就是不需要用<code>new</code>来声明，因为知道有一个<code>parseFloat</code>函数，理所当然的以为<code>float</code>是一种数据类型。而正确答案中的<code>undefined</code>、<code>null</code>居然会是数据类型，这对于使用强类型语言的我根本是难以理解的。</p><p>还现场看了我的代码，就是棋牌游戏那个。<br>开头就指着<code>$().ready(function(){ })</code>说我写的不对，<code>$()</code>里面应该写参数、写<code>window</code>。我不置可否。<br>然后对我写的类和继承提出质疑。继承的实现有多种，我还是知道的。我写的这种应该是少见的，但也不至于说有什么错误。<br>直到我现在看看当时的代码，都比我们公司后端写的 js 强多了。</p><p>问了我 js 常用的函数以及调用方式。<br>我回答的不够好，平常还是太依赖 jq，或者使用的时候查文档。一些答案都是猜的，因为语言的共通性，你几乎可以确定 java 中某些类的一些函数，js 中也有。</p><p>我说用的时候查下不就行了，他说你查哪儿，我说 w3cSchool。<br>然后我清楚的记得他那写满一脸 hehe 的表情。:-)</p><p>最后是现场编码，冒泡排序。<br>我当时也是慌了，连个冒泡都没写正确，面试完下楼才恍然大悟，是内层循环条件写错了。</p><p>他问我有没有什么问题要问他的。<br>我一脸微笑的看着他，问：你工作多久了？ :-)<br>他一脸不爽，有点不耐烦的说：2年了。 一 一+</p><p>走的时候 HR 说回去等通知，结果半路上就收到短信给我画上句号了。</p><h2 id="阴差阳错"><a href="#阴差阳错" class="headerlink" title="阴差阳错"></a>阴差阳错</h2><p>之后的几个面试也不理想，郑州很多小作坊的网络公司，进去就是坑。</p><p>而我现在所在的公司，当时给我的工资真的不高，完全就是把我当初学者。<br>我最初去的时候以为面试的职位是 .NET，每个要面试的公司我都会提前做功课了解该公司行业和技术类别。<br>结果来面试我的人，就是我现在的领导，也就是说是叫我来做前端。</p><p>也没做什么笔试，不过登记表填了半天，查户口一样。<br>面谈也没问我什么特别难的问题，更多的是问了我对新技术的了解。这点我还是很让人满意的，并且我表现出了足够的兴趣。“一谈技术，两眼放光”，说的就是那时的我了。<br>领导还是我的老乡。</p><p>第二次去的时候，就是在之前的面试失败之后了。</p><p>那天回去之后我就把面试中存在的疑问查找了下答案。<br>对于这样的面试结果虽然不满意，但是却萌发了我走前端之路的心思。<br><strong>陌生的领域往往有着致命的诱惑。</strong>如果说现在有游戏开发的工作愿意要我，给我较低的工资我也愿意去。</p><p>这次来就是确定意向的。</p><p>因为薪资给的低，我问到了涨薪制度。<br>他表示半年涨一次固定薪资。<br>我继续追问了有没有可能给予优秀的人涨更高的工资，我表示自己能够快速的成长起来。<br>他表示如果试用期表现好，可以涨多点。</p><p>最后他介绍了下公司状况以及行业地位，以及当前团队正在进行的项目，并且向我表示有移动端开发项目。<br>当我知道目前他们团队，也就是我现在的团队，正在做整站改版的时候，我决定留下来了。<br>既然我要踏入前端，那么这次整站改版就是一次很好的实践机会，应该可以从头到尾系统的学习很多东西。<br><strong>就当是一次发工资的培训了。</strong></p><p>好像有点混乱，我也忘了是一次谈好还是去了两次。</p><h2 id="焉知非福"><a href="#焉知非福" class="headerlink" title="焉知非福"></a>焉知非福</h2><p>最后不谦虚的说，我们公司是真的赚到了。目前公司 3 个前端，js 基本都是我写的，或者是他们俩复制我的代码到其他地方。我承担了前端的大部分工作，在后端的配合上也有着绝对的优势。</p><p>我也赚到了，因为这个平台，让我完成了很多实践。反正这里前端没有比我强的，也不怕有人对我有何见教。</p><p>这个 MD 是年前创建的，直到今天我才写完。╮(╯▽╰)╭</p>]]></content>
    
    <summary type="html">
    
      面试经历，我为什么选择了前端
    
    </summary>
    
    
      <category term="前端" scheme="http://imys.net/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://imys.net/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我刚知道的 Promise</title>
    <link href="http://imys.net/20160203/js-promise.html"/>
    <id>http://imys.net/20160203/js-promise.html</id>
    <published>2016-02-03T03:19:47.000Z</published>
    <updated>2016-11-12T19:22:43.243Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，你会发现满世界都是某个字眼。</p><p><strong>Promise</strong>，就是这个家伙。简直阴魂不散，走到哪儿都能看到它。<code>fetch</code>、<code>koa</code>中都有TA的身影，而我却对TA一无所知。<br>搜索TA的文章介绍，第一页中最早的一篇文章已经是2011年了。那是个我还不会<code>HelloWorld</code>的年代啊！</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>Promise 对象用于延迟(deferred) 计算和异步(asynchronous ) 计算。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。</p><p>看概念很迷糊，直接看实例理解吧。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$http</span>(<span class="params">url</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> core = &#123;</div><div class="line"></div><div class="line">    <span class="attr">ajax</span> : <span class="function"><span class="keyword">function</span> (<span class="params">method, url, args</span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        <span class="keyword">var</span> uri = url;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (args &amp;&amp; (method === <span class="string">'POST'</span> || method === <span class="string">'PUT'</span>)) &#123;</div><div class="line">          uri += <span class="string">'?'</span>;</div><div class="line">          <span class="keyword">var</span> argcount = <span class="number">0</span>;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> args) &#123;</div><div class="line">            <span class="keyword">if</span> (args.hasOwnProperty(key)) &#123;</div><div class="line">              <span class="keyword">if</span> (argcount++) &#123;</div><div class="line">                uri += <span class="string">'&amp;'</span>;</div><div class="line">              &#125;</div><div class="line">              uri += <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(args[key]);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        client.open(method, uri);</div><div class="line">        client.send();</div><div class="line"></div><div class="line">        client.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.status &gt;= <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.status &lt; <span class="number">300</span>) &#123;</div><div class="line">            resolve(<span class="keyword">this</span>.response);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reject(<span class="keyword">this</span>.statusText);</div><div class="line">          &#125;</div><div class="line">        &#125;;</div><div class="line">        client.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          reject(<span class="keyword">this</span>.statusText);</div><div class="line">        &#125;;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> promise;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> core.ajax(<span class="string">'GET'</span>, url, args);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">post</span> : <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> core.ajax(<span class="string">'POST'</span>, url, args);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">put</span> : <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> core.ajax(<span class="string">'PUT'</span>, url, args);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">delete</span> : <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> core.ajax(<span class="string">'DELETE'</span>, url, args);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$http(<span class="string">'http://url/api'</span>).get(&#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">111</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// error</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>以上是一个基于 Promise 的 ajax 实现，调用形式跟 vue-resource 如出一辙（果然又是大神们嚼烂的玩意儿）。</p><p>Promise 的构造函数可以带有1个参数，它是带有<code>resolve</code>、<code>reject</code>两个参数的函数对象，如以上<code>core.ajax</code>函数中创建的 Promise 对象。<br>其中 resolve 用于处理执行成功的场景，reject 用于处理执行失败的场景。<br>在成功与失败的处理阶段 hook 到一个 Promise 对象中，最后通过<code>then</code>方法来真正的处理返回结果。</p><ul><li><code>Promise.prototype.then(onFulfilled[, onRejected])</code></li><li><code>Promise.prototype.catch(onRejected)</code></li></ul><p>并不是所有的失败场景都需要在<code>then</code>方法中处理，在其后继续追加<code>catch</code>方法也是可以的。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$http(<span class="string">'http://url/api'</span>).get(&#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">111</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// success</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// error</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>由于<code>then</code>和<code>catch</code>仍然返回一个 Promise 对象，所以可以出现多个<code>then</code>或<code>catch</code>来处理不同的业务场景。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$http(<span class="string">'http://url/api'</span>).get(&#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">111</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> handleA(data);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// 此处 data 为 handleA 方法处理后的数据</span></div><div class="line">    <span class="keyword">return</span> handleB(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="为何要用"><a href="#为何要用" class="headerlink" title="为何要用"></a>为何要用</h2><p>咋一看 Promise 就是一个包装好的代理对象。<strong>不过它的出现究竟是为了解决什么问题呢？</strong></p><p>在 Promise 出现之前，如果你的逻辑中出现了异步操作，而又需要在异步操作外获取异步操作内的结果，不外乎是要使用回调了。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    $.get(yourApi, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        callback(data);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 Promise 呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        $.get(yourApi, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            resolve(data);</div><div class="line">        &#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            reject(data);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 Promise 代理了原来所需要的回调的，返回一个对象而不是传入回调参数的方法形式更直观和容易理解。<br>在之后的编程中，当目标方法返回了一个 Promise 对象，我们就知道发生了异步操作，需要通过 then 方法来处理场景需求。</p><p>到此为止，Promise 给我的感觉也只不过是语法糖罢了，这种形式的写法我也可以封装出来啊。<br>接下来才是其真正的优点。</p><p>比如异步处理多个的请求结果，原始写法。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    $.get(<span class="string">'/ApiA'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">dataA</span>)</span>&#123;</div><div class="line">        $.get(<span class="string">'/ApiB'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">dataB</span>)</span>&#123;</div><div class="line">            $.get(<span class="string">'/ApiC'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">dataC</span>)</span>&#123;</div><div class="line">                callback(dataA, dataB, dataC);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然以上是一种比较蠢的写法，当请求数量发生变化时的时候，这段代码就需要修改了。<br>可以用递归优化下。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url, callback</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(url <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">            len = url.length,</div><div class="line">            dataArr = [],</div><div class="line"></div><div class="line">            eachLoad = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</div><div class="line"></div><div class="line">                $.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"></div><div class="line">                    dataArr.push(data);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(i++ <span class="xml"><span class="tag">&lt; <span class="attr">len</span> <span class="attr">-</span> <span class="attr">1</span>) &#123;</span></span></div><div class="line">                        <span class="attr">eachLoad</span>(<span class="attr">url</span>[<span class="attr">i</span>]);</div><div class="line">                    &#125; <span class="attr">else</span> &#123;</div><div class="line">                        <span class="attr">callback.apply</span>(<span class="attr">null</span>, <span class="attr">dataArr</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="attr">eachLoad</span>(<span class="attr">url</span>[<span class="attr">i</span>]);</div><div class="line"></div><div class="line">    &#125; <span class="attr">else</span> &#123;</div><div class="line">        $<span class="attr">.get</span>(<span class="attr">url</span>, <span class="attr">function</span>(<span class="attr">data</span>)&#123;</div><div class="line">            <span class="attr">callback</span>(<span class="attr">data</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 Promise 解决。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> promiseA = $http(<span class="string">'/List'</span>).get(&#123;</div><div class="line">        <span class="attr">id</span>: <span class="number">111</span></div><div class="line">    &#125;),</div><div class="line">    promiseB = $http(<span class="string">'/List'</span>).get(&#123;</div><div class="line">        <span class="attr">id</span>: <span class="number">222</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all([promiseA, promiseB]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// do...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用<code>Promise.all</code>方法一次性处理多个操作。</p><p>Promise 属于 ES6 特性，目前在 IE 中还不能用，不过各大框架也都有自己的实现。</p><h2 id="jQuery-中的-Promise"><a href="#jQuery-中的-Promise" class="headerlink" title="jQuery 中的 Promise"></a>jQuery 中的 Promise</h2><p>jQuery 中很多异步操作都会返回一个延迟对象<code>$.Deferred</code>，该对象具有一系列的操作方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// animate</span></div><div class="line">$(<span class="string">'div'</span>).animate(&#123;</div><div class="line">    <span class="attr">width</span>: <span class="string">'50%'</span></div><div class="line">&#125;, <span class="number">300</span>).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 当延迟成功时调用</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ajax</span></div><div class="line">$.get(<span class="string">'/List'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// succee</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// error</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// when</span></div><div class="line">$.when($.ajax(<span class="string">'/List1'</span>), $.ajax(<span class="string">'/List2'</span>)).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// succee</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// error</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 还有很多，可以去 jQuery Api 中看。</span></div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">javascript标准库-Promise | MDN</a></li><li><a href="http://www.infoq.com/cn/news/2011/09/js-promise" target="_blank" rel="external">JavaScript异步编程的Promise模式</a></li><li><a href="http://liubin.org/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a></li></ul>]]></content>
    
    <summary type="html">
    
      ES6 Promise介绍
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://imys.net/tags/ES6/"/>
    
      <category term="Promise" scheme="http://imys.net/tags/Promise/"/>
    
      <category term="async" scheme="http://imys.net/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>你以为你写的1px就是1px吗？</title>
    <link href="http://imys.net/20160127/mobile-1px.html"/>
    <id>http://imys.net/20160127/mobile-1px.html</id>
    <published>2016-01-27T14:33:05.000Z</published>
    <updated>2016-11-12T19:23:37.435Z</updated>
    
    <content type="html"><![CDATA[<p>“这一行的分割线高了一点。”<br>好的，减小行高, 加点上下内边距。</p><p>“这几个元素要两端对齐。”<br>好的，flex没有解决不了的布局，<code>justify-content: space-between;</code>搞定。</p><p>……</p><p>“这个图标颜色不对，应该是#999。”<br>好的，我改…等等，明明就是 #999 啊，这分明是想被打脸的节奏。打开页面，右键图标，审查元素，截图。<br>是不是 999 ？是不是 999 ？？是不是 999 ？？？</p><p>“所有的下边框都应该是1px。”<br>我看到这个问题的瞬间，感觉像在侮辱我的智商。边框 1px 这么常用的样式，我还会写错不成？</p><p>正当准备继续“打脸”时，突然我的好奇心上来了。关于 <strong>1px 边框在移动设备上看起来比较粗</strong> 这个问题，我也曾经想过。<br>因为页面其他内容看起来都是正常的，所以我一直觉得这是移动设备浏览器的渲染问题，属于外部原因。<br>也曾设置过 .5px ，但显然浏览器并不买账。<br><a id="more"></a></p><p>搜索关键字<strong>1px border</strong>，找到了问题所在。</p><h2 id="devicePixelRatio"><a href="#devicePixelRatio" class="headerlink" title="devicePixelRatio"></a>devicePixelRatio</h2><p>说来惭愧，关于 devicePixelRatio，我也算是有使用经验的人了，怎么就没有想到呢。</p><p>简单举例一下，我的 MX5 分辨率是 1920*1080，但是实际屏幕物理像素是 640*360，换算得出 devicePixelRatio = 3。<br>也就是说屏幕中的<code>1点 = 3px</code>。</p><p>设计师提出的图标颜色不对的问题也在于此，因为颜色也受益于分辨率。</p><h2 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h2><p>这一切都是 viewport 在作怪！</p><p>我们在开发手机页面时，都会这样设置。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><code>width=device-width</code>: 设置浏览器内容宽度为设备物理像素宽度。</li><li><code>initial-scale=1</code>: 缩放比为1，后面两个属性为最大和最小缩放比。</li><li><code>user-scalable=no</code>: 禁止用户手动缩放。</li></ul><p>用 1920*1080 分辨率的手机打开一个没有添加 viewport 的PC站点，横屏状态是可以完整的出页面内容的。因为这个时候的 1px 就是 1px。</p><h2 id="还原分辨率"><a href="#还原分辨率" class="headerlink" title="还原分辨率"></a>还原分辨率</h2><p>知道了问题的原因就对症下药了。</p><p>可以根据<code>window.devicePixelRatio</code>来动态修改屏幕缩放比，还原真实分辨率。<br>还有一个问题。</p><p><strong>分辨率还原了，那岂不是所有元素的尺寸数值都需要重新计算了？</strong><br>如果你的 css 没有使用 em 和 rem 为单位的话，那么恭喜你，一个一个慢慢改吧。<br>而使用 em 和 rem 为单位就简单多了，只需要动态修改根元素字体大小就行了。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">id</span>=<span class="string">"vp"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> vp = <span class="built_in">document</span>.getElementById(<span class="string">'vp'</span>);</div><div class="line">        dpr = <span class="built_in">window</span>.devicePixelRatio,</div><div class="line">        html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>],</div><div class="line">        vpVlue = <span class="string">'width=device-width, initial-scale=X, maximum-scale=X, minimum-scale=X, user-scalable=no'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(dpr) &#123;</div><div class="line">        vp.content = vpVlue.replace(<span class="regexp">/X/g</span>, (<span class="number">1</span> / dpr));</div><div class="line">        html.style.fontSize = (<span class="number">14</span> * dpr) + <span class="string">'px'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><p>这可以直接加到头部模版中。</p><p>关于<strong>修改根元素字体大小</strong>也可以使用 css媒体查询的方式。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">media</span> (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">28px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (-webkit-min-device-pixel-ratio: <span class="number">3</span>) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">42px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>本来 js 代码我是放到 body 闭合前的。<br>viewport 初始缩放值是 1 ，根元素初始字体大小是 14px，我的手机 devicePixelRatio 是 3。按照浏览器加载顺序，等执行到 js 前，页面内容应该 1/3 的大小；执行完 js 后，页面恢复实际大小，整个页面居然出现了类似于<code>transform: scale(1)</code>般的过渡效果。</p><p>为了让用户更早的看到页面内容，我还是决定放到头部了。</p><h2 id="问题更新"><a href="#问题更新" class="headerlink" title="问题更新"></a>问题更新</h2><p>以上的思路和代码确实解决了问题，至少我在手机浏览器上测试是OK的。之后在 APP 中嵌入后发现没有效果，页面内容都因为字号修改被放大了。<br>我怀疑是安卓端的某些配置的原因，但是不了解的事又不好乱发言。</p><p>最后抽了一个闲工夫，把安卓环境搭了起来，看着 WebView 的API，自己写了个测试DEMO。<br>问题解决了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">webview.getSettings().setUseWideViewPort(true);  // 自适应手机屏幕</div></pre></td></tr></table></figure><p>从方法名就很容易理解这个配置项与 viewport 存在着关系。<br>问题解决了，我要去安卓那边装逼了。</p>]]></content>
    
    <summary type="html">
    
      解决移动端1px border，图片模糊等问题
    
    </summary>
    
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="devicePixelRatio" scheme="http://imys.net/tags/devicePixelRatio/"/>
    
      <category term="em" scheme="http://imys.net/tags/em/"/>
    
      <category term="Mobile" scheme="http://imys.net/tags/Mobile/"/>
    
      <category term="Webview" scheme="http://imys.net/tags/Webview/"/>
    
      <category term="Viewport" scheme="http://imys.net/tags/Viewport/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客改版记录</title>
    <link href="http://imys.net/20160118/hexo-blog-update-log.html"/>
    <id>http://imys.net/20160118/hexo-blog-update-log.html</id>
    <published>2016-01-18T01:02:18.000Z</published>
    <updated>2016-11-12T19:07:13.188Z</updated>
    
    <content type="html"><![CDATA[<p>每当我把之前立下的 flag 执行的时候，都感觉是一件很骄傲的事，太多的计划被我用各种接口扼杀在摇篮中了。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 Android 更新到 5.0 后，我就对触摸反馈这一点很感兴趣。也尝试模拟过，但是最后的效果都不太满意。<br>偶然的一次在 github上 看到了 Materialize 这个项目，才知道了谷歌的<code>Material Design(原质化设计)</code> 设计规范。而后在公司听到设计师提到这个东西时，突然有种跟上了潮流的感觉。</p><p>就像一些文章中提到的，<strong>即使你不懂设计，但是照着样式去做，也不会太丑。</strong><br>这显然很对我的胃口。<br><a id="more"></a></p><h2 id="改版内容"><a href="#改版内容" class="headerlink" title="改版内容"></a>改版内容</h2><p>除了博客风格改版外，也改变了以下一些内容。</p><h3 id="Hexo-toc"><a href="#Hexo-toc" class="headerlink" title="Hexo toc"></a>Hexo toc</h3><p>在我刚使用 Hexo 不久时，还曾专门写了一篇文章介绍 hexo-toc 插件的使用。不过最近在我升级了 hexo-toc 插件后，发现已经不需要像我写的那么麻烦了。这还不是重点。<br>因为博客布局结构要有很大变化，很多模版我都需要重写。所以就需要查阅 Hexo 文档寻找一些可利用的资料。<br>就在这个过程中，我居然发现了 Hexo 居然有生成 toc 的辅助方法。好气好气，也不是第一次翻文档了，之前居然都没注意到。</p><p>与 hexo-toc 插件比，这个辅助方法更加便利。<a href="https://hexo.io/docs/helpers.html#toc" target="_blank" rel="external">文档链接</a><br>hexo-toc 需要在编辑时插入<code>&lt;!--toc--&gt;</code>标记，且生成后的内容还在文章中占位。这对于想实现一些浮动式文章导航的同学十分不便。<br>而<code>&lt;%- toc(str, [options]) %&gt;</code>方法就简单多了，只要是在文章页中，你放到什么地方，就在什么地方渲染。</p><h3 id="去-jquery"><a href="#去-jquery" class="headerlink" title="去 jquery"></a>去 jquery</h3><p>仅仅是一个博客，也没有多少复杂的 Dom 操作。读者也都是程序猿，也不存在要考虑浏览器兼容。jquery 能不用则不用，当前的 js 也就写了100多行。</p><h3 id="去-fancybox"><a href="#去-fancybox" class="headerlink" title="去 fancybox"></a>去 fancybox</h3><p>fancybox 是基于 jquery 的一个图片浏览插件，jquery 去了，它自然也就失效了。请求数挺多的,而且它本身的功能，我并不在意，没什么卵用的感觉。如果后续有需要，也可以用原生实现一个。</p><h3 id="去-stylus-用-less"><a href="#去-stylus-用-less" class="headerlink" title="去 stylus, 用 less"></a>去 stylus, 用 less</h3><p>这个纯粹是个人的习惯。html 和 css 还是喜欢原生的代码风格，stylus 和 jade 这种强缩进的都不太喜欢。</p><p>替换时需要在配置文件中增加 less 插件的依赖和参数配置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">plugins:</div><div class="line">  - hexo-renderer-less</div><div class="line"></div><div class="line">less:</div><div class="line">  paths:</div><div class="line">    - source/css/style.less</div></pre></td></tr></table></figure><h3 id="安装-roboto-字体"><a href="#安装-roboto-字体" class="headerlink" title="安装 roboto 字体"></a>安装 roboto 字体</h3><p>Roboto 字体是 Material Design 的推荐英文字体。英文字体文件字节小，毕竟只有26个字母。虽然写不了几个单词。<br>中文推荐字体是 Note，但是要115.5MB。<a href="http://www.google.com/get/noto/#sans-hans" target="_blank" rel="external">Google Note Fonts</a></p><h3 id="增加-Waves-效果"><a href="#增加-Waves-效果" class="headerlink" title="增加 Waves 效果"></a>增加 Waves 效果</h3><p>这个也是 Material Design 提倡的响应式交互效果。<br>Materialize 中使用的是 <a href="https://github.com/fians/Waves" target="_blank" rel="external">Waves</a>。我也是顺藤摸瓜才知道了这个库。</p><h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><p>现在的文章分享是直接通过 <a href="http://www.jiathis.com/help/html/share-with-jiathis-api" target="_blank" rel="external">JiaThis API</a> 接口，不需要引用额外的js。这样DIY就更方便了。<br>默认的分享样式，很难实现一些效果。像我现在的分享，有文章右侧的静态挂件和顶部浮动导航右侧的分享按钮。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我不懂设计，所以关于 Material Design 的介绍，也就不多提。附上参考链接，有兴趣的可以去提高一下审美。</p><ul><li><a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Google Material design</a></li><li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></li><li><a href="https://github.com/dogfalo/materialize/" target="_blank" rel="external">Material design的实现：Materialize</a></li></ul><p>一些小细节还会不断的调整，之后整理下再把主题发布到 github 上。</p>]]></content>
    
    <summary type="html">
    
      Hexo博客改版记录, material theme
    
    </summary>
    
    
      <category term="Hexo" scheme="http://imys.net/tags/Hexo/"/>
    
      <category term="Material Design" scheme="http://imys.net/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>前端技术模拟移动端wheelview滑动选择器</title>
    <link href="http://imys.net/20151231/simulation-of-wheelview-selector.html"/>
    <id>http://imys.net/20151231/simulation-of-wheelview-selector.html</id>
    <published>2015-12-31T01:59:48.000Z</published>
    <updated>2017-08-20T13:57:23.833Z</updated>
    
    <content type="html"><![CDATA[<p>公司进入APP改版阶段了，会基于原生安卓开发，感觉没自己什么事了。只能看看原型图，想想前端技术如何实现某某功能。。。</p><p>滑动选择器在APP上是很常见的组件了，最初是 IOS 上的组件，之后就出现 Android 版的自定义实现，称为 WheelView。对于前端技术来讲，实现也并不困难。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/wheelview.gif" alt="wheelview"></div><div class="image-caption">wheelview</div></figure><a id="more"></a><!-- toc --><p>布局是解决复杂组件效果的关键，要充分结合css去思考。</p><p>选中项和未选中项的样式不一致是首先要解决的问题，最终想到了两种解决方案。</p><h3 id="Plan-A"><a href="#Plan-A" class="headerlink" title="Plan A"></a>Plan A</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wheelview"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"action"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"fl"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"fr"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"backlist list"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>一年-两年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>两年-三年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>三年-五年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>五年-八年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>八年-十年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"front"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">id</span>=<span class="string">"front"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>一年-两年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>两年-三年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>三年-五年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>五年-八年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>八年-十年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>使用两个列表来显示，一个列表作为背景显示所有项；另一个列表置于顶层，固定为一行的高度显示选中项。<br>需要处理两个列表的同步滚动。</p><h3 id="Plan-B"><a href="#Plan-B" class="headerlink" title="Plan B"></a>Plan B</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wheelview"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"action"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"fl"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"fr"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>一年-两年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>两年-三年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>三年-五年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>五年-八年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>八年-十年<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>单列表显示，再添加两个同级的遮罩层设置透明色渐变，分别覆盖于列表上下，保留中间一项的视区。</p><p>根据不同应用场景，两种方案各有千秋。</p><p>Plan A ：适用于选中项与普通项样式差别大的场景。比如选中项要求为蓝色，普通项为灰色，已经不在一个色系了。<br>Plan B ：单列表结构更清晰，节省标签。亮点就是遮罩层的渐变背景色。</p><p>最后只剩下实现滚动效果了，为防掉坑，引用了 <code>iscroll.js</code>。</p><p><a href="http://runjs.cn/code/3p7kkepf" target="_blank" rel="external">Code</a></p>]]></content>
    
    <summary type="html">
    
      前端技术模拟移动端wheelview滑动选择器,by iscroll
    
    </summary>
    
    
      <category term="Mobile" scheme="http://imys.net/tags/Mobile/"/>
    
      <category term="wheelview" scheme="http://imys.net/tags/wheelview/"/>
    
      <category term="component" scheme="http://imys.net/tags/component/"/>
    
      <category term="iscroll" scheme="http://imys.net/tags/iscroll/"/>
    
  </entry>
  
  <entry>
    <title>iconfont兼容与维护</title>
    <link href="http://imys.net/20151223/iconfont-maintained.html"/>
    <id>http://imys.net/20151223/iconfont-maintained.html</id>
    <published>2015-12-23T05:47:34.000Z</published>
    <updated>2016-11-12T19:13:47.620Z</updated>
    
    <content type="html"><![CDATA[<p>在扁平化网页设计中，字体图标有着很好的易用性。结合一年的实际运用，来做一下总结。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以直接引用开源的第三方字体样式文件，如<code>Font Awesome</code>等。<br>或者你想要构建一套产品专属的图标，可以注册一个字体图标库，添加一个图标项目，进行创作和使用。</p><p>我司使用的字体库是<a href="http://www.iconfont.cn/" target="_blank" rel="external">阿里的iconfont</a>。</p><p>设计图标我不懂，都是设计师负责产出的。<br>产出后，可以看到图标的<code>Unicode</code>和<code>font class</code>。</p><p>使用时，需要把字体引用<code>@font-face</code>复制到项目公共样式中，可以使用在线字体链接或者下载到本地服务器，然后可以选择两种方式引用。</p><h3 id="1-直接使用Unicode"><a href="#1-直接使用Unicode" class="headerlink" title="1.直接使用Unicode"></a>1.直接使用<code>Unicode</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.icon</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"iconfont"</span>;</div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>&amp;#xe74e;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure><p>把<code>Unicode</code>直接写入页面内容中，渲染出图标。</p><h3 id="2-使用font-class"><a href="#2-使用font-class" class="headerlink" title="2.使用font class"></a>2.使用<code>font class</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-attr">[class^="icon-"]</span><span class="selector-pseudo">:before</span>, <span class="selector-attr">[class*=" icon-"]</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">text-decoration</span>: inherit;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">speak</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-search</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"\f002"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure><p>利用伪元素的<code>content</code>属性，把<code>Unicode</code>写到 css 中，不过渲染后还是会在页面展示。</p><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>由于要IE7不支持伪元素，所以我们这一直是直接使用<code>Unicode</code>的方式引用图标。<br>随着图标的增加，使用极其不方便。</p><ol><li>写页面时每次引用图标就需要打开图标项目页面去复制 Unicode，这个真心记不住啊！</li><li>领导抽风要修改图标，然后图标改过之后 Unicode 发生了变化，然后就需要苦逼的把所有使用这个图标的页面都改一遍 Unicode，还好有 gulp-replace。</li></ol><p>当我意识到这是一个大坑时，已经来不及了。。。</p><p>在之后，我开始基于字符映射的方式去管理字体图标。</p><p>在项目里加了一个图标配置文件。如：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"search"</span>: <span class="string">"xe74e"</span>,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>前端模版入口会直接把这个图标数据加入页面上下文。由于配置文件定义了语义化的命名，页面使用就方便多了。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>&amp;#<span class="tag">&lt;<span class="name">%=icon.search</span> %&gt;</span>;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure><p>我这边后端是 .net，不管是什么语言，都只需要在公共类中加个读取图标的方法。这样前端的模版拿到后端也不需要进行什么修改。</p><p>然而直接促使我发此文的原因是因为不小心点开了 Font Awesome 用于兼容 IE7 的 css 文件。</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">.icon-file &#123;</div><div class="line">    *zoom: expression( this.runtimeStyle['zoom'] = '1', this.innerHTML = '&amp;#xf016;' )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>expression 是 ie 特有的 css 属性，可以在其中写 js 脚本。这样又把图标的维护权交还 css 了。</p><p>在 css 中写 js 这种做法肯定是不提倡的，而且一个页面上存在很多的图标，在 ie7 这么恶劣的环境中，渲染速度也是个大问题。我用 IE7 打开 Font Awesome 的页面，速度在30s左右。</p><p>这是个问题，又不算问题。😏</p>]]></content>
    
    <summary type="html">
    
      iconfont字体图标兼容与维护,使用经验,ie7兼容
    
    </summary>
    
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="iconfont" scheme="http://imys.net/tags/iconfont/"/>
    
  </entry>
  
  <entry>
    <title>神奇的eval()与new Function()</title>
    <link href="http://imys.net/20151222/eval-with-new-function.html"/>
    <id>http://imys.net/20151222/eval-with-new-function.html</id>
    <published>2015-12-22T05:07:00.000Z</published>
    <updated>2016-11-12T19:12:47.640Z</updated>
    
    <content type="html"><![CDATA[<p>在需要兼容IE8以下的日子里，往往需要使用<code>eval()</code>来把后端传过来的JSON串转成可操作的JSON对象。直到昨天在翻看jQuery源码时，才发现<code>jQuery.parseJSON</code>的兼容实现用的是<code>new Function()</code>。马上Google了相关资料，寻找两者的区别。</p><a id="more"></a><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>eval接受字符串参数，解析其中的js代码。如果编译失败，会抛出异常，否则执行其中的代码，计算返回值。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">'2+2'</span>);  <span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="built_in">eval</span>(<span class="string">'console.log("ok")'</span>);  <span class="comment">// ok</span></div></pre></td></tr></table></figure><p>在实际应用中，通常这样转换JSON。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonStr = <span class="string">'&#123; "age": 20, "name": "jack" &#125;'</span>;</div><div class="line"><span class="built_in">eval</span>(<span class="string">'('</span> + jsonStr + <span class="string">')'</span>);</div></pre></td></tr></table></figure><p>为什么要加括号呢？</p><blockquote><p>因为js中<code>{}</code>通常是表示一个语句块，eval只会计算语句块内的值进行返回。加上括号就变成一个整体的表达式。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="built_in">eval</span>(<span class="string">'&#123;&#125;'</span>) );      <span class="comment">// undefind</span></div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">eval</span>(<span class="string">'(&#123;&#125;)'</span>) );    <span class="comment">// Object &#123;&#125;</span></div></pre></td></tr></table></figure><p>使用eval需要注意执行作用域</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">'var s=2'</span>);</div><div class="line">    <span class="built_in">console</span>.log(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line">a();                <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(s);     <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>在局部环境使用eval便会创建局部变量。可以显示指定eval调用者来改变上下文环境。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'global'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">'var s = "local"'</span>);</div><div class="line">    <span class="built_in">console</span>.log(s);                 <span class="comment">// local</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'s'</span>));         <span class="comment">// local</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.eval(<span class="string">'s'</span>));  <span class="comment">// global</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>在之前我对于<code>Function</code>的了解只限于<strong>“定义方法的一种非主流方式”</strong>。却忽略了Function与eval相同的字符串参数特性。</p><p>语法：<code>var func = new Function(arg1, arg2, ..., functionBody);</code></p><p>实例：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a+b;'</span>);</div><div class="line"><span class="built_in">console</span>.log( add(<span class="number">2</span>, <span class="number">3</span>) );    <span class="comment">// 5</span></div></pre></td></tr></table></figure><p>由于其形参使用字符串的方式表示，也可以使用1个字符串来描述多个形参。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a, b'</span>, <span class="string">'return a+b;'</span>);</div><div class="line"><span class="built_in">console</span>.log( add(<span class="number">2</span>, <span class="number">3</span>) );    <span class="comment">// 5</span></div></pre></td></tr></table></figure><p>在转换JSON的实际应用中，只需要这么做。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonStr = <span class="string">'&#123; "age": 20, "name": "jack" &#125;'</span>,</div><div class="line">    json = (<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'return '</span> + jsonStr))();</div></pre></td></tr></table></figure><p>eval 与 Function 都有着动态编译js代码的作用，但是在实际的编程中并不推荐使用。如果可以，请用更好的方法替代。</p><p>在一些特殊的运用场合，也有一些合理运用的实践。比如模板解析等。</p><p>那么为什么 jQuery 要用<code>new Function</code>而不用<code>eval</code>呢？<br>看看老外做的两者以及原生方法的性能比较：<a href="http://weblogs.asp.net/yuanjian/json-performance-comparison-of-eval-new-function-and-json" target="_blank" rel="external">JSON Performance comparison of eval, new Function and JSON</a></p>]]></content>
    
    <summary type="html">
    
      eval与new Function比较,性能比较,json转换
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="Function" scheme="http://imys.net/tags/Function/"/>
    
      <category term="eval" scheme="http://imys.net/tags/eval/"/>
    
  </entry>
  
  <entry>
    <title>优雅的模拟表单元素radio、checkbox</title>
    <link href="http://imys.net/20151113/simulation-of-native-radio-checkbox.html"/>
    <id>http://imys.net/20151113/simulation-of-native-radio-checkbox.html</id>
    <published>2015-11-13T00:51:49.000Z</published>
    <updated>2016-11-12T19:26:37.075Z</updated>
    
    <content type="html"><![CDATA[<p>公司内部管理系统准备改版，最近几天把前端架子搭起来了。在规划底层元素时参考了<code>Bootstrap</code>和<code>Amaze UI</code>，一些组件的实现确实很优雅。<br>比如<code>Amaze UI</code> 的单/复选框。</p><a id="more"></a><p>之前我在模拟单/复选框时，都是很暴力的用 js 解决。</p><ol><li>绑定点击事件；</li><li>更改 checked 属性值；</li><li>切换 class 变更样式。</li></ol><p>而打开控制台观察<code>Amaze UI</code>的单/复选框，发现<code>Elements</code>状态是无更改的。<br>更改<code>checked</code>属性值，并不会影响到标签字面量属性。但是想要切换选中和未选中的样式，如果不是通过切换<code>class</code>来实现，那便是直接修改<code>DOM</code>了，而这两种操作在控制台中的都能看到一个状态变化的响应。</p><p>那么<code>Amaze</code>究竟是怎么实现的呢？</p><p>我选中一个元素的图标，在<code>Styles</code>中观察样式变化。直到发现了伪类选择器<code>:checked</code>和相邻选择器<code>+</code>，才恍然大悟。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex1"</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"sex1"</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"check-icons"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-check"</span>&gt;</span>&amp;#xe632;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-uncheck"</span>&gt;</span>&amp;#xe634;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    男</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex2"</span> <span class="attr">class</span>=<span class="string">"form-check"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"sex2"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"check-icons"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-check"</span>&gt;</span>&amp;#xe632;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-uncheck"</span>&gt;</span>&amp;#xe634;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    女</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure><p>图标使用的<code>iconfont</code>，然后添加一些样式，我使用<code>less</code>作为<code>css</code>预处理语言。</p><figure class="highlight less"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.form-check</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">24px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">28px</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="selector-tag">input</span> &#123;</div><div class="line">        <span class="attribute">display</span>: none;</div><div class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:checked+.check-icons</span> &#123;</div><div class="line">            <span class="selector-class">.icon-check</span> &#123;</div><div class="line">                <span class="attribute">display</span>: inline-block;</div><div class="line">            &#125;</div><div class="line">            <span class="selector-class">.icon-uncheck</span> &#123;</div><div class="line">                <span class="attribute">display</span>: none;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.check-icons</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">top</span>: <span class="number">5px</span>;</div><div class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">18px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">18px</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">        <span class="selector-class">.icon</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">18px</span>;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.icon-uncheck</span> &#123;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#d7d7d7</span></div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.icon-check</span> &#123;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#4776c8</span>;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过<code>label:for</code>属性来触发<code>input:checked</code>属性值更改。</li><li>设置相邻选择器，由<code>:checked</code>状态变化影响对应的icon显示和隐藏。</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>相邻选择器<code>+</code>兼容IE7+，而伪类选择器<code>:checked</code>和<code>label:for</code>属性兼容IE9+（又是这一道坎…）。</p><h3 id="IE7、8的兼容"><a href="#IE7、8的兼容" class="headerlink" title="IE7、8的兼容"></a>IE7、8的兼容</h3><p>由选择器的妙用，让我想到了属性选择器<code>[checked]</code>，兼容性为IE7+。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.ie8</span> <span class="selector-attr">[checked]</span>+<span class="selector-class">.check-icons</span> <span class="selector-class">.icon-check</span>,</div><div class="line"><span class="selector-class">.ie7</span> <span class="selector-attr">[checked]</span>+<span class="selector-class">.check-icons</span> <span class="selector-class">.icon-check</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ie8</span> <span class="selector-attr">[checked]</span>+<span class="selector-class">.check-icons</span> <span class="selector-class">.icon-uncheck</span>,</div><div class="line"><span class="selector-class">.ie7</span> <span class="selector-attr">[checked]</span>+<span class="selector-class">.check-icons</span> <span class="selector-class">.icon-uncheck</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我针对IE7、8应用了这些样式，<code>for</code>属性失去了作用，就需要绑定点击事件来更改<code>checked</code>值。<br>做完之后发现并没有什么卵用。</p><p>因为属性选择器是针对标签字面量属性启作用，而如<code>input.checked = true;</code>这种修改方式是不会影响到标签上定义的属性。</p><p>这就牵扯到了<code>attribute</code>和<code>property</code>的区别。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> ck = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">ck.type = <span class="string">'checkbox'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(ck);</div><div class="line"></div><div class="line">ck.checked = <span class="literal">true</span>;</div><div class="line">ck.getAttribute(<span class="string">'checked'</span>); <span class="comment">// null</span></div><div class="line"></div><div class="line">ck.checked = <span class="literal">false</span>;</div><div class="line">ck.setAttribute(<span class="string">'checked'</span>,<span class="string">'checked'</span>);</div><div class="line">ck.checked  <span class="comment">// false</span></div></pre></td></tr></table></figure><ul><li>attribute 是 html 标签的属性</li><li>property 是 Dom 标准属性</li></ul><p>也许是因为标签自定义属性的存在，这两个属性值是不同步的。</p><p>如果想要使<code>[checked]</code>选择器生效，势必要在点击事件中同步修改<code>attribute</code>和<code>property</code>。</p><p>实验后发现在IE7、8下正确运行了，对应的icon的<code>display</code>属性确实变化了，但是肉眼看不到样式更改。<br>不知道是不是渲染能力差的原因，总是需要在控制台里点击对应的标签后才看得到更改后的样式。</p><p>思前思后，既然总归是需要用 js 去兼容，那在IE7、8下还是使用切换<code>class</code>来控制样式。</p>]]></content>
    
    <summary type="html">
    
      纯css模拟表单元素radio、checkbox，iconfont
    
    </summary>
    
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="iconfont" scheme="http://imys.net/tags/iconfont/"/>
    
      <category term="radio" scheme="http://imys.net/tags/radio/"/>
    
      <category term="checkbox" scheme="http://imys.net/tags/checkbox/"/>
    
  </entry>
  
  <entry>
    <title>移动端页面开发关键—尺寸和布局</title>
    <link href="http://imys.net/20151107/mobile-page-size-and-layout.html"/>
    <id>http://imys.net/20151107/mobile-page-size-and-layout.html</id>
    <published>2015-11-07T15:02:29.000Z</published>
    <updated>2016-11-12T19:23:58.139Z</updated>
    
    <content type="html"><![CDATA[<p>早上去公司加了半天班（带薪的），为APP上线做了个专题介绍页。当然现在的主题不是介绍在这个专题中我用了哪些技术、实现了何种酷炫的特效。实际上我为了赶时间，我破天荒的没有贯彻自己的一贯作风—<em>造轮子</em>，而是直接引了一个第三方库。<br>在这个APP开发中，我负责内嵌网页的开发，这也是我第一次涉足一个完整的移动端开发项目，以往只写过一些活动分享页、专题页。</p><p>对于页面兼容性影响最大的两个因素就是“尺寸”和“布局”。好在之前通过社区、博客等看过此类文章，已有了足够的认识，这次项目“实践”的成分更多。<br><a id="more"></a></p><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>在移动端页面，我用到的尺寸单位有<code>em</code>、<code>rem</code>、<code>vw</code>。<code>px</code>基本不用，但我会设置Dom根元素<code>html</code>字体大小为<code>14px</code>，一来方便<code>em</code>和<code>rem</code>的尺寸计算，二来<code>14px</code>是最常用的字体大小。</p><blockquote><p>常规浏览器默认字体大小为<code>16px</code>，最小字体为<code>12px</code>。</p></blockquote><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>首先你要有这样一个基础的认知：</p><blockquote><p>假如一个元素没有重设字体大小，那么它的字体大小会继承父级元素，如果父级也没有设置大小，那么依次类推一直追溯到<code>body</code>、<code>html</code>。</p></blockquote><p><code>em</code>是相对于当前元素字体大小计算像素值的，计算方法是<code>em值 * 字体大小</code>。</p><p><strong>举例：</strong><br>一个元素设置了高度为<code>2em</code>，那么实际像素值为<code>2 * 14px = 28px</code>，而一旦这个元素重设了字体大小为<code>2em</code>，那么该元素高度值为<code>2 * 28px = 56px</code>。另外，其后的子元素的计算基数都会改变。</p><p>使用<code>em</code>时一旦有设置字体大小的样式出现就需要注意重新计算一些属性值大小了。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>与 <code>em</code> 相比，这货看起来多了一个字母，显然是属于升级版本。<br><code>rem</code>是始终相对与 Dom 根元素<code>html</code>来计算像素值的。不管当前元素字体如何设置，计算时字体大小仍然以<code>html</code>的字体设置为基准。</p><h3 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h3><p><code>vw</code>指的的当前屏幕宽度，与之对应的还有 <code>vh</code>，表示屏幕高度。如果屏幕宽为 360px，那么 <code>100vw = 360px</code>。</p><p>是否感觉并没有什么卵用？别着急，下面说一下我的一次适用经历。</p><p><strong>html：</strong></p><pre><code>&lt;div class=&quot;box&quot;&gt;
    &lt;div class=&quot;inner&quot;&gt;
        &lt;div class=&quot;cont cont-1&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;cont cont-2&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;cont cont-3&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;div&gt;
</code></pre><p><strong>css：</strong></p><pre><code>.box {
    width: 100%;
    overflow: hidden;
}
.inner {
    width: 300%;
}
.cont {
    float: left;
    width: 100%;
}
</code></pre><p>以上代码用以实现三屏的左右切换效果，外层容器<code>.box</code>和三个内容块宽度为屏幕宽度，三个内容块设置了左浮动样式。此时，内层容器<code>.inner</code>需要有3倍的屏幕宽度以承载三个内容块。<br>但是由于宽度继承的关系，在内层容器<code>.inner</code>宽度改变后，内容块的宽度计算基数也改变了。此时设置的100%是等于父级元素宽度的，也就是三倍屏宽。</p><p>使用js是很容易解决这个问题的，不过<code>vw</code>显然是可以适用这个场景的。<br>只需要如下设置便可解决问题。</p><pre><code>.cont { width: 100vw; }
</code></pre><p>该属性在兼容性为android 4.4+，谨慎使用。</p><h3 id="devicePixelRatio"><a href="#devicePixelRatio" class="headerlink" title="devicePixelRatio"></a>devicePixelRatio</h3><p>在一个图表页中，我用<code>canvas</code>画了个饼图。发现在手机屏幕中区块颜色显得模糊。于是搜索资料就找到了这个属性，<code>window.devicePixelRatio</code>。<br>目前我对这个属性的理解还不深，基本的理解为：屏幕缩放比。传送门：<a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="external">张鑫旭：设备像素比devicePixelRatio简单介绍</a></p><p>我们通过写的css中像素仅为逻辑像素，就是你看到的宽度，而实际上手机屏幕单个点是可能存在多个像素的。</p><p>如果是常规页面元素是用不到这个属性的，而<code>canvas</code>的真实宽度和css宽度是不一致的。<br>计算方法为：<code>canvas.width = canvas.style.width * devicePixelRatio</code>。</p><p>需要注意：一旦重设了canvas的真实宽度，那么canvas之上的一切元素都需要乘以devicePixelRatio进行缩放。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>在PC上为了兼容可恶的IE不得不使用大量的浮动来进行块级元素的并行排行。而在移动端我们有了更好的选择，但不是<code>inline-block</code>，而是<code>flex</code>。</p><p>使用flex可以轻易的实现等宽、散列、垂直居中、多行排列、底部对齐等等各种布局。</p><p>定义一个flex容器</p><pre><code>.flex-row {
    display: flex;
}
</code></pre><p>通过设置容器属性，可以呈现不同的排列对齐方式。</p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>定义容器换行方式，默认不换行。可设置换行和反向换行。</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>排列方向，默认子元素从左到右顺序排列。通过设置该值可以实现反向排列或垂直方向的上下排列。</p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>主轴（水平方向）对齐方式，默认左对齐。可以实现居中、右对齐、等宽间隔等排列。</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>侧轴（垂直）对齐方式。可实现垂直居中、底部对齐、基线对齐等。</p><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>多轴垂直对齐方式。</p><p>最后附上Demo：<a href="../demo/flex.html">flex常用布局</a></p><p><strong>参考：</strong></p><ul><li><a href="http://www.w3cplus.com/css3/flexbox-basics.html" target="_blank" rel="external">大漠：Flexbox——快速布局神器</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">阮一峰：Flex 布局教程：语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">阮一峰：Flex 布局教程：实例篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      移动端页面开发,移动端尺寸,移动端布局,flex,em,rem,vw,devicePixelRatio
    
    </summary>
    
    
      <category term="移动端" scheme="http://imys.net/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="devicePixelRatio" scheme="http://imys.net/tags/devicePixelRatio/"/>
    
      <category term="em" scheme="http://imys.net/tags/em/"/>
    
      <category term="rem" scheme="http://imys.net/tags/rem/"/>
    
      <category term="vw" scheme="http://imys.net/tags/vw/"/>
    
      <category term="flex" scheme="http://imys.net/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>实现一个简单的模块加载器</title>
    <link href="http://imys.net/20151023/simple-module-loader.html"/>
    <id>http://imys.net/20151023/simple-module-loader.html</id>
    <published>2015-10-23T12:41:39.000Z</published>
    <updated>2016-11-12T19:26:10.275Z</updated>
    
    <content type="html"><![CDATA[<p>最近大半年也写了不少通用模块，却从来没使用过一种通过书写格式。<br>目前公司的前端通用库还是<code>jQuery</code>, 但也不是所有的模块都适合以<code>jQuery 插件</code>的形式开发。平时写的时候一般以立即执行函数或 OO 形式开发，以目前项目情况来看也不是很需要用<code>require.js</code>或<code>sea.js</code>之类的加载器。</p><p>其实我的需求很简单，就是抹去模块在全局作用域的定义，以通用的形式定义和引用。</p><a id="more"></a><h2 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h2><p>从结果出发分析需求，先列出来最终想要的代码形式。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 形式1：匿名模块，只有一个注入exports参数的函数体</span></div><div class="line"><span class="built_in">module</span>(<span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">'m1'</span>).msg);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 形式2：具名模块，包含一个模块名称参数和一个注入exports参数的函数体</span></div><div class="line"><span class="built_in">module</span>(<span class="string">'m1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</div><div class="line">    exports.msg = <span class="string">'hello'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 形式3：具名模块，包含一个模块名称参数、依赖模块数组、和一个注入依赖模块、exports参数的函数体</span></div><div class="line"><span class="built_in">module</span>(<span class="string">'m2'</span>, [<span class="string">'m1'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">m1, exports</span>) </span>&#123;</div><div class="line">    exports.msg = m1.msg + <span class="string">"World"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 形式4：匿名模块，与形式3相比没有模块名称</span></div><div class="line"><span class="built_in">module</span>([<span class="string">'m2'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">m2, exports</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(m2.msg);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用<code>module</code>定义一个模块，拥有一个函数上下文，可以定义模块名称和引用其他模块，也可以通过注入的<code>exports</code>参数输出模块开放接口。<br>某些时候也许需要<code>require(&#39;模块名&#39;)</code>这种形式来直接引用模块。</p><h2 id="1-注入环境变量"><a href="#1-注入环境变量" class="headerlink" title="1. 注入环境变量"></a>1. 注入环境变量</h2><p>从以上四种模块形式来看，<code>module</code>和<code>require</code>两个变量的作用域是全局，需要注入到<code>window</code>中。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w, f</span>)</span>&#123;</div><div class="line"></div><div class="line">    w.module = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    w.require = <span class="function"><span class="keyword">function</span> (<span class="params">namne</span>) </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>));</div></pre></td></tr></table></figure><p>一个简单的立即执行函数就可以做到。</p><h2 id="2-解析-module-参数"><a href="#2-解析-module-参数" class="headerlink" title="2. 解析 module 参数"></a>2. 解析 module 参数</h2><p><code>module</code>参数的数量是不固定的，最少1个（形式1）、最多3个（形式3）。<br>可以需要通过判断参数数量和类型加以区分。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">w.module = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> modName = <span class="built_in">arguments</span>[<span class="number">0</span>],     <span class="comment">// 模块名 String</span></div><div class="line">        mods = <span class="built_in">arguments</span>[<span class="number">1</span>],        <span class="comment">// 引用模块 Array</span></div><div class="line">        context = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>];      <span class="comment">// 模块函数 Function</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(modName <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">        mods = modName;</div><div class="line">        modName = f;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参数数量不固定，也就不必定义形参了，直接从<code>arguments</code>中获取。</p><blockquote><p><code>arguments[0]</code>是模块名，模块名存在时永远是参数第一位；<br><code>arguments[1]</code>是引用模块，模块名不存在时<code>arguments[0]</code>为引用模块，所以判断模块名是数组类型时重新赋值；<br>不管何种形式模块函数都是最后一个参数，直接使用<code>arguments[arguments.length - 1]</code>获取；</p></blockquote><h2 id="3-实现-module"><a href="#3-实现-module" class="headerlink" title="3. 实现 module"></a>3. 实现 module</h2><p>模块函数的参数数量也是不固定的，但至少需要注入<code>exports</code>来输出开放接口。<br>每多引用一个模块，就需要向模块函数中注入一个对应参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> modules = &#123;&#125;;  <span class="comment">// 模块容器</span></div><div class="line"></div><div class="line">w.module = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> modName = <span class="built_in">arguments</span>[<span class="number">0</span>],     <span class="comment">// 模块名 String</span></div><div class="line">        mods = <span class="built_in">arguments</span>[<span class="number">1</span>],        <span class="comment">// 引用模块 Array</span></div><div class="line">        context = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>];      <span class="comment">// 模块函数 Function</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(modName <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">        mods = modName;</div><div class="line">        modName = f;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 1. 取出模块</span></div><div class="line">    <span class="keyword">var</span> args = [];</div><div class="line">    <span class="keyword">if</span>(mods <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mods.length; i++) &#123;</div><div class="line">            args.push(modules[mods[i]]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 2. 注册模块</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> modName === <span class="string">'string'</span>) &#123;</div><div class="line">        modules[modName] = &#123;&#125;;</div><div class="line">        args.push(modules[modName]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 3. 注入参数，执行模块</span></div><div class="line">    context.apply(<span class="keyword">this</span>, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>遍历<code>mods</code>取出模块：定义了一个变量<code>modules</code>存放模块，那么假如一个模块引用了模块<code>a</code>、<code>b</code>，则<code>mods = [&#39;a&#39;, &#39;b&#39;];</code>，<code>a</code>、<code>b</code>两个模块的真值即为<code>modules[&#39;a&#39;]</code>、<code>modules[&#39;b&#39;]</code>。当模块为形式2时，参数有两个，参数2为模块函数。此时 <code>arguments[1] === arguments[arguments.length - 1]</code>，引用模块(mods)也指向了模块函数，所以要判断<code>mods</code>类型。<br>注册模块：每一个具名模块都需要注册到<code>modules</code>中，以备其他模块引用。当模块为匿名模块时，不需要注册，所以要判断<code>modName</code>类型。<br>注入参数，执行模块：对于不定数量的参数注入，显然是使用<code>apply</code>最简单。</p></blockquote><h2 id="4-实现-require"><a href="#4-实现-require" class="headerlink" title="4. 实现 require"></a>4. 实现 require</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> modules = &#123;&#125;;  <span class="comment">// 模块容器</span></div><div class="line"></div><div class="line">w.module = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">w.require = <span class="function"><span class="keyword">function</span> (<span class="params">namne</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> modules[namne];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>暂时不考虑异步加载、加载路径解析等各种情况了，直接从容器中取到模块…</p><h2 id="5-完整代码"><a href="#5-完整代码" class="headerlink" title="5. 完整代码"></a>5. 完整代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w, f</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> modules = &#123;&#125;;   <span class="comment">// 模块容器</span></div><div class="line"></div><div class="line">    w.module = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> modName = <span class="built_in">arguments</span>[<span class="number">0</span>],     <span class="comment">// 模块名 String</span></div><div class="line">            mods = <span class="built_in">arguments</span>[<span class="number">1</span>],        <span class="comment">// 引用模块 Array</span></div><div class="line">            context = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>];      <span class="comment">// 模块函数 Function</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(modName <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">            mods = modName;</div><div class="line">            modName = f;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> args = [];</div><div class="line">        <span class="keyword">if</span>(mods <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mods.length; i++) &#123;</div><div class="line">                args.push(modules[mods[i]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> modName === <span class="string">'string'</span>) &#123;</div><div class="line">            modules[modName] = &#123;&#125;;</div><div class="line">            args.push(modules[modName]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        context.apply(<span class="keyword">this</span>, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    w.require = <span class="function"><span class="keyword">function</span> (<span class="params">namne</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> modules[namne];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>));</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 形式1：匿名模块，只有一个注入exports参数的函数体</span></div><div class="line"><span class="built_in">module</span>(<span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">'m1'</span>).msg);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 形式2：具名模块，包含一个模块名称参数和一个注入exports参数的函数体</span></div><div class="line"><span class="built_in">module</span>(<span class="string">'m1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</div><div class="line">    exports.msg = <span class="string">'hello'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 形式3：具名模块，包含一个模块名称参数、依赖模块数组、和一个注入依赖模块、exports参数的函数体</span></div><div class="line"><span class="built_in">module</span>(<span class="string">'m2'</span>, [<span class="string">'m1'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">m1, exports</span>) </span>&#123;</div><div class="line">    exports.msg = m1.msg + <span class="string">"World"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 形式4：匿名模块，与形式3相比没有模块名称</span></div><div class="line"><span class="built_in">module</span>([<span class="string">'m2'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">m2, exports</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(m2.msg);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>执行以上代码会报错，代码是自上而下同步执行的，形式1运行阶段模块<code>m1</code>还未定义。<br>把形式1放到形式4之后执行，输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">helloWorld</div><div class="line">hello</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      实现一个简单的模块加载器,javascript module loader
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="模块化" scheme="http://imys.net/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>gulp改善工作流记录</title>
    <link href="http://imys.net/20151022/use-gulp-front-building-exp.html"/>
    <id>http://imys.net/20151022/use-gulp-front-building-exp.html</id>
    <published>2015-10-22T02:37:53.000Z</published>
    <updated>2016-11-12T19:29:42.994Z</updated>
    
    <content type="html"><![CDATA[<p>上个月向领导提出的<a href="../20150908/gulp-ejs-module.html">使用gulp+ejs模块化html</a>最近得到了实施，大概记录下此次改造工作。</p><a id="more"></a><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>html
  -dest
    --Folder
    --index.html
    --...
  -src
    --Folder
    --Modules
      ---header.html
      ---...
    --index.html
    --...
static
  -dest
    --css
    --js
    --img
  -src
    --css
    --js
    --img
    --less
node_modules
gulpfile.js
package.json
</code></pre><h2 id="gulp模块"><a href="#gulp模块" class="headerlink" title="gulp模块"></a>gulp模块</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),  </div><div class="line">    less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),  </div><div class="line">    minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),    </div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),   </div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),   </div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),   </div><div class="line">    pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>),    </div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),    </div><div class="line">    notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),    </div><div class="line">    browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>), </div><div class="line">    ejs = <span class="built_in">require</span>(<span class="string">'gulp-ejs'</span>),          </div><div class="line">    changed = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>),  </div><div class="line">    replace = <span class="built_in">require</span>(<span class="string">'gulp-replace'</span>);</div></pre></td></tr></table></figure><p><code>html</code>选择了<code>ejs</code>来管理，<code>css</code>预处理选择了<code>less</code>。<br>简单、实用！</p><p>对于浏览器同步工具，本来使用的是<code>live-reload</code>，在初次使用中感觉不是很顺畅，之后换成了<code>browserSync</code>。<br>browserSync 除了文件更改实时刷新浏览器外，还有多设备同步功能，通过可视化控制台可以实时测试移动端代码。<br>对比而言，live-reload 依赖 Chrome 及 LiveReload 插件，应该是借助 Chrome 的某种开放接口实现的。<br>而 browserSync 是基于虚拟服务器的，所有可以实现多设备的控制。</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>编写html、less、js =&gt; 浏览器访问（URL对应html文件目录） =&gt; 浏览器显示编译后的html、css、js =&gt; html已经过模板合并，<code>include</code>等关键字是没有的 =&gt; css是less编译生成的，页面从始至终引用的都是 css 文件，不过会有一个对应的同名 less 文件。</p><p>改造进行阶段也没遇到什么太大问题，能遇到的问题也都能在github中找到答案。<br>不过还是要根据各自团队的项目情况因地制宜，合理配置。</p>]]></content>
    
    <summary type="html">
    
      gulp改善工作流记录
    
    </summary>
    
    
      <category term="Gulp" scheme="http://imys.net/tags/Gulp/"/>
    
      <category term="前端构建" scheme="http://imys.net/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Node.js命令行玩法</title>
    <link href="http://imys.net/20150919/nodejs-shell.html"/>
    <id>http://imys.net/20150919/nodejs-shell.html</id>
    <published>2015-09-19T12:20:13.000Z</published>
    <updated>2016-11-12T19:24:07.331Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Node.js</strong> 的热门之处就在于其命令行开发能力。<br>一个在 <code>shell</code> 下编码的程序员绝对要比在常规编辑器上编码的程序员酷！</p><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ol><li>win10 x64</li><li>node.js</li><li>npm</li></ol><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>一切从 <code>hello world</code> 开始！</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div></pre></td></tr></table></figure><p>普通的 node.js 脚本需要使用<code>node 文件名</code>的形式执行，在脚本首行加上<code>#!/usr/bin/env node</code>可以在<code>linux</code>环境中指定脚本的解释程序。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">&gt; hello.js</div><div class="line">hello world</div></pre></td></tr></table></figure><h2 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h2><p>以上的做法只能在特定的目录下执行该脚本文件，如果想做到如<code>node</code>般的无处不在，需要借用<code>npm</code>了。</p><p>在当前目录新建<code>package.json</code>，如下编码：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"hello"</span>,</div><div class="line">    <span class="attr">"bin"</span>: &#123;</div><div class="line">        <span class="attr">"hello"</span>: <span class="string">"hello.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后执行<code>npm link</code>命令，将会把以上配置注册到全局，这样在任何一个目录都可以调用<code>hello</code>输出<code>hello world</code>了。</p><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>光有特定命令名也只能执行一项特定任务，现在该实现<strong>多态</strong>了。</p><p>写一个小工具吧。<br>需求很简单，执行<code>run name</code>打开对应的应用程序。</p><p>新建文件<code>config.json</code>、<code>run.js</code>，<code>config.json</code>用于配置应用程序的路径。</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"qq"</span>: <span class="string">"D:\\qq\\Bin\\QQ.exe"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>先拿企鹅开刀，在<code>config.json</code>文件中配置<code>qq.exe</code>的绝对路径。<br>另外别忘了在<code>package.json</code>中添加<code>run.js</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name = process.argv[<span class="number">2</span>],</div><div class="line">    exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec,</div><div class="line">    fs   = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> cfg = <span class="built_in">JSON</span>.parse(fs.readFileSync(__dirname + <span class="string">'/config.json'</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> child = exec(<span class="string">'start '</span> + cfg[name], <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用系统变量<code>process.argv</code>获取输入参数，引用<code>fs</code>模块用于读取配置文件，<code>child_process</code>模块用于执行系统命令。</p><p>可为什么参数索引是 <strong>2</strong> 呢？难道命令行索引从 <strong>1</strong> 开始吗？</p><blockquote><p>其实是因为我们实际执行的命令还是<code>node run name</code>，<code>node</code>索引为 <strong>0</strong>。</p></blockquote><p>开始测试。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">run qq</div></pre></td></tr></table></figure><p>企鹅登录窗口应声而出。<br>如果还需要其他应用程序的命令行启动可以在<code>config.json</code>中添加新的配置项。</p><p>以上代码使用的是 node.js 原生的命令行模块，还有一些更方便的包装模块，参考：<a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html" target="_blank" rel="external">阮一峰 - Node.js 命令行程序开发教程</a>。</p>]]></content>
    
    <summary type="html">
    
      Node.js命令行开发
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://imys.net/tags/Nodejs/"/>
    
      <category term="cmd" scheme="http://imys.net/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>Html5调用手机相机并压缩、上传</title>
    <link href="http://imys.net/20150916/webapp-input-use-camera.html"/>
    <id>http://imys.net/20150916/webapp-input-use-camera.html</id>
    <published>2015-09-16T08:21:28.000Z</published>
    <updated>2016-11-12T19:38:12.506Z</updated>
    
    <content type="html"><![CDATA[<p>近日刚做的一个功能，要在app里使用内嵌页面进行图像的上传。<br>从功能上看，原生的实现应该是最好的。毕竟页面上所有的东西都隔着一个浏览器，所有的实现都要依赖浏览器提供的接口，不同的浏览器对接口的实现又有差异……到最后又会陷入兼容性的大坑!<br>吐槽归吐槽，但是折腾的劲头不能丢！</p><a id="more"></a><h2 id="使用input-file-camera-属性调用相机"><a href="#使用input-file-camera-属性调用相机" class="headerlink" title="使用input file[camera]属性调用相机"></a>使用input file[camera]属性调用相机</h2><p>简直<strong>So easy！</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*;"</span> <span class="attr">capture</span>=<span class="string">"camera"</span> &gt;</span></div></pre></td></tr></table></figure><p>只需要这么一条简单的代码，在手机浏览器点击就可以打开相机了。</p><p><code>capture</code>是什么？其实就是对打开方式的设置。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- capture=camcorder，调用手机摄像功能 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"video/*"</span> <span class="attr">capture</span>=<span class="string">"camcorder"</span> &gt;</span> </div><div class="line"><span class="comment">&lt;!-- capture=microphone，调用手机录音功能 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"audio/*"</span> <span class="attr">capture</span>=<span class="string">"microphone"</span> &gt;</span></div></pre></td></tr></table></figure><p>魅族MX5测试结果：</p><ul><li>谷歌浏览器可以打开相机和摄像功能，其他方式均为相机、图库、文件管理器等混合选择项。</li><li>自带浏览器打开均为文件管理器。</li></ul><p>由此说明此属性兼容性还是个问题。不过这并不能阻止我继续折腾下去！</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>在如今这个手机普遍千万像素的时代，一张照片动辄5M的大小。作为一个良心的开发者，我们是要为用户的流量负责的。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'file'</span>).addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line"></div><div class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        compress(<span class="keyword">this</span>.result);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]);</div><div class="line"></div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure><p>不管文件域是用何种方式打开的，都可以在 <code>change</code> 事件中获取到选择的文件或拍摄的照片。</p><p>创建一个<code>FileReader</code>对象，我们需要调用<code>readAsDataURL</code>把文件转换为<code>base64</code>图像编码，如<code>data:image/jpeg;base64……</code>这种格式。<br><code>onload</code>是一个异步回调，当文件读取完执行该方法内代码。<code>this.result</code>记录读取结果，如果读取失败，该值为<code>null</code>。在这里进行图片压缩的具体操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> compress = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image(),</div><div class="line">        maxH = <span class="number">160</span>;</div><div class="line"></div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cvs = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>),</div><div class="line">            ctx = cvs.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(img.height &gt; maxH) &#123;</div><div class="line">            img.width *= maxH / img.height;</div><div class="line">            img.height = maxH;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        cvs.width = img.width;</div><div class="line">        cvs.height = img.height;</div><div class="line"></div><div class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, cvs.width, cvs.height);</div><div class="line">        ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> dataUrl = cvs.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.6</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 上传略</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    img.src = res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建一个<code>Image</code>对象，给<code>src</code>属性赋值为读取结果，同样在<code>onload</code>异步回调中编写处理图片的代码。<br>这里就要开始使用<code>canvas</code>进行图片压缩了。</p><p>首先是尺寸按比例缩放，然后把图片绘到画布上，最后调用<code>toDataURL</code>方法压缩图像质量。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">context.toDataURL(<span class="string">'MIME类型'</span>, 图像质量<span class="number">0</span><span class="number">-1</span>);  <span class="comment">// 该方法返回base64图像编码</span></div></pre></td></tr></table></figure><p>代码里省略了一些校监操作，如文件类型约束和文件大小判断（小于一定值可以不压缩）。<br>最后就是把数据发送到后端的操作，这里就不说了。</p><h2 id="Html5调用摄像头"><a href="#Html5调用摄像头" class="headerlink" title="Html5调用摄像头"></a>Html5调用摄像头</h2><p>通过以上的代码已经可以实现调用手机相机拍照、压缩、上传这一整套流程了。<br>不过在折腾的过程中也发现了一种调用摄像头的方法。注意，是<code>摄像头</code>！使用input调用的是相机。其中的差别就是摄像头是只捕获画面，相机还包括原生的一些拍照、设置等控件。</p><p>通过对摄像头的调用可以做很多有趣的事，比如拍照美化、滤镜等。可以说实现一个第三方相机是没问题的。<br>之前下载过一款安卓相机APP，不到100K的大小，可以实现拍照的一些风格化，也许就是Html5实现的呢。</p><p>需要用到的是 <strong>getUserMedia API</strong>，具体的实现这里就不贴了。</p>]]></content>
    
    <summary type="html">
    
      webapp,html5,input,file调用相机，摄像头，压缩，上传
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="Webapp" scheme="http://imys.net/tags/Webapp/"/>
    
      <category term="File" scheme="http://imys.net/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>使用gulp+ejs模块化html</title>
    <link href="http://imys.net/20150908/gulp-ejs-module.html"/>
    <id>http://imys.net/20150908/gulp-ejs-module.html</id>
    <published>2015-09-08T10:04:47.000Z</published>
    <updated>2016-11-12T19:13:01.627Z</updated>
    
    <content type="html"><![CDATA[<p>在静态页面目录中，同子目录下的页面往往有很多通用的模块。<br>平常的编码一般是通用的代码直接复制到各个页面，样式写成公用，然后在各个需要的页面引用。<br>而一个产品在实地运行中往往要经历无数次的迭代，于是页面文档结构和样式也在不断的变化。<br>独立性的页面比较轻松，一个页面修改就好了，而一些公用的页面模块往往需要在各个页面逐个修改。<br>这显然是一种极其枯燥的重复性动作！</p><p>在此之前我用 <code>C#</code> 写了一个文件批量替换的工具，用于批量替换某个目录下的某个模块代码。<br>虽然效率提高了一些，但是从方法学角度看绝对不是最好的。</p><p>很久之前就想过使用前端模块拼装 html。<br>以 <code>ejs</code> 为例，则需要在页面中引入模版解析文件 <code>ejs.js</code>，页面中还需要写一些 ejs 相关的配置代码。而这些东西对于后端套用页面来说是无用的，可能还会造成一些混乱。<br>还有一种引用方式是使用 <code>nodeJs</code> 调用 ejs 去解析模版文件，这样在预览静态页面时则需要建立 node 服务器。而当前团队中并不是每个人都装有 node 环境。</p><p>最近工作闲暇了又想到这个问题，其实要解决的最根本问题就是：</p><blockquote><p>模块化开发页面，开发完成后可以一条指令合并成可直接预览的静态页面。</p></blockquote><p>我早该想到 <code>gulp</code> 了，既然 gulp 是一个基于流的前端构建工具，那么对于这个问题应该是可以解决的。</p><a id="more"></a><p><strong>起初我是这样想的：</strong></p><ol><li>模板中使用相对路径标记模块引用</li><li>读取文件把这些标记还原为路径</li><li>读取这些路径的文件内容插入到模板中</li><li>生成到对应目标目录</li></ol><p>这样做等于实现了一套模版解析合并的过程，并不困难。</p><p>在探索的过程中，我发现了一个基于 gulp 和 ejs 的插件 <code>gulp-ejs</code>，并按照示例实验后达成了我的想法。<br>随后新的问题便来了。</p><p>每个页面有着不同标题和样式、脚本引用，虽然可以在执行 gulp 任务时指定参数，但是不可能每个页面的参数配置都一样。<br>难道要为每个页面编写一个任务？你会甘心用这么傻的办法吗？<br>从设计模式角度讲，这个任务应该是唯一的，但是可以根据一些参数配置达到多态！</p><p><strong>之后我改造了 <code>gulp-ejs</code>：</strong></p><ol><li>在模板文件同级目录下添加同名的 <code>.json</code> 配置文件</li><li>在其对模板渲染时获取模板路径，再转换后缀为 json，这样就匹配到了对应的配置文件</li><li>解析 json 文件为 json 对象，作为参数传入 ejs 中，这样模版内就可以访问配置文件的数据了</li><li>之后便可以根据配置文件随心所欲的插入当前页面的特定项目</li></ol><p>这样标题、样式、脚本，神马都解决了！</p><p>就在刚才我又想到了另外一个主意。</p><p>如果你觉得每个模板对应一个 json 文件麻烦的话，可以只建立一个配置文件。<br>假如你有 index 、product 、service 三个模版，那么你的配置文件可以这样写：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"index"</span>: &#123;</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"首页"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"product"</span>: &#123;</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"产品页"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"service"</span>: &#123;</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"服务页"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么在 index 模版中输出 <code>title</code>，就可以写成 <code>&lt;%=index.title %&gt;</code> 这种格式。<br>长久下去配置文件一定会越来越大，而且每个模版中都被注入了整站的配置项，真的好吗？</p><ul><li>为了使每个页面只注入当前页面的数据，可以在模版渲染前拿到模版名称，如 index ；</li><li>向 ejs 传入的数据就变成了 <code>config[&quot;index&quot;]</code>；</li><li>这样在每个模版中依然可以直接用 <code>&lt;%=title %&gt;</code> 这种格式调用了</li></ul><p>不管采取哪种办法，最终的结果是一致的。哪怕是每个模版注入整站配置的做法，也只是在 gulp 任务阶段执行效率低点，并不会上升到影响性能的高度。<br>不过，我还是倾向于一个页面对应一个配置文件的办法，谁让我是处女座。</p><p>以下是对该方案的简单描述。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>├ templates     模版
├──── _partial      模块
├──────── header.ejs   
├──────── footer.ejs
├──────── nav.ejs
├──────── left.ejs
├──────── right.ejs
├──── index.ejs    布局页
├──── index.json    布局页配置文件
├ html      页面
├──── index.html    生成的静态页面
├ node_modules  node模块
├ gulpfile.js   gulp
</code></pre><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>模板编码，即 <code>templates/</code> 目录，一个布局页对应一个同名静态页面，按需引入或编写新的页面模块。在这个阶段可以使用express建立node服务器进行实时页面预览。</li><li>编写配置文件，使用通用的 <code>json</code> 格式，一个页面对应一个同名的配置文件。目前预想的配置信息有： <code>title：页面标题</code> 、<code>styles：依赖的样式文件路径</code>、 <code>scripts：依赖的脚本文件路径</code> ，随时可以根据实际情况添加新的配置。</li><li>执行 <code>gulp</code> 任务，生成页面到 <code>html/</code> 目录。</li></ol><h2 id="未模块化页面的处理"><a href="#未模块化页面的处理" class="headerlink" title="未模块化页面的处理"></a>未模块化页面的处理</h2><p>之前未模块化的静态页面，保持原样即可，因为在这个流程中与之前的页面是没有任何冲突关系的。<br>一些频繁修改的页面，可以按需抽取出模块，进行页面分割。</p><h2 id="完整Demo"><a href="#完整Demo" class="headerlink" title="完整Demo"></a>完整Demo</h2><blockquote><p><a href="https://github.com/yscoder/gulp-ejs-demo" target="_blank" rel="external">https://github.com/yscoder/gulp-ejs-demo</a></p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>可能我所做的这些对于国内一些优秀的前端团队来说很土，但是适合的才是最好的！<br>目前我所在的公司前端的职能还仅限于页面编码、交互实现和一些通用插件开发，起点真的很低。<br>不过，这也让我有了更多的机会去改革和实践新技术。</p>]]></content>
    
    <summary type="html">
    
      使用gulp+ejs模块化html
    
    </summary>
    
    
      <category term="Gulp" scheme="http://imys.net/tags/Gulp/"/>
    
      <category term="Ejs" scheme="http://imys.net/tags/Ejs/"/>
    
      <category term="模块化" scheme="http://imys.net/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端文字的截断处理</title>
    <link href="http://imys.net/20150906/text-truncation.html"/>
    <id>http://imys.net/20150906/text-truncation.html</id>
    <published>2015-09-06T09:37:32.000Z</published>
    <updated>2016-12-27T12:42:37.061Z</updated>
    
    <content type="html"><![CDATA[<p>关于前端页面的文字溢出截断的招数已经很常见了。<br>通常的实现有，前端css控制、后端字数输出控制或者前端js字数处理等。</p><a id="more"></a><h2 id="单行文字"><a href="#单行文字" class="headerlink" title="单行文字"></a>单行文字</h2><p>单行文字的溢出处理很简单，我通常是使用css来控制，在文字末尾加上<code>...</code>。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.ellipsis</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>给需要文字截断的节点增加一个这样的基础类，然后设置该节点的宽。<br>同时注意给未来可能会出现溢出的节点也加上此类，再设置最大宽度<code>max-width</code>，因为很多奇葩用户的输入是你无法掌控的。 - -！</p><h2 id="多行文字"><a href="#多行文字" class="headerlink" title="多行文字"></a>多行文字</h2><p>我希望在一个的固定高度的容器中，内容超出后，最后一个文字显示<code>...</code>。</p><p>如法炮制给多行文字的容器添加<code>ellipsis</code>类后，你会发现的确是显示<code>...</code>，不过此时文字是一行的。<br>因为在该类中添加了属性<code>white-space</code>，用来定义一个段落如何换行。属性值<code>nowrap</code>：禁止文本换行，除非遇到<code>&lt;br&gt;</code>。</p><p>一番思考后，确定了一个方案。</p><ol><li>给固定高度的容器添加<code>overflow: hidden</code>；</li><li>给容器添加相对定位；</li><li>添加伪元素样式，<code>content:&#39;...&#39;</code>，绝对定位，然后位置定位在容器末尾。</li></ol><p>伪元素的兼容性为IE8，如果需要兼容IE7的可以使用标签代替。</p><h2 id="带显示全部的多行文字"><a href="#带显示全部的多行文字" class="headerlink" title="带显示全部的多行文字"></a>带显示全部的多行文字</h2><p>类似 QQ 空间、微信、微博那种。</p><iframe scrolling="no" width="100%" height="300" src="http://jsfiddle.net/imys/wymxhaek/3/embedded/html,css,result/light" frameborder="0" allowfullscreen></iframe><p>使用 2 个伪元素加 1 个 a 链接实现。<br>精妙之处在于使用伪元素遮挡一行文字，让 a 链接位于伪元素之上显示。</p>]]></content>
    
    <summary type="html">
    
      前端文字的截断处理
    
    </summary>
    
    
      <category term="Html" scheme="http://imys.net/tags/Html/"/>
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="Ellipsis" scheme="http://imys.net/tags/Ellipsis/"/>
    
  </entry>
  
  <entry>
    <title>html5上传进度实现</title>
    <link href="http://imys.net/20150902/h5-upload-progress.html"/>
    <id>http://imys.net/20150902/h5-upload-progress.html</id>
    <published>2015-09-02T08:26:13.000Z</published>
    <updated>2016-11-12T19:13:08.459Z</updated>
    
    <content type="html"><![CDATA[<p>博客一个月没更新了，着实是有点忙。<br>目前公司新版上线也到最后一波了，部分人员转战了一个新的APP产品的开发。<br>主体还是原生APP，也会有部分页面需要嵌入WEB页面，我也有幸作为唯一的前端人员加入了。</p><p>不过这次讲的内容跟这个APP没有半毛钱关系，是公司内部工作系统的一个扫码上传功能。<br>好吧，我参与的确实有点多！</p><p>要实现实时的进度展示，需要以下几个关键：</p><ol><li>异步上传</li><li>文件总大小</li><li>文件已上传大小</li></ol><a id="more"></a><h2 id="基本HTML结构"><a href="#基本HTML结构" class="headerlink" title="基本HTML结构"></a>基本HTML结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> &gt;</span></div></pre></td></tr></table></figure><h2 id="异步上传"><a href="#异步上传" class="headerlink" title="异步上传"></a>异步上传</h2><p>XHR是必须的，此外还需要一个<code>FormData</code>对象。</p><p>FormData，译为表单数据，也就是一个保存表单数据的容器。<br>可以利用这个对象写入键值对的数据项，再用xhr发送到处理接口。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</div><div class="line">data.append(<span class="string">'id'</span>, <span class="number">9527</span>);</div><div class="line">data.append(<span class="string">'name'</span>, <span class="string">'张三'</span>);</div><div class="line">data.append(<span class="string">'sex'</span>, <span class="string">'男'</span>);</div></pre></td></tr></table></figure><p>不仅可以像以上简单的添加值类型，文件类型也不例外。<br>这样就可以直接使用xhr的send方法发送到后端。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#upload'</span>).addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>],</div><div class="line">        data = <span class="keyword">new</span> FormData();</div><div class="line">        </div><div class="line">    data.append(<span class="string">'photo'</span>, file);</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="comment">// Success or Error</span></div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    xhr.open(<span class="string">'post'</span>, <span class="string">'/doLoad'</span>);</div><div class="line">    xhr.send(data);</div><div class="line">    </div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="上传进度"><a href="#上传进度" class="headerlink" title="上传进度"></a>上传进度</h2><p>与FormData相对应的上传状态监听事件</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">xhr.upload.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="comment">// do...</span></div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure><p>该事件可以通过event对象获取上传状态。</p><ol><li>event.loaded: 已上传大小</li><li>event.total: 文件总大小</li></ol><p>这样计算进度就不在话下了，具体实现也就不废话了，众大侠各展神通吧！</p>]]></content>
    
    <summary type="html">
    
      html5上传进度实现
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="文件上传" scheme="http://imys.net/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Require.js入门--用面向对象语言来理解js模块化</title>
    <link href="http://imys.net/20150807/js-module-requirejs.html"/>
    <id>http://imys.net/20150807/js-module-requirejs.html</id>
    <published>2015-08-07T02:33:25.000Z</published>
    <updated>2016-11-12T19:21:48.683Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个曾经的后端开发者，当我第一眼看到一些javascript模块化的代码案例时，我就想到了java、c#这些天生的模块化语言。<br>今天就拿 require.js 来捋一捋这其中的异同。<br><a id="more"></a></p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>一个基本的javascript模块，应该是隐藏私有成员及方法，暴漏外部调用的所需的接口。<br>常见的写法有：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> prop = <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> tool = <span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</div><div class="line">  </div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  <span class="comment">//...</span></div><div class="line">  </div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      tool(prop);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>在以上代码中，外部环境无法读取和修改变量<code>prop</code>和方法<code>tool</code>，但是该模块返回了一个公开的对象，并有一个可执行的方法<code>fn</code>。</p><p>这不就相当于面向对象编程中的封装吗？<br>在以上代码中使用了闭包来隔离变量作用域，而像java中可以使用<code>public</code>、<code>private</code>这样的关键字来定义成员。</p><h2 id="require-js入门"><a href="#require-js入门" class="headerlink" title="require.js入门"></a>require.js入门</h2><p>刚才通过一段简单的代码理解了模块化的作用，下面来看看require.js是如何定义和调用模块的。</p><h3 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"main"</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/require.js/2.1.20/require.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>在页面中插入了require.js文件，使用<code>data-main</code>指定主模块或者叫入口模块，我理解为java中的<code>main()</code>方法。<br><code>data-main</code>属性可以写模块文件的路径，在require.js中默认的后缀<code>.js</code>可省略。</p><h3 id="入口模块"><a href="#入口模块" class="headerlink" title="入口模块"></a>入口模块</h3><p>如果我们的页面非常简单的话，在入口模块中可以写我们的js代码。<br>比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello require.js!'</span>);</div></pre></td></tr></table></figure><p>此时刷新页面就会直接在控制台输出<code>Hello require.js!</code>。<br>当然如果是这样的话，也就没必要用require.js了。</p><p>正常的写法一般是这样的：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">module1, module2</span>)</span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>第一个参数数组表示依赖的模块名，然后在其后的回调函数中就可以使用这些模块。</p><h3 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h3><p>当然，不可能凭空使用模块，按照常规肯定需要某个地方指定模块加载路径吧。</p><p>在主模块头部可作以下配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  <span class="attr">paths</span>: &#123;</div><div class="line">    <span class="string">'module1'</span>: <span class="string">'js/module1'</span>,</div><div class="line">    <span class="string">'module2'</span>: <span class="string">'js/module2'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>如果所有模块都在同一个目录则可以配置<code>baseUrl</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  <span class="attr">baseUrl</span>: <span class="string">'js'</span>,</div><div class="line">  <span class="attr">paths</span>: &#123;</div><div class="line">    <span class="string">'module1'</span>: <span class="string">'module1'</span>,</div><div class="line">    <span class="string">'module2'</span>: <span class="string">'module2'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>也可以直接使用URL配置远程文件链接。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">  <span class="attr">paths</span>: &#123;</div><div class="line">    <span class="string">'jquery'</span>: <span class="string">'http://cdn.bootcss.com/jquery/2.1.4/jquery'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>与java中的导包的作用类似，<code>import xxx.xxx.xxx;</code>。</p><h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><p>目前常见的的js模块规范有<code>CMD</code>、<code>AMD</code>、<code>CommonJS</code>以及兼容性写法的<code>UMD</code>，require.js是实现了AMD规范的js库。</p><p>定义一个模块<code>tool</code>，如下写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> msg = <span class="string">'The Hello at tool.'</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(msg);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>如果该模块依赖其他模块，如jquery，就需要定义模块依赖。如入口模块的定义一样，第一个参数写成模块名数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define(<span class="string">'[jquery]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> msg = <span class="string">'The Hello at tool.'</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(msg);</div><div class="line">        <span class="built_in">console</span>.log($ === <span class="literal">undefined</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>依赖的模块依然需要在入口模块中配置加载路径，但不是必须要在入口模块中注入。</p><p>在这个模块中我们发现了这段代码与一开始的基本模块写法类似，一样是只暴漏必须的调用接口。</p><p>现在可以在入口模块中调用这个模块：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'tool'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">t</span>)</span>&#123;</div><div class="line">  t.hello();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>如果jquery加载正确的话，控制台会输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">The Hello at tool.</div><div class="line">false</div></pre></td></tr></table></figure><p>好了，现在可以去更新简历在技能上加上require.js了！</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>各种模块化规范殊途同归，都是为了解决同样的问题。理解了其中一种，都可以轻松掌握其他规范的写法。<br>未来我们还有天然支持类和模块的ES6，期待吧？</p><p>我一直认为好的开发人员不应该局限于一个技术栈，因为这样会阻碍你对一个问题的全面认知和对新知识的快速领会。</p>]]></content>
    
    <summary type="html">
    
      require.js入门，用面向对象语言来理解js模块化
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="模块化" scheme="http://imys.net/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="Require.js" scheme="http://imys.net/tags/Require-js/"/>
    
  </entry>
  
  <entry>
    <title>canvas实践--图表组件仪表盘、雷达图</title>
    <link href="http://imys.net/20150731/canvas-chart-demo.html"/>
    <id>http://imys.net/20150731/canvas-chart-demo.html</id>
    <published>2015-07-31T01:14:34.000Z</published>
    <updated>2017-08-20T13:57:23.703Z</updated>
    
    <content type="html"><![CDATA[<p>大数据概念的到来，图表的运用越来越广泛，不搞搞数据，都不好意思说是互联网公司。</p><p>最近公司又有一块图表展示的栏目要做，由于之前的图表栏目都是我完成的，这次不出意料又落在我身上。<br>之前的图表展示我用的是<code>echarts</code>，按格式封装数据调用就行了。<br>这次领导突然对图表样式有了一些要求，虽然<code>echarts</code>的配置够OP，也不可能完完全全跟设计图搞成一样的。</p><p>暨于上次的<code>canvas</code>的使用，我决定自己动手实现所需要的图表组件。<br>这是最终的完成样式：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/canvas-chart.jpg" alt="canvas实践--图表组件仪表盘、雷达图"></div><div class="image-caption">canvas实践--图表组件仪表盘、雷达图</div></figure><a id="more"></a><p>首先根据效果图来划分出各个图层，以及图层层级位置。<br>然后按照层级关系由下向上依次绘制。</p><p>整个编码过程还是很顺利的，一些问题都得到了很好的解决。</p><p><a href="https://github.com/yscoder/canvas-chart" target="_blank" rel="external">查看github</a></p><h2 id="踩过的坎"><a href="#踩过的坎" class="headerlink" title="踩过的坎"></a>踩过的坎</h2><h3 id="确定圆上任意一点的位置"><a href="#确定圆上任意一点的位置" class="headerlink" title="确定圆上任意一点的位置"></a>确定圆上任意一点的位置</h3><p>此次绘制的图表分别是仪表盘和雷达图，很多图形或点的位置都需要进行一定的计算。比如仪表盘上的指针坐标、雷达图各个角的位置等。<br>而两个图表都是基于圆心角绘制的图形，所以可以使用 <strong>圆的参数方程</strong> 来轻松解决。</p><p><em>x = cx + r &times; cos(π &times; e)</em><br><em>y = cy + r &times; sin(π &times; e)</em></p><ol><li>cx: 圆心点横坐标</li><li>r: 半径</li><li>e: 结束角</li><li>cy: 圆心点纵坐标</li></ol><h3 id="绘制渐变色圆环"><a href="#绘制渐变色圆环" class="headerlink" title="绘制渐变色圆环"></a>绘制渐变色圆环</h3><p>原本看到仪表盘样式图时，预想的这个渐变圆环需要一节一节用不同的颜色画上去的。<br>实际的实现要简单太多了！可以直接使用绘制渐变色的方法。<br><code>canvas</code>支持线性渐变和放射形渐变，这里使用的是线性渐变。</p><table><thead><tr><th>方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>createLinearGradient(x0, y0, x1, y1)</td><td style="text-align:center">创建线性渐变，参数分别表示起始点x坐标和y坐标、结束点x坐标和y坐标。</td></tr><tr><td>addColorStop(stop, color)</td><td style="text-align:center">规定渐变对象中的颜色和停止位置，stop表示一个颜色的渐变结束位置0-1之间，color表示渐变色。</td></tr></tbody></table><p>具体的使用可以<a href="http://www.runoob.com/tags/canvas-addcolorstop.html" target="_blank" rel="external">点这里</a>。</p><p>顺便说说如何根据设计图确定渐变的位置和颜色。</p><ol><li>用ps打开美工给的psd文件；</li><li>找到渐变的图层样式设置；</li><li>照着上面的设置来就行了。</li></ol><h3 id="绘制虚线"><a href="#绘制虚线" class="headerlink" title="绘制虚线"></a>绘制虚线</h3><p>HTML5规范中已有绘制虚线的方法，支持的浏览器有Chrome, Safari, IE 11 和 Opera。</p><p><code>context.setLineDash()</code></p><p><a href="http://www.rgraph.net/blog/2013/january/html5-canvas-dashed-lines.html" target="_blank" rel="external">使用参考</a></p><h3 id="开场动画"><a href="#开场动画" class="headerlink" title="开场动画"></a>开场动画</h3><p><code>canvas</code>本身没有这方面的支持，需要使用定时器来进行一定时间的重绘来实现。</p><p>整个逻辑大概是这样的：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1. 设置最小初始值，获取最终值</span></div><div class="line"><span class="keyword">var</span> value = <span class="number">0</span>,</div><div class="line">    endValue = <span class="number">668</span>;</div><div class="line"></div><div class="line"><span class="comment">// 2. 启动定时器根据value动态绘制</span></div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 3. value累加，如果小于最终值就加一定值，否则等于最终值</span></div><div class="line">  value = value + <span class="number">1</span> &gt; endValue ? endValue :  value + <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 4. 清空画布</span></div><div class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">300</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 5. 根据value来进行此次绘制</span></div><div class="line">  <span class="comment">// 具体步骤省略...</span></div><div class="line"></div><div class="line">  <span class="comment">// 6. 判断value是否等于最终值来结束定时器</span></div><div class="line">  <span class="keyword">if</span>(value === endValue) &#123;</div><div class="line">    clearInterval(timer);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;, <span class="number">10</span>);</div></pre></td></tr></table></figure><p>可以通过调整累加数和定时器时间来控制动画速度。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>说起来这两个组件的封装和调用也是凭着<code>echarts</code>的使用经验来设定的，感谢百度前端大大们为此作出的贡献！</p>]]></content>
    
    <summary type="html">
    
      ‘canvas实现图表组件仪表盘、雷达图，html5’
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="Canvas" scheme="http://imys.net/tags/Canvas/"/>
    
      <category term="Chart" scheme="http://imys.net/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>Canvas初试--环形进度条的实现</title>
    <link href="http://imys.net/20150722/canvas-annulus-process.html"/>
    <id>http://imys.net/20150722/canvas-annulus-process.html</id>
    <published>2015-07-22T00:21:53.000Z</published>
    <updated>2017-08-20T13:57:23.703Z</updated>
    
    <content type="html"><![CDATA[<p>起初想这么做既是<code>css3</code>不易实现圆环，而且也有低版本兼容问题，也想借此机会学习下<code>canvas</code>(虽然最后还是难逃兼容性 &gt;_&lt; )。<br>做的过程中发现<code>canvas</code>跟<code>C#</code>中<code>gdi</code>绘图的步骤其实是差不多的。</p><p>先大概看了下<code>canvas</code>的相关API，有个可以画弧的方法<code>arc</code>。</p><p>通过合理的参数设置就能实现各种角度的圆弧，或者满圆。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/process.jpg" alt="Canvas初试--环形进度条的实现"></div><div class="image-caption">Canvas初试--环形进度条的实现</div></figure><a id="more"></a><h3 id="定义canvas"><a href="#定义canvas" class="headerlink" title="定义canvas"></a>定义canvas</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"process"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">data-process</span>=<span class="string">"85"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure><p>在基本的HTML5文档中添加一个<code>canvas</code>，定义了id宽高以及一个自定义属性表示要显示的进度值。</p><h3 id="画背景圆（灰色）"><a href="#画背景圆（灰色）" class="headerlink" title="画背景圆（灰色）"></a>画背景圆（灰色）</h3><p>首先了解下<code>arc</code>方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">context.arc(x,y,r,sAngle,eAngle,counterclockwise);</div></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>x</td><td style="text-align:center">圆的中心的 x 坐标。</td></tr><tr><td>y</td><td style="text-align:center">圆的中心的 y 坐标。</td></tr><tr><td>r</td><td style="text-align:center">圆的半径。</td></tr><tr><td>sAngle</td><td style="text-align:center">起始角，以弧度计（弧的圆形的三点钟位置是 0 度）。</td></tr><tr><td>eAngle</td><td style="text-align:center">结束角，以弧度计。</td></tr><tr><td>counterclockwise</td><td style="text-align:center">可选。规定应该逆时针还是顺时针绘图。False = 顺时针，true = 逆时针。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'process'</span>);</div><div class="line"><span class="keyword">var</span> process = c.getAttribute(<span class="string">'data-process'</span>);</div><div class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 画灰色的圆</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>);</div><div class="line">ctx.closePath();</div><div class="line">ctx.fillStyle = <span class="string">'#F6F6F6'</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure><p>以上代码中设置了圆心为<code>100,100</code>，正好的画布中心，圆半径为<code>80</code>，起始角度<code>0</code>表示<code>3</code>点钟方向，结束角度<code>Math.PI*2</code>其实是个满圆。<br>下一步会说明起始角度和结束角度具体算法。</p><h3 id="画进度环（橙色）"><a href="#画进度环（橙色）" class="headerlink" title="画进度环（橙色）"></a>画进度环（橙色）</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 画进度环</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="built_in">Math</span>.PI*<span class="number">1.5</span>, <span class="built_in">Math</span>.PI*(<span class="number">1.5</span>+<span class="number">2</span>*process/<span class="number">100</span>));</div><div class="line">ctx.closePath();</div><div class="line">ctx.fillStyle = <span class="string">'#FF9600'</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure><p>与上一步比较，多了一句<code>ctx.moveTo(x,y);</code>，意为把路径移动到画布中的指定点，如果没有这一步画出来的就不是弧了。<br>起始角度和结束角度也发生了变化，要想真正理解这两个角度，看下图。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/img_arc.gif" alt="Canvas初试--环形进度条的实现"></div><div class="image-caption">Canvas初试--环形进度条的实现</div></figure><p>3点钟方向用<code>0(0PI)</code>表示，6点钟是<code>0.5PI</code>，9点钟<code>1PI</code>，12点钟<code>1.5PI</code>，这样转一周回到3点钟即为<code>2PI</code>。<br>所以满圆可以用起始角度<code>0(0PI)</code>和结束角度<code>2PI</code>表示。</p><p>我们要画的圆环是需要从12点钟方向开始的，所以设置起始角度<code>1.5PI</code>。<br><code>process</code>在第一步中获取了要显示的进度<code>85</code>，即为<code>85/100</code>的圆，按原来<code>3</code>点钟开始，那么结束角度可以计算为<code>Math.PI*2*85/100</code>。<br>因为起始角度的变更，结束角度也要进行相应的变化，各在原来的基础上加了<code>1.5</code>的基数。</p><p><strong>起始角度</strong></p><p><em>0 -&gt; Math.PI &times; 0 -&gt; Math.PI &times; (0+1.5) -&gt; Math.PI &times; 1.5</em></p><p><strong>结束角度</strong></p><p><em>Math.PI &times; 2 -&gt; Math.PI &times; 2 &times; 85/100 -&gt; Math.PI &times; 2 &times; process/100 -&gt; Math.PI &times; (1.5+2 &times; process/100)</em></p><h3 id="画内填充圆（白色）"><a href="#画内填充圆（白色）" class="headerlink" title="画内填充圆（白色）"></a>画内填充圆（白色）</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 画内填充圆</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>);</div><div class="line">ctx.closePath();</div><div class="line">ctx.fillStyle = <span class="string">'#fff'</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure><p>半径减少20，进行内圆填充。</p><h3 id="填充显示文字（数字百分比）"><a href="#填充显示文字（数字百分比）" class="headerlink" title="填充显示文字（数字百分比）"></a>填充显示文字（数字百分比）</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 填充文字</span></div><div class="line">ctx.font = <span class="string">"bold 20pt Microsoft YaHei"</span>;</div><div class="line">ctx.fillStyle = <span class="string">'#333'</span>;</div><div class="line">ctx.textAlign = <span class="string">'center'</span>;</div><div class="line">ctx.textBaseline = <span class="string">'middle'</span>;</div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.fillText(process+<span class="string">'%'</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure><p>完成！</p><p>关于<code>canvas</code>在IE7、8下的兼容需要引用google的 <a href="https://github.com/arv/ExplorerCanvas" target="_blank" rel="external">excanvas.js</a> ，并把画图的相关的代码放到<code>window.onload</code>下。<br>不过这个文件有些大，40K+，压缩后17K。</p>]]></content>
    
    <summary type="html">
    
      Canvas实现环形进度条
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="Canvas" scheme="http://imys.net/tags/Canvas/"/>
    
      <category term="Process" scheme="http://imys.net/tags/Process/"/>
    
  </entry>
  
  <entry>
    <title>用户体验--WEB站点快捷键实现方案</title>
    <link href="http://imys.net/20150716/ue-shortcut-key.html"/>
    <id>http://imys.net/20150716/ue-shortcut-key.html</id>
    <published>2015-07-16T07:06:58.000Z</published>
    <updated>2016-11-12T19:29:03.906Z</updated>
    
    <content type="html"><![CDATA[<p>今天一大早就被头儿派了任务，让我整理一份可用快捷键操作的可行性方案。<br>不敢懈怠，遂出此文。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>对于WEB站点的多数操作也就是鼠标点点罢了，多数普通用户都是不愿意记那么多东西的，所以首先要考虑用户可接受性。</p><p>可以从以下几个方向考虑快捷键：</p><ol><li>通用、易用、习惯，常用功能使用，可快速接受，习惯性按键</li><li>方便、快捷，有效提升操作效率</li><li>专用，针对特殊功能、特殊人群和特殊需求</li></ol><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><h3 id="可用键"><a href="#可用键" class="headerlink" title="可用键"></a>可用键</h3><p>从语义化来讲，专门的键做专业的事。增加用户便利的前提下不能滥用一些系统和浏览器规划好的按键，如常用的复制和粘贴。<br>此类按键很多，这就导致可被我们利用的键很少。<br>最好的当然是设置1个键，不过在多数人习惯了office、QQ等软件后也习惯了一些快捷键操作。<br>所以可以从这些习惯中推导出一些可用键，2-3个组合键也未尝不可，还可以考虑双击。</p><p>单键：<code>Esc</code>,<code>Enter</code>,<code>Tab</code>,<code>Delete</code>,<code>Home</code>,方向键等。<br>组合键：<code>Ctrl+*</code>,<code>Ctrl+alt+*</code>。</p><h3 id="可入手项"><a href="#可入手项" class="headerlink" title="可入手项"></a>可入手项</h3><ol><li>全局或局部的<code>Tab</code>焦点切换，特别是表单；</li><li>任何搜索和提交的地方都应该绑定<code>Enter</code>键；</li><li>表单文本框点两下<code>backspace</code>全部删除；</li><li><code>Esc</code>取消输入焦点或取消操作；</li><li><code>Home</code>跳转个人中心或企业中心；</li><li><code>Del</code>删除选中的项；</li><li>主导航或重要栏目的访问键；</li><li>用户的自定义快捷键；</li><li>标签页切换；</li><li>一键注销登陆用户；</li><li>站内搜索;</li><li>一键返回顶部；</li><li>容我三思……</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在上述项都需要实施的前提下，整个实现必然是需要贯穿整站的。<br>会有全局的按键绑定，也会有针对性的某个功能或页面的实现。</p><p><strong>最后我的想法如下：</strong></p><ol><li>添加全局Hook模块，捕获按键并执行对应的操作。</li><li>全局性的绑定可以写到全局js文件中，特殊情况特殊对待。</li></ol>]]></content>
    
    <summary type="html">
    
      用户体验--WEB站点快捷键实现方案
    
    </summary>
    
    
      <category term="用户体验" scheme="http://imys.net/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="WEB" scheme="http://imys.net/tags/WEB/"/>
    
      <category term="快捷键" scheme="http://imys.net/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>造个轮子-基于jquery的文字提示插件jtip</title>
    <link href="http://imys.net/20150715/jqplugin-jtip.html"/>
    <id>http://imys.net/20150715/jqplugin-jtip.html</id>
    <published>2015-07-15T07:21:58.000Z</published>
    <updated>2017-08-20T13:57:23.811Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作不是很忙，看到站里一些纯图标的按钮还是使用的默认的<code>title</code>属性作文字提示，就造了这个轮子。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/jtip.jpg" alt="jtip"></div><div class="image-caption">jtip</div></figure><a id="more"></a><h2 id="jtip介绍"><a href="#jtip介绍" class="headerlink" title="jtip介绍"></a>jtip介绍</h2><h3 id="目前功能"><a href="#目前功能" class="headerlink" title="目前功能"></a>目前功能</h3><ol><li>位置自动居中对齐；</li><li>支持上下两个方向的的显示；</li><li>宽度自适应（超出长度限制自动换行）；</li><li>自定义显示场景（常态、警告、错误）；</li><li>可设置位置偏移量。</li></ol><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>IE7+(包括IE7)，等现代浏览器。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>可用于任何具有<code>title</code>属性的DOM元素。 如：</p><pre><code>&lt;a href=&quot;&quot; title=&quot;your title&quot;&gt;text&lt;/a&gt;

&lt;div title=&quot;your title&quot;&gt;&lt;/div&gt;
</code></pre><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><ul><li>jtip.css</li><li>jquery.js</li><li>jtip.js</li></ul><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre><code>$(selector).jtip({
  direction : &apos;top&apos;,      // 显示方向，可选值 top、bottom
  className: &apos;jtip&apos;,      // 可自定义CSS类名
  type: &apos;&apos;,               // 显示类型，可选值 &apos;&apos;(缺省为空)、warning、danger
  skewing: 0              // 位置偏移量
});
</code></pre><p>源码已上传github，<a href="https://github.com/yscoder/jtip" target="_blank" rel="external">https://github.com/yscoder/jtip</a> 。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p><strong>1.获取DOM节点基于文档的位置</strong></p><p>某些情况下<code>jQuery.offset()</code>在IE8下无法获取准确数值，可以使用原生DOM属性<code>offsetLeft</code>、<code>offsetTop</code>获取，IE7仍需使用<code>jQuery.offset()</code>获取。</p><p><strong>2.IE7容器宽度自适应</strong></p><p>单行内容设置<code>display:inline；</code>多行内容设置<code>min-width</code>和<code>overflow:visible</code>。</p>]]></content>
    
    <summary type="html">
    
      基于jquery的文字提示插件jtip
    
    </summary>
    
    
      <category term="jQuery插件" scheme="http://imys.net/tags/jQuery%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ie不显示iconfont字体图标</title>
    <link href="http://imys.net/20150709/ie-nodisplay-iconfont.html"/>
    <id>http://imys.net/20150709/ie-nodisplay-iconfont.html</id>
    <published>2015-07-09T02:12:33.000Z</published>
    <updated>2017-08-20T13:57:23.899Z</updated>
    
    <content type="html"><![CDATA[<p>昨天助理妹子收到客户的反馈，说浏览器不显示按钮了。经过远程查看，发现是iconfont(字体图标)不显示了。新版网站上线后整站使用iconfont替代了图片图标，一些小按钮都是直接使用的iconfont。<br>查看过后一时半会也是找不到原因，只是在脑海中一遍一遍的咒骂万恶的IE(客户使用的是IE8)！<br>因为接触不到真实客户环境的关系，暂时先让客户使用其他浏览器登陆。直到今天公司销售部门也反馈了类似的问题，可以去实地排查原因了。</p><a id="more"></a><ul><li>系统环境 win7 sp1 32位</li><li>浏览器 世界之窗极速版</li></ul><p>在浏览器极速模式下是没有问题的，切换到兼容模式后字体图标就失踪了！<br>所有双模式切换的浏览器的兼容模式归根结底还是调用的本机的IE，所以这还是IE的问题。</p><p>我们先是找到IE浏览器，因为是win7，所以最低也是IE8了。</p><ul><li>更改Internet选项里的配置，无果！</li><li>测试了链接字体图标库文件，也是正常的！</li><li>Win7视觉效果全开也没用！</li><li>F12添加行内字体样式也没作用！</li></ul><p>最后得出结论，这货就是根本<strong>不识别字体样式</strong>啊！<br>这货打开的任何一个网页都是宋体，难道字体库只有宋体吗？可为什么极速模式字体就正常呢？<br><code>win+R -&gt; fonts</code> 发现所有系统自带字体都安安静静的躺着呢。</p><p>再次打开 Internet选项 -&gt; 外观 -&gt; 字体 -&gt; 微软雅黑，所有页面字体都变成微软雅黑了。<br>然并卵！</p><p>不经意间 Internet选项 -&gt; 外观 -&gt; 辅助功能…我滴个神！我看到什么了？</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/ie-nodisplay-iconfont.jpg" alt="ie不显示iconfont字体图标"></div><div class="image-caption">ie不显示iconfont字体图标</div></figure><p>原来是把网页字体忽略了！<br>也是第一次知道IE还是这些设置选项，还可以定义用户样式。<br>这次也算是长见识了。</p>]]></content>
    
    <summary type="html">
    
      ie不显示iconfont,ie8不显示字体图标
    
    </summary>
    
    
      <category term="Html" scheme="http://imys.net/tags/Html/"/>
    
      <category term="iconfont" scheme="http://imys.net/tags/iconfont/"/>
    
  </entry>
  
  <entry>
    <title>css3选择器(:target)用法</title>
    <link href="http://imys.net/20150629/css3-target-selector.html"/>
    <id>http://imys.net/20150629/css3-target-selector.html</id>
    <published>2015-06-29T00:57:17.000Z</published>
    <updated>2016-11-12T19:12:26.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong>target</strong>译为“目标”，加冒号即为伪类选择器。<br>此选择器便是用于给目标元素添加额外样式，类似于<code>hover</code>。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>该选择对应的目标元素为锚点触发。<br>以下代码定义了两个<code>a</code>元素，其中一个为链接元素，另一个使用样式定义为块元素。<br>块元素设置了透明度为<code>0</code>，并设置其被链接时透明度为<code>1</code>和过度效果。<br>最终的效果为点击链接元素时，<code>div1</code>从透明到不透明过度。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>target选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .link &#123;</div><div class="line">        display: block;</div><div class="line">        text-decoration: none;</div><div class="line">        text-align: center;</div><div class="line">        color: #fff;</div><div class="line">        background: #ff0000;</div><div class="line">        line-height: 30px;  </div><div class="line">    &#125;</div><div class="line">    .a-block &#123;</div><div class="line">        display: block;</div><div class="line">        opacity: 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .a-block:target &#123;</div><div class="line">        opacity: 1;</div><div class="line">        transition: all .3s;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div1"</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"a-block"</span>&gt;</span></div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">        :target选择器可用于当前活动的target元素的样式。</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>起初我写下这段Demo时目标元素是用的<code>div</code>，后来发现该选择器不能像<code>:hover</code>一样作用于<code>a</code>以外的元素。<br>另外该选择器的兼容性为IE8以上（不包括IE8）。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>结合这个Demo可以发现该选择器又一次实现之前需要JS才能实现的功能，比如点击链接显示元素。<br>另外在全屏滚动动画页面时也可以用在导航之上，比如点击导航给对应的块添加动画效果。<br>更多使用方法也待慢慢摸索了！</p>]]></content>
    
    <summary type="html">
    
      css3选择器(:target)用法
    
    </summary>
    
    
      <category term="CSS3" scheme="http://imys.net/tags/CSS3/"/>
    
      <category term="selector" scheme="http://imys.net/tags/selector/"/>
    
      <category term="target" scheme="http://imys.net/tags/target/"/>
    
  </entry>
  
  <entry>
    <title>HTML5页面可见性改变事件</title>
    <link href="http://imys.net/20150615/js-page-visible.html"/>
    <id>http://imys.net/20150615/js-page-visible.html</id>
    <published>2015-06-15T03:01:53.000Z</published>
    <updated>2016-11-12T19:22:20.235Z</updated>
    
    <content type="html"><![CDATA[<p>通过该事件可以判断当前页面对于用户的可见性，即返回用户当前浏览的页面或标签的状态变化。<br><a id="more"></a></p><h2 id="visibilitychange（页面可见性改变事件）"><a href="#visibilitychange（页面可见性改变事件）" class="headerlink" title="visibilitychange（页面可见性改变事件）"></a>visibilitychange（页面可见性改变事件）</h2><p>该事件属于HTML5新API，兼容性IE10+，以及其他现代浏览器等。</p><p>以下是一个简单的案例，当用户离开当前页面时改变页面标题。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pageVisible = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> title = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> temp = <span class="keyword">this</span>.title;</div><div class="line">            <span class="keyword">this</span>.title = title;</div><div class="line">            title = temp;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tit</span>)</span>&#123;</div><div class="line">            title = tit || <span class="string">'好好学习，天天向上！'</span>;</div><div class="line">            change();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">pageVisible.init();</div></pre></td></tr></table></figure><p>此外，还可以在事件内对页面可见性属性判断可见性状态。</p><blockquote><p>document.hidden: Boolean值，表示当前页面可见还是不可见。</p></blockquote><p><strong>适用场景，如：</strong></p><p>1.用户离开媒体页面停止播放媒体；<br>2.用户离开游戏页面暂停游戏；<br>3.等等……</p>]]></content>
    
    <summary type="html">
    
      HTML5页面可见性改变事件,页面焦点
    
    </summary>
    
    
      <category term="Html5" scheme="http://imys.net/tags/Html5/"/>
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js阻止子元素响应父元素事件</title>
    <link href="http://imys.net/20150527/js-cancel-event.html"/>
    <id>http://imys.net/20150527/js-cancel-event.html</id>
    <published>2015-05-27T12:44:34.000Z</published>
    <updated>2016-11-12T19:19:21.842Z</updated>
    
    <content type="html"><![CDATA[<p>今天同事遇到这样一个问题，找我解决。<br>他希望点击整个DIV都可以响应点击事件，但是有些交互元素需要排除掉。如：点击链接页面跳转、点击按钮响应事件等）。<br>这是一个关于<strong>事件冒泡</strong>的问题，那便从事件冒泡写起。<br><a id="more"></a></p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>在一个元素上触发事件，如果此元素定义了处理程序，那么此次事件就会被捕获，根据程序进行该事件的处理。否则这个事件会根据DOM树向父节点逐级传播，如果从始至终都没有被处理，那么最终会到达document或window根元素。</p><h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><p>W3C标准调用事件对象的<code>stopPropagation()</code>方法，IE可以设置对象的<code>cancelBubble</code>属性为<code>true</code>;</p><p>在Jquery中的事件方法都带有<code>event</code>参数，这是一个符合W3C标准的事件对象，且兼容IE，可以使用<code>event.stopPropagation()</code>阻止冒泡。更简单的，直接<code>return false;</code>，等价于<code>event.stopPropagation()</code>加上<code>event.preventDefault()</code>。</p><blockquote><p>在原生JS中，事件对象要区别对待。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelEvent</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(e) &#123;</div><div class="line">        e.stopPropagation();  <span class="comment">//非IE</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;  <span class="comment">//IE</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="阻止多个子元素的事件"><a href="#阻止多个子元素的事件" class="headerlink" title="阻止多个子元素的事件"></a>阻止多个子元素的事件</h2><p>综上所述，想要链接和按钮元素不响应父节点事件，便要为所有这些元素注册事件，编写阻止事件冒泡的代码。</p><p>现在的代码可以这样写：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> div = $(<span class="string">'#div'</span>);</div><div class="line">div.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// do...</span></div><div class="line">&#125;);</div><div class="line">div.on(<span class="string">'click'</span>, <span class="string">'a,button,input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event.stopPropagation();  <span class="comment">// 或 return false;</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这当然是可以解决问题的。<br>可对于处女座的我完全无法接受平白无故多写了一段莫名奇妙的代码。</p><p>于是我想到了<code>event</code>对象。</p><ul><li>event.target 返回事件的目标节点（触发该事件的节点）。</li><li>event.target.tagName 目标节点的标签名</li></ul><p>把上面两个事件合并处理之：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$(<span class="string">'#div'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tag = event.target.tagName;</div><div class="line">    <span class="keyword">if</span>(tag!=<span class="string">'A'</span> &amp;&amp; tag!=<span class="string">'BUTTON'</span> &amp;&amp; tag!=<span class="string">'INPUT'</span>)&#123;</div><div class="line">        <span class="comment">// do...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      js阻止子元素响应父元素事件，阻止事件冒泡
    
    </summary>
    
    
      <category term="Event" scheme="http://imys.net/tags/Event/"/>
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加Toc支持，生成文章目录</title>
    <link href="http://imys.net/20150514/hexo-toc.html"/>
    <id>http://imys.net/20150514/hexo-toc.html</id>
    <published>2015-05-14T07:25:47.000Z</published>
    <updated>2017-08-20T13:57:23.811Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo提供了诸多插件来增强博客体验，地址<code>http://hexo.io/plugins/</code>。<br>在博客搬迁的时发现一个生成文章目录的插件，<a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="external">hexo-toc</a>。<br><a id="more"></a></p><h2 id="hexo-toc"><a href="#hexo-toc" class="headerlink" title="hexo-toc"></a>hexo-toc</h2><blockquote><p>为防插件误认标记，文章以下出现的 ttoc 实际为 toc。</p></blockquote><p>使用方法跟显示文章摘要类似，在Markdown中需要显示文章目录的地方添加 <code>&lt;!-- ttoc --&gt;</code>。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install hexo-toc --save</div></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在博客根目录下的 <code>_config.yml</code> 中如下配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">toc:</div><div class="line">  maxDepth: 3</div></pre></td></tr></table></figure><blockquote><p><code>maxDepth</code> 表示目录深度为3，即最多生成三级目录。</p></blockquote><p>好了，现在重启Hexo预览下效果吧。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/hexo-toc-1.jpg" alt="Toc文章目录"></div><div class="image-caption">Toc文章目录</div></figure><p>然后你会发现点击目录链接，没反应！<br>F12查看生成的HTML代码：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/hexo-toc-2.jpg" alt="Toc生成代码"></div><div class="image-caption">Toc生成代码</div></figure><p>标题id生成没问题，锚链接中的中文都被转义为 <code>-</code> 了。</p><p>看了该插件的issues中已经提到了这个问题，不过好像是没解决。<br>也没用搜索到其他人有关该插件的使用经验。<br>没办法，自己动手丰衣足食！</p><h3 id="解决锚链接中文被转义"><a href="#解决锚链接中文被转义" class="headerlink" title="解决锚链接中文被转义"></a>解决锚链接中文被转义</h3><p>也没什么好的办法，只凭着入门级的Node水平，顺藤摸瓜！<br>从插件下的<code>index.js</code>开始，一路跟踪代码调试，在感觉可能出现问题的地方console输出内容，最终让我给找到了。</p><p>文件位置：<code>Hexo根目录\node_modules\hexo-toc\node_modules\markdown-toc\index.js</code>。<br>找到如下方法，把原来返回值注释掉，直接 <code>return str;</code> 。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">slugify</span>(<span class="params">str, opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (opts &amp;&amp; opts.slugify === <span class="literal">false</span>) <span class="keyword">return</span> str;</div><div class="line">  <span class="keyword">if</span> (opts &amp;&amp; <span class="keyword">typeof</span> opts.slugify === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> opts.slugify(str, opts);</div><div class="line">  &#125;</div><div class="line">  str = str.split(<span class="string">'.'</span>).join(<span class="string">''</span>);</div><div class="line"></div><div class="line">  <span class="comment">//return str.toLowerCase().replace(/[^a-z0-9]/g, '-');</span></div><div class="line">  <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在重启Hexo后链接都正常可用了。</p><p>更好的方法是不改变插件源代码的情况下进行配置。<br>在以上方法中可以发现，插件有个<code>slugify</code>的配置项，当此项配置为<code>false</code>时即直接<code>return str;</code>。</p><p>所以，我们可以到<code>_config.yml</code>添加toc配置：</p><pre><code>toc:
  maxDepth: 3
  slugify: false
</code></pre><h3 id="给Toc添加样式"><a href="#给Toc添加样式" class="headerlink" title="给Toc添加样式"></a>给Toc添加样式</h3><p>如本文中文章目录样式，置于文章右侧，又加了个背景等。</p><blockquote><p><code>hexo-toc</code>插件是生成的文章目录最终还是Markdown格式的，最后被Hexo的marked模块解析为HTML。</p></blockquote><p>要添加样式先加选择器。<br>想通过修改插件代码增加选择器是行不通的，也不能直接在 <code>&lt;!-- ttoc --&gt;</code>标记外包裹 <code>&lt;div&gt;</code>。</p><p><strong>因为添加了HTML标签的地方就不会在被marked模块解析。</strong></p><p>那就只能在HTML生成之后增加，用js。</p><blockquote><p><code>hexo-toc</code>插件生成文章目录时还在其前后增加了 <code>&lt;!-- ttoc --&gt;</code> 和 <code>&lt;!-- ttocstop --&gt;</code> 注释。<br>解决办法就是把这两个注释替换为可控的 <code>&lt;div&gt;</code>。</p></blockquote><p>找到主题下的文章模版，我的是<code>themes\yilia\layout\_partial\article.ejs</code>。<br>在其末尾增加代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;% if (!index &amp;&amp; theme.toc)&#123; %&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var tocEx = function(el)&#123;</div><div class="line">    var toc = document.querySelector(el), content = toc.innerHTML;</div><div class="line">    content = content.replace(&apos;&lt;!-- ttoc --&gt;&apos;, &apos;&lt;div class=&quot;toc&quot;&gt;&apos;).replace(&apos;&lt;!-- ttocstop --&gt;&apos;, &apos;&lt;/div&gt;&apos;);</div><div class="line">    toc.innerHTML = content;</div><div class="line">  &#125;(&apos;.article-entry&apos;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>这样我们就为文章目录外包裹了一对<code>&lt;div&gt;</code>标签和一个<code>toc</code>类。</p><p>再写这个类的样式，放到主题下的相关css文件中。</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.toc</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">40px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">#bbb</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这些都做完再次重启Hexo，成功！</p><h2 id="2016年更新"><a href="#2016年更新" class="headerlink" title="2016年更新"></a>2016年更新</h2><p>Hexo 已经有生成文章目录的辅助函数了，使用更方便。我现在博客中的文章目录就是使用辅助函数生成的。</p><p><a href="https://hexo.io/zh-cn/docs/helpers.html#toc" target="_blank" rel="external">Hexo辅助函数#toc</a></p><p>不需要安装额外插件！<br>不需要在文章中插入标记！<br>不需要在配置文件添加配置！</p><p>仅仅是在你的文章页模版中，插入调用辅助函数的代码即可。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">toc</span>(<span class="attr">page.content</span>, &#123;</span></div><div class="line">        <span class="attr">class:</span> '<span class="attr">post-toc</span>',</div><div class="line">        <span class="attr">list_number:</span> <span class="attr">true</span></div><div class="line">    &#125;) %&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Hexo添加Toc支持，文章目录
    
    </summary>
    
    
      <category term="Hexo" scheme="http://imys.net/tags/Hexo/"/>
    
      <category term="TOC" scheme="http://imys.net/tags/TOC/"/>
    
  </entry>
  
  <entry>
    <title>博客搬迁记 - 从WordPress到Hexo</title>
    <link href="http://imys.net/20150513/wordpress-to-hexo.html"/>
    <id>http://imys.net/20150513/wordpress-to-hexo.html</id>
    <published>2015-05-13T01:50:02.000Z</published>
    <updated>2016-11-12T19:37:41.737Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上打开电脑第一件事就是把pages绑定了域名，从此便可以使用<code>http://imys.net</code>进行访问了。</p><p>至此已经折腾的差不多了，在此记录下搬迁过程中遇到的一些问题及解决办法。<br><a id="more"></a></p><h2 id="Hexo3本地部署"><a href="#Hexo3本地部署" class="headerlink" title="Hexo3本地部署"></a>Hexo3本地部署</h2><p>现在node下安装的hexo一般都是最新版本，网上搜索到的一些教程不乏是老版本的，要特别留意。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://forsweet.github.io/2015/04/20/%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">用Hexo 3 搭建github blog</a></li><li><a href="http://www.jianshu.com/p/73779eacb494" target="_blank" rel="external">Hexo 3.0 静态博客使用指南</a></li></ul><p>以上两篇文章应该能使你顺利的在<code>http://localhost:4000/</code>看到自己的新博客，并且你也熟悉了Hexo的常用命令。</p><h3 id="Hexo无法解析模板文件"><a href="#Hexo无法解析模板文件" class="headerlink" title="Hexo无法解析模板文件"></a>Hexo无法解析模板文件</h3><p>本地预览页面显示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;%- partial(&apos;_partial/head&apos;) %&gt;</div><div class="line">&lt;%- partial(&apos;_partial/header&apos;) %&gt;</div><div class="line">&lt;%- body %&gt;</div><div class="line">&lt;% if (theme.sidebar &amp;&amp; theme.sidebar !== &apos;bottom&apos;)&#123; %&gt; &lt;%- partial(&apos;_partial/sidebar&apos;) %&gt; &lt;% &#125; %&gt;</div><div class="line">&lt;%- partial(&apos;_partial/footer&apos;) %&gt;</div><div class="line">&lt;%- partial(&apos;_partial/mobile-nav&apos;) %&gt; &lt;%- partial(&apos;_partial/after-footer&apos;) %&gt;</div></pre></td></tr></table></figure><p>在工程目录执行下面3个命令，高版本的hexo移除默认的ejs。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install hexo-renderer-ejs --save</div><div class="line">$ npm install hexo-renderer-stylus --save</div><div class="line">$ npm install hexo-renderer-marked --save</div></pre></td></tr></table></figure><h2 id="上传到GitCafe"><a href="#上传到GitCafe" class="headerlink" title="上传到GitCafe"></a>上传到GitCafe</h2><ul><li><a href="http://www.sumrday.com/2014/09-18-Hello-Hexo.html" target="_blank" rel="external">注册GitCafe创建Page项目</a></li><li><a href="https://gitcafe.com/GitCafe/Help/wiki/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%92%8C%E8%AE%BE%E7%BD%AE%20Git" target="_blank" rel="external">安装和设置 Git</a></li></ul><p>以上两篇内容结合着看，不过对第一次操作这些的人来说可能会遇到一些问题。</p><h3 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h3><p>当命令窗口出现以下信息时，需要你输入<code>passphrase</code>口令。不过在我操作时输入口令的话是无法生成成功的，直接按<code>enter</code>即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):</div></pre></td></tr></table></figure><h3 id="设置git"><a href="#设置git" class="headerlink" title="设置git"></a>设置git</h3><p>第一次在本地设置git时，需设置用户标识。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"yourname"</span>                   <span class="comment"># gitcafe上的用户名</span></div><div class="line">$ git config --global user.email <span class="string">"yourmaill@yourmaili.com"</span>   <span class="comment"># 填写自己的邮箱</span></div></pre></td></tr></table></figure><h3 id="设置本地gitcafe-pages版本库"><a href="#设置本地gitcafe-pages版本库" class="headerlink" title="设置本地gitcafe-pages版本库"></a>设置本地gitcafe-pages版本库</h3><ol><li>GitBash进入本地Hexo目录</li><li><code>git checkout -b gitcafe-pages</code> 创建Gitcafe-Pages分支，并切换到该分支。</li><li><code>git add .</code> （.）点表示当前目录下的所有内容，交给git管理，也就是提交到了git的本地仓库。</li></ol><h3 id="上传到gitcafe"><a href="#上传到gitcafe" class="headerlink" title="上传到gitcafe"></a>上传到gitcafe</h3><p><strong>修改hexo配置文件，即config.yml，如下配置：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">    type:</span> git</div><div class="line"><span class="attr">    repository:</span> git@gitcafe.com:yourname/yourname.git</div><div class="line"><span class="attr">    branch:</span> gitcafe-pages</div></pre></td></tr></table></figure><p>yourname 修改成你的用户名，如我的是：<code>git@gitcafe.com:justgo/justgo.git</code></p><p>保存后直接在<strong>GitBash</strong>中<code>hexo g &amp;&amp; hexo d</code>上传即可（我在这一步折腾了很久，在cmd下运行<code>hexo d</code>命令会出错）。</p><p>稍等片刻，打开 <code>http://youname/gitcafe.io</code> 便可以看到自己的博客了。</p><h2 id="WordPress文章迁移"><a href="#WordPress文章迁移" class="headerlink" title="WordPress文章迁移"></a>WordPress文章迁移</h2><p>WordPress 后台可以直接导出wordpress.xml文件，把这个文件放入你的本地Hexo目录下，然后安装一个插件可以直接生成每篇文章的Markdown文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install hexo-migrator-wordpress --save    <span class="comment"># 安装插件</span></div><div class="line"></div><div class="line">hexo migrate wordpress wordpress.xml          <span class="comment"># 生成Markdown</span></div></pre></td></tr></table></figure><p>生成后的文件稍微修改一下格式就可以上传了。</p><p>庆幸的是我博客里的图片不多，不需要太多的链接修改。</p><p>不过以后我也开始使用七牛存储了，免得以后搬迁麻烦。</p><h2 id="Hexo配置优化"><a href="#Hexo配置优化" class="headerlink" title="Hexo配置优化"></a>Hexo配置优化</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://zipperary.com/2013/05/29/hexo-guide-3/" target="_blank" rel="external">hexo博客的配置、使用</a></li><li><a href="http://zipperary.com/2013/05/30/hexo-guide-4/" target="_blank" rel="external">hexo博客的优化技巧</a></li><li><a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="external">hexo博客的优化技巧续</a></li><li><a href="http://lukang.me/2014/optimization-of-hexo.html" target="_blank" rel="external">Hexo 优化与定制(一)</a></li><li><a href="http://lukang.me/2015/optimization-of-hexo-2.html" target="_blank" rel="external">Hexo 优化与定制(二)</a></li></ul><h3 id="无法开启RSS和sitemap"><a href="#无法开启RSS和sitemap" class="headerlink" title="无法开启RSS和sitemap"></a>无法开启RSS和sitemap</h3><p>打开<code>http://localhost:4000/atom.xml</code> 页面显示 <code>Cannot GET atom.xml</code>，<code>http://localhost:4000/sitemap.xml</code> 页面显示 <code>Cannot GET sitemap.xml</code>。</p><p>这个问题困扰了我很长的时间，因为我的插件安装和配置都是照着<a href="http://hexo.io/plugins/" target="_blank" rel="external">示例</a>分毫不差的进行的，可是google了几个小时都没解决！</p><p>插件也重装更新了几次，想过重新初始化Hexo，怕会丢失原来的一些配置，最后在 <code>hexo/package.json</code> 中找到了原因。</p><p>package.json：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">    <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"hexo"</span>: &#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"3.0.1"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line">    <span class="attr">"hexo-admin"</span>: <span class="string">"^0.3.0"</span>,</div><div class="line">    <span class="attr">"hexo-deployer-git"</span>: <span class="string">"0.0.4"</span>,</div><div class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="attr">"hexo-generator-feed"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="attr">"hexo-generator-sitemap"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="attr">"hexo-migrator-wordpress"</span>: <span class="string">"^0.1.2"</span>,</div><div class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.2.4"</span>,</div><div class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.1.2"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>检查此文件中是否包括了<code>hexo-generator-tag</code>和<code>hexo-generator-sitemap</code>，没有的话添加一下。<br>插件版本号查看对应插件下的<code>package.json</code>文件，其他插件的类似问题应该也可以尝试这样解决。</p>]]></content>
    
    <summary type="html">
    
      博客从WordPress搬迁到Hexo，gitcafe部署
    
    </summary>
    
    
      <category term="Hexo" scheme="http://imys.net/tags/Hexo/"/>
    
      <category term="WordPress" scheme="http://imys.net/tags/WordPress/"/>
    
      <category term="Gitcafe" scheme="http://imys.net/tags/Gitcafe/"/>
    
  </entry>
  
  <entry>
    <title>jQuery.proxy方法原理与使用</title>
    <link href="http://imys.net/20150510/jquery-proxy.html"/>
    <id>http://imys.net/20150510/jquery-proxy.html</id>
    <published>2015-05-09T16:25:13.000Z</published>
    <updated>2016-11-12T19:19:16.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在写一些jq插件时，往往需要在回调函数上下文中注入调用者对象，也就是改变函数上下文中 this 的引用。<br>从jQuery 1.4 开始便可以使用 jQuery.proxy 方法解决这个问题。</p></blockquote><a id="more"></a><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>$.proxy 方法接受一个已有的函数，并返回一个带特定上下文的新的函数。<br>该方法通常用于向上下文指向不同对象的元素添加事件。</p><p><em>提示：如果您绑定从 $.proxy 返回的函数，jQuery 仍然可以通过传递的原先的函数取消绑定正确的函数。</em></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line">$(selector).proxy(<span class="function"><span class="keyword">function</span>,<span class="title">context</span>);</span></div><div class="line">// 2</div><div class="line"><span class="title">$</span>(<span class="params">selector</span>).<span class="title">proxy</span>(<span class="params">context,name</span>);</div></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 用例1</span></div><div class="line"><span class="keyword">var</span> obj1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.txt = <span class="string">"helloWorld"</span>;</div><div class="line">    $(<span class="built_in">document</span>).click(<span class="keyword">this</span>.fn);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.txt = <span class="string">"helloWorld"</span>;</div><div class="line">    $(<span class="built_in">document</span>).click($.proxy(<span class="keyword">this</span>.fn, <span class="keyword">this</span>));</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj1.prototype.fn = obj2.prototype.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.txt);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> obj1();  <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> obj2();  <span class="comment">// helloWorld</span></div><div class="line"></div><div class="line"><span class="comment">// 用例2</span></div><div class="line"><span class="keyword">var</span> dialog = &#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'helloWorld'</span>,</div><div class="line">    <span class="attr">show</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).click(dialog.show); </div><div class="line"><span class="comment">// #document</span></div><div class="line"><span class="comment">// undefined</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).click($.proxy(dialog, <span class="string">"show"</span>));  </div><div class="line"><span class="comment">// Object &#123;msg: "helloWorld", show: function&#125;</span></div><div class="line"><span class="comment">// helloWorld</span></div></pre></td></tr></table></figure><p><em>未使用 jQuery.proxy 方法时，click 方法中 this 指向为执行 click 方法的 jQuery 对象；</em><br><em>使用 jQuery.proxy 方法时，click 方法中 this 指向为你所期望的对象。</em></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>不难猜出其底层实现应该是原生 js 中的 call 或 apply 方法。</p><p><strong>jquery1.9 中的源码片段：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">proxy: <span class="function"><span class="keyword">function</span>(<span class="params"> fn, context </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args, proxy, tmp;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> context === <span class="string">"string"</span> ) &#123;</div><div class="line">        tmp = fn[ context ];</div><div class="line">        context = fn;</div><div class="line">        fn = tmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Quick check to determine if target is callable, in the spec</span></div><div class="line">    <span class="comment">// this throws a TypeError, but we will just return undefined.</span></div><div class="line">    <span class="keyword">if</span> ( !jQuery.isFunction( fn ) ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Simulated bind</span></div><div class="line">    args = core_slice.call( <span class="built_in">arguments</span>, <span class="number">2</span> );</div><div class="line">    proxy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> fn.apply( context || <span class="keyword">this</span>, args.concat( core_slice.call( <span class="built_in">arguments</span> ) ) );</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Set the guid of unique handler to the same of original handler, so it can be removed</span></div><div class="line">    proxy.guid = fn.guid = fn.guid || jQuery.guid++;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> proxy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      jQuery.proxy方法原理与使用
    
    </summary>
    
    
      <category term="jQuery" scheme="http://imys.net/tags/jQuery/"/>
    
      <category term="proxy" scheme="http://imys.net/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>javascript中with语句用法</title>
    <link href="http://imys.net/20150508/javascript-with.html"/>
    <id>http://imys.net/20150508/javascript-with.html</id>
    <published>2015-05-08T03:16:52.000Z</published>
    <updated>2016-11-12T19:19:59.058Z</updated>
    
    <content type="html"><![CDATA[<p><strong>with</strong> 语句可以方便地用来引用某个特定对象中已有的属性或方法，但是不能用来给对象添加新的属性或方法。要给对象创建新的属性，必须明确地引用该对象。<br><a id="more"></a></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">function Student()&#123;</div><div class="line">    this.name = &apos;jeck&apos;;</div><div class="line">    this.age = 20;</div><div class="line">    this.gender = &apos;men&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var stu = new Student();</div><div class="line"></div><div class="line">with(stu) &#123;</div><div class="line">    console.log(&apos;姓名：&apos; + name + &apos;，性别：&apos; + gender + &apos;，年龄：&apos; + age);  // 姓名：jeck，性别：men，年龄：20</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>with 语句使代码更简洁、易读。<br>由于 with 会根据目标对象产生一个新的可变对象，推入作用域链的头部，这样原有的可访问对象都被往后推了一个层次，这使得它们的访问代价更高了。<br>因此对于 with 语句最好避免使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      javascript中with语句用法
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="with" scheme="http://imys.net/tags/with/"/>
    
  </entry>
  
  <entry>
    <title>图片上传本地预览jquery插件</title>
    <link href="http://imys.net/20150507/jqplugin-uploadpreview.html"/>
    <id>http://imys.net/20150507/jqplugin-uploadpreview.html</id>
    <published>2015-05-07T10:11:00.000Z</published>
    <updated>2016-11-12T19:19:41.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网上找到的一段代码，经过一番测试修改，兼容了IE7+、火狐、谷歌。<br>并且扩展了多尺寸预览功能，可完美搭配 <a href="http://code.ciaoca.com/jquery/jcrop/" target="_blank" rel="external">jquery.Jcrop</a> 插件进行图像裁剪。<br><a id="more"></a></p></blockquote><h3 id="插件代码"><a href="#插件代码" class="headerlink" title="插件代码"></a>插件代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">    jQuery.fn.extend(&#123;</div><div class="line">        <span class="attr">uploadPreview</span>: <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">            opts = jQuery.extend(&#123;</div><div class="line">                <span class="attr">width</span>: <span class="literal">null</span>,    </div><div class="line">                <span class="attr">height</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">imgDiv</span>: <span class="string">"#imgDiv"</span>,  </div><div class="line">                <span class="attr">anyTarget</span>: <span class="literal">null</span>,    </div><div class="line">                <span class="attr">maxSize</span>: <span class="number">300</span>,       </div><div class="line">                <span class="attr">imgType</span>: [<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"bmp"</span>, <span class="string">"png"</span>],  </div><div class="line">                <span class="attr">callback</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;  </div><div class="line">            &#125;, opts || &#123;&#125;);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> _this = $(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">var</span> imgDiv = $(opts.imgDiv);</div><div class="line">            opts.width &amp;amp;&amp;amp; imgDiv.width(opts.width);</div><div class="line">            opts.height &amp;amp;&amp;amp; imgDiv.height(opts.height);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> isIE = navigator.appName == <span class="string">'Microsoft Internet Explorer'</span>, </div><div class="line">                brVersion = navigator.appVersion, version;</div><div class="line">            isIE &amp;amp;&amp;amp; (version = brVersion.split(<span class="string">';'</span>)[<span class="number">1</span>].replace(<span class="regexp">/MSIE[ ]/g</span>,<span class="string">''</span>).replace(<span class="string">'.0'</span>,<span class="string">''</span>));</div><div class="line"></div><div class="line">            handle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> img = imgDiv.find(<span class="string">'img'</span>);</div><div class="line">                opts.anyTarget &amp;amp;&amp;amp; $.each(opts.anyTarget.split(<span class="string">','</span>), <span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</div><div class="line">                    $(val).html(img.clone());</div><div class="line">                &#125;);</div><div class="line">                img.width(opts.width).height(opts.height);</div><div class="line">                opts.callback(img);</div><div class="line">            &#125;,</div><div class="line"></div><div class="line">            createImg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                imgDiv.html(<span class="string">''</span>);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> img = $(<span class="string">"&lt;img /&gt;"</span>);</div><div class="line">                imgDiv.append(img);</div><div class="line">                <span class="keyword">return</span> img;</div><div class="line">            &#125;,</div><div class="line"></div><div class="line">            _this.change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value) &#123;</div><div class="line">                    <span class="keyword">if</span> (!<span class="built_in">RegExp</span>(<span class="string">"\.("</span> + opts.imgType.join(<span class="string">"|"</span>) + <span class="string">")$"</span>, <span class="string">"i"</span>).test(<span class="keyword">this</span>.value.toLowerCase())) &#123;</div><div class="line">                        alert(<span class="string">"图片类型必须是"</span> + opts.imgType.join(<span class="string">"，"</span>) + <span class="string">"中的一种"</span>);</div><div class="line">                        <span class="keyword">this</span>.value = <span class="string">""</span>;</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (isIE &amp;amp;&amp;amp; version &lt; <span class="number">10</span>) &#123;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (version == <span class="number">6</span>) &#123;</div><div class="line"></div><div class="line">                            <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">                            image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                                <span class="keyword">if</span>( (image.fileSize/<span class="number">1024</span>) &gt; opts.maxSize) &#123;</div><div class="line">                                    alert(<span class="string">'图片大小不能超过'</span>+opts.maxSize+<span class="string">'K'</span>);</div><div class="line">                                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            image.src = <span class="string">'file:///'</span> + <span class="keyword">this</span>.value;</div><div class="line"></div><div class="line">                            createImg().attr(<span class="string">'src'</span>, image.src);</div><div class="line">                            handle();</div><div class="line">                        &#125;  <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                            <span class="keyword">var</span> img = <span class="built_in">document</span>.selection.createRange().text || $(<span class="keyword">this</span>).val();</div><div class="line">                            <span class="keyword">var</span> image = $(<span class="string">'&lt;img /&gt;'</span>)</div><div class="line">                            image.load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                                <span class="keyword">if</span>( (image.fileSize/<span class="number">1024</span>) &gt; opts.maxSize) &#123;</div><div class="line">                                    alert(<span class="string">'图片大小不能超过'</span>+opts.maxSize+<span class="string">'K'</span>);</div><div class="line">                                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                            image.attr(<span class="string">'src'</span>, img);                           </div><div class="line">                            imgDiv.html(<span class="string">''</span>);           </div><div class="line"></div><div class="line">                            image.css(&#123; <span class="attr">filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale',src='"</span>+img+<span class="string">"')"</span> &#125;);</div><div class="line">                            imgDiv.append(image);</div><div class="line">                            setTimeout(handle, <span class="number">100</span>);                            </div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">var</span> img;</div><div class="line">                        <span class="keyword">try</span>&#123;   </div><div class="line">                            <span class="keyword">var</span> file = <span class="literal">null</span>;</div><div class="line">                            <span class="keyword">var</span> size = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">if</span>(<span class="keyword">this</span>.files &amp;amp;&amp;amp; <span class="keyword">this</span>.files[<span class="number">0</span>] )&#123;</div><div class="line">                                file = <span class="keyword">this</span>.files[<span class="number">0</span>]; </div><div class="line">                                size = file.size;</div><div class="line">                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.files &amp;amp;&amp;amp; <span class="keyword">this</span>.files.item(<span class="number">0</span>)) &#123;                                </div><div class="line">                                file = <span class="keyword">this</span>.files.item(<span class="number">0</span>);   </div><div class="line">                                size = file.fileSize;</div><div class="line">                            &#125; </div><div class="line"></div><div class="line">                            <span class="keyword">if</span>((size/<span class="number">1024</span>) &gt; opts.maxSize)&#123;</div><div class="line">                                alert(<span class="string">'图片大小不能超过'</span>+opts.maxSize+<span class="string">'K'</span>);</div><div class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            img = createImg();</div><div class="line"></div><div class="line">                            <span class="comment">//Firefox 因安全性问题已无法直接通过input[file].value 获取完整的文件路径</span></div><div class="line">                            <span class="keyword">try</span>&#123;</div><div class="line">                                <span class="comment">//Firefox7.0 以下                             </span></div><div class="line">                                img.attr(<span class="string">'src'</span>, file.getAsDataURL());</div><div class="line">                            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                                <span class="comment">//Firefox8.0以上                              </span></div><div class="line">                                img.attr(<span class="string">'src'</span>, <span class="built_in">window</span>.URL.createObjectURL(file));</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            img.css(&#123; <span class="string">"vertical-align"</span>: <span class="string">"middle"</span> &#125;);</div><div class="line">                            setTimeout(handle, <span class="number">100</span>);</div><div class="line">                        &#125;<span class="keyword">catch</span>(e)&#123;                          </div><div class="line">                            <span class="comment">//支持html5的浏览器,比如高版本的firefox、chrome、ie10</span></div><div class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.files &amp;amp;&amp;amp; <span class="keyword">this</span>.files[<span class="number">0</span>]) &#123;                          </div><div class="line">                                <span class="keyword">if</span>((<span class="keyword">this</span>.files[<span class="number">0</span>].size/<span class="number">1024</span>) &gt; opts.maxSize)&#123;</div><div class="line">                                    alert(<span class="string">'图片大小不能超过'</span>+opts.maxSize+<span class="string">'K'</span>);</div><div class="line">                                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                                <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader(); </div><div class="line">                                reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;                                      </div><div class="line">                                    imgDiv.attr(<span class="string">'src'</span>, e.target.result);  </div><div class="line">                                &#125;;</div><div class="line">                                reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]); </div><div class="line">                                setTimeout(handle, <span class="number">100</span>);</div><div class="line">                            &#125;  </div><div class="line">                        &#125;;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>width: 图片容器宽度；</li><li>height: 图片容器高度；</li><li>imgDiv: 图片预览容器；</li><li>anyTarget: 其他关联容器，多个容器逗号隔开；</li><li>maxSize: 图片大小限制，单位KB；</li><li>imgType: 图片类型限制；</li><li>callback: 预览成功后的回调，参数 img(预览的图片节点，jquery类型)。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>图片上传预览<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/jquery-jcrop/0.9.12/css/jquery.Jcrop.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.fl</span> &#123;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.fr</span> &#123;</div><div class="line">        <span class="attribute">float</span>: right;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-wrap</span> &#123;</div><div class="line">        <span class="attribute">overflow</span>: hidden;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-350</span>, <span class="selector-class">.logo-350</span> <span class="selector-tag">img</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">350px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-350</span> &#123;</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-200</span>, <span class="selector-class">.logo-200</span> <span class="selector-tag">img</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-200</span> &#123;</div><div class="line">        <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-200-wrap</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.logo-100</span>, <span class="selector-class">.logo-100</span> <span class="selector-tag">img</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.logo-60</span>, <span class="selector-class">.logo-60</span> <span class="selector-tag">img</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.logo-350</span>, <span class="selector-class">.logo-200</span>, <span class="selector-class">.logo-100</span>, <span class="selector-class">.logo-60</span>, <span class="selector-class">.qrcode</span> &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">        <span class="attribute">overflow</span>: hidden;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo-wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl logo-350"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl logo-200-wrap"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo-200"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl logo-100"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fr logo-60"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ysdn-wordpress.stor.sinaapp.com/js/jquery.uploadPreview.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery-jcrop/0.9.12/js/jquery.Jcrop.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></div><div class="line"><span class="comment">//&lt;![CDATA[</span></div><div class="line">    $(<span class="string">"#file"</span>).uploadPreview(&#123; </div><div class="line">        <span class="attr">width</span>: <span class="number">350</span>,     </div><div class="line">        <span class="attr">height</span>: <span class="number">350</span>, </div><div class="line">        <span class="attr">imgDiv</span>: <span class="string">'.logo-350'</span>,    </div><div class="line">        <span class="attr">anyTarget</span>: <span class="string">'.logo-200 .content, .logo-100 .content, .logo-60 .content'</span>,</div><div class="line">        <span class="attr">maxSize</span>: <span class="number">1024</span> * <span class="number">2</span>,</div><div class="line">        <span class="attr">callback</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> jOption = &#123;</div><div class="line">                <span class="attr">setSelect</span>: [<span class="number">75</span>, <span class="number">75</span>, <span class="number">275</span>, <span class="number">275</span>],</div><div class="line">                <span class="attr">minSize</span>: [<span class="number">200</span>, <span class="number">200</span>],</div><div class="line">                <span class="attr">onChange</span>: updatePreview,</div><div class="line">                <span class="attr">onSelect</span>: updatePreview,</div><div class="line">                <span class="attr">aspectRatio</span>: <span class="number">1</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> isIE = navigator.appName == <span class="string">'Microsoft Internet Explorer'</span>, </div><div class="line">                brVersion = navigator.appVersion, version;</div><div class="line">            isIE &amp;amp;&amp;amp; (version = brVersion.split(<span class="string">';'</span>)[<span class="number">1</span>].replace(<span class="regexp">/MSIE[ ]/g</span>,<span class="string">''</span>).replace(<span class="string">'.0'</span>,<span class="string">''</span>));</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (isIE &amp;amp;&amp;amp; version &lt; <span class="number">10</span>) &#123;</div><div class="line">                <span class="keyword">var</span> api = $.Jcrop(el.selector, jOption); </div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                el.Jcrop(jOption);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updatePreview</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(c.w) &gt; <span class="number">0</span>) &#123;</div><div class="line">            $(<span class="string">'.logo-200, .logo-100, .logo-60'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> box = $(el), content = box.find(<span class="string">'.content'</span>), img = content.find(<span class="string">'img'</span>);</div><div class="line">                content.width($(<span class="string">'.logo-350'</span>).outerWidth()).height($(<span class="string">'.logo-350'</span>).outerHeight());</div><div class="line"></div><div class="line">                <span class="keyword">var</span> rx = box.width() / c.w;</div><div class="line">                <span class="keyword">var</span> ry = box.height() / c.h;</div><div class="line"></div><div class="line">                img.css(&#123;</div><div class="line">                    <span class="attr">width</span>: <span class="built_in">Math</span>.round(rx * <span class="number">350</span>) + <span class="string">'px'</span>,</div><div class="line">                    <span class="attr">height</span>: <span class="built_in">Math</span>.round(ry * <span class="number">350</span>) + <span class="string">'px'</span>,</div><div class="line">                    <span class="attr">marginLeft</span>: <span class="string">'-'</span> + <span class="built_in">Math</span>.round(rx * c.x) + <span class="string">'px'</span>,</div><div class="line">                    <span class="attr">marginTop</span>: <span class="string">'-'</span> + <span class="built_in">Math</span>.round(ry * c.y) + <span class="string">'px'</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//]]&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      图片上传本地预览jquery插件
    
    </summary>
    
    
      <category term="jQuery" scheme="http://imys.net/tags/jQuery/"/>
    
      <category term="jQuery插件" scheme="http://imys.net/tags/jQuery%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>javascript之arguments对象</title>
    <link href="http://imys.net/20150429/javascript-arguments.html"/>
    <id>http://imys.net/20150429/javascript-arguments.html</id>
    <published>2015-04-29T03:55:20.000Z</published>
    <updated>2016-11-12T19:20:07.395Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在javascript中函数调用时，会自动在函数内产生一个arguments的隐藏对象。arguments类似于数组，但又不是数组。可以使用[]操作符获取函数调用时传递的实参。</p></blockquote><a id="more"></a><h3 id="其类型"><a href="#其类型" class="headerlink" title="其类型"></a>其类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">arguments</span>);  <span class="comment">// object</span></div><div class="line">&#125;</div><div class="line">test1();</div></pre></td></tr></table></figure><h3 id="其属性"><a href="#其属性" class="headerlink" title="其属性"></a>其属性</h3><p><strong>length</strong>：获取函数内传入实参个数。<br>适用场景：模拟函数重载。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);  <span class="comment">// 获取函数内传入实参个数：4</span></div><div class="line">    <span class="built_in">console</span>.log(test2.length);      <span class="comment">// 可以通过 函数名.length 获取形参个数：2</span></div><div class="line">&#125;</div><div class="line">test2(<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'gg'</span>);</div></pre></td></tr></table></figure><p><strong>callee</strong>：引用当前正在执行的函数。<br>适用场景：递归。</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 求1到n的自然数之和</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n + <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="转换成真正的数组"><a href="#转换成真正的数组" class="headerlink" title="转换成真正的数组"></a>转换成真正的数组</h3><p><code>Array.prototype.slice.call(arguments)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 任意数量的一组数字排序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mySort</span>(<span class="params">a,b,v</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tags = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    tags = tags.concat(tags.slice.call(<span class="built_in">arguments</span>)).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> tags;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = mySort(<span class="number">50</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">99</span>,<span class="number">57</span>,<span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(result);   <span class="comment">// [11, 16, 24, 32, 50, 57, 99, 100]</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      javascript之arguments对象
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
      <category term="arguments" scheme="http://imys.net/tags/arguments/"/>
    
  </entry>
  
  <entry>
    <title>jQuery扩展 - 延迟执行hover事件</title>
    <link href="http://imys.net/20150428/jquery-delayHover.html"/>
    <id>http://imys.net/20150428/jquery-delayHover.html</id>
    <published>2015-04-28T09:15:57.000Z</published>
    <updated>2016-11-12T19:19:11.619Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>适用场景如：鼠标随便一滑，无数个下拉菜单出来了，用户可能只是鼠标“打个酱油”罢了。</p></blockquote><p>实现很简单，就是使用<code>setTimeout</code>延迟事件代码的执行。<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">DelayHover</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> defaults = &#123;</div><div class="line">            <span class="attr">speed</span> : <span class="number">400</span>,                <span class="comment">// 延迟时间(毫秒)</span></div><div class="line">            onHover : <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;&#125;,  <span class="comment">// 鼠标悬浮</span></div><div class="line">            onOut : <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;&#125;      <span class="comment">// 鼠标离开</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.settings = $.extend(&#123;&#125;, defaults, options);</div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>, hoverTimer;</div><div class="line"></div><div class="line">        _this.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $(_this).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                hoverTimer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    _this.settings.onHover(_this);</div><div class="line">                &#125;, _this.settings.speed);</div><div class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                clearTimeout(hoverTimer);</div><div class="line">                _this.settings.onOut(_this);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $.fn.delayHover = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            DelayHover.call(<span class="keyword">this</span>,options);</div><div class="line">            <span class="keyword">this</span>.bind();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      jQuery扩展 - 延迟执行hover事件
    
    </summary>
    
    
      <category term="jQuery" scheme="http://imys.net/tags/jQuery/"/>
    
      <category term="jQuery插件" scheme="http://imys.net/tags/jQuery%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用css3后代选择器实现多背景色标签样式</title>
    <link href="http://imys.net/20150426/css3-selector-multiple-color.html"/>
    <id>http://imys.net/20150426/css3-selector-multiple-color.html</id>
    <published>2015-04-25T19:09:06.000Z</published>
    <updated>2017-08-20T13:57:23.757Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/css3-selector-multiple-color.jpg" alt="使用css3后代选择器实现多背景色标签样式"></div><div class="image-caption">使用css3后代选择器实现多背景色标签样式</div></figure><blockquote><p>css3增加了许多新的选择器，包括属性选择器、后代选择器和伪类选择器等，灵活运用可以做出很多出彩的效果。</p></blockquote><p>在一些博客站点上经常会见到一些多背景色的标签样式，颜色固定为几种，按顺序循环呈现。</p><p>使用js迭代并添加不同的样式固然可行，不过css3为我们提供了更便捷的方法–后代选择器。<br><a id="more"></a></p><p><code>:nth-of-type(n)</code><br><em>匹配同类型中的第n个同级兄弟元素。</em><br><em>n可以是一个数字，一个关键字，或者一个公式。</em></p><p>实现这次的需求要使用公式代入的方式，<code>nth-of-type(an+b)</code>。<br><em>a代表一个循环的大小，N是一个计数器（从0开始），以及b是偏移量。</em></p><p>假设我们需要4种标签颜色，就需要设置4个公式型的后代选择器，那么可以想到的第一个公式为<code>4n+0</code>，选取索引为4的倍数的元素。<br>于是就可以推出剩余的3个公式为<code>4n-1</code>、<code>4n-2</code>、<code>4n-3</code>。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>使用css3子级选择器实现多颜色标签样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    html &#123;</div><div class="line">        background: #333;</div><div class="line">    &#125;</div><div class="line">    .tags &#123;</div><div class="line">        width: 240px;</div><div class="line">        margin: 150px auto;</div><div class="line">        padding: 10px;</div><div class="line">        background: #ddd;</div><div class="line">    &#125;</div><div class="line">    .tags&gt;a &#123;</div><div class="line">        display: inline-block;</div><div class="line">        text-decoration: none;</div><div class="line">        color: #fff;</div><div class="line">        padding: 5px 10px;</div><div class="line">        margin: 0 5px 5px 0;</div><div class="line">        border-radius: 3px;</div><div class="line">        transition: all .5s;</div><div class="line">        -webkit-transition: all .5s;</div><div class="line">    &#125;</div><div class="line">    .tags&gt;a:hover &#123;</div><div class="line">        background: #666 !important;</div><div class="line">    &#125;</div><div class="line">    .tags&gt;a:nth-of-type(4n+0) &#123;</div><div class="line">        background: #337AB7;</div><div class="line">    &#125;</div><div class="line">    .tags&gt;a:nth-of-type(4n-1) &#123;</div><div class="line">        background: #5CB85C;</div><div class="line">    &#125;</div><div class="line">    .tags&gt;a:nth-of-type(4n-2) &#123;</div><div class="line">        background: #5BC0DE;</div><div class="line">    &#125;</div><div class="line">    .tags&gt;a:nth-of-type(4n-3) &#123;</div><div class="line">        background: #F0AD4E;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>css<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>css<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>css<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>css<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>css<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用css3后代选择器实现多背景色标签样式
    
    </summary>
    
    
      <category term="CSS3" scheme="http://imys.net/tags/CSS3/"/>
    
      <category term="selector" scheme="http://imys.net/tags/selector/"/>
    
  </entry>
  
  <entry>
    <title>使用逻辑运算符 || &amp;&amp; 简化javascript中if else选择结构</title>
    <link href="http://imys.net/20150424/js-simple-condition.html"/>
    <id>http://imys.net/20150424/js-simple-condition.html</id>
    <published>2015-04-24T03:49:30.000Z</published>
    <updated>2017-08-20T13:14:20.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>|| 和 &amp;&amp; 通常使用在条件表达式中，但是由于javascript语言的特殊性，这两个符号又被开发出了特别的使用技巧。</p></blockquote><a id="more"></a><h3 id="最基本的用法"><a href="#最基本的用法" class="headerlink" title="最基本的用法"></a>最基本的用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);  <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>);  <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="literal">false</span>);  <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">true</span>);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">false</span>);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="literal">true</span>);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="literal">false</span>);  <span class="comment">// false</span></div></pre></td></tr></table></figure><p>这是所有的编程语音通用的使用方法，毋庸置疑。</p><h3 id="javascript中可以这么用"><a href="#javascript中可以这么用" class="headerlink" title="javascript中可以这么用"></a>javascript中可以这么用</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> target, num;</div><div class="line">target = <span class="literal">undefined</span> || <span class="string">'defaultValue'</span>; <span class="comment">// defaultValue</span></div><div class="line">num = <span class="number">0</span> || <span class="number">1</span>; <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>你可以看成这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> target;</div><div class="line">target = <span class="literal">false</span> || <span class="string">'defaultValue'</span>; <span class="comment">// defaultValue</span></div><div class="line">num = <span class="literal">false</span> || <span class="number">1</span>; <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>因为在javascript中Object、function、非0的整数和字符串都为<code>true</code>，undefined、null和空字符串”” 为<code>false</code>。</p><p>但是javascript中却可以返回为<code>true</code>表达式的值，应该理解为“真值”和“假值”更贴切。</p><p><em>‘||’在javascript中的规则：如果||左侧表达式的值为真值，则返回左侧表达式的值；否则返回右侧表达式的值。</em></p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'真值'</span>||<span class="string">''</span>); <span class="comment">// 真值</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>||object); <span class="comment">// object</span></div></pre></td></tr></table></figure><p><em>‘&amp;&amp;’在javascript中的规则：如果&amp;&amp;左侧表达式的值为真值，则返回右侧表达式的值；否则返回左侧表达式的值。</em></p><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span> === <span class="number">1</span> &amp;&amp; <span class="number">2</span>) <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="number">1</span> &amp;&amp; <span class="number">2</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure><h3 id="于是有了高逼格的javascript代码"><a href="#于是有了高逼格的javascript代码" class="headerlink" title="于是有了高逼格的javascript代码"></a>于是有了高逼格的javascript代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> n=<span class="number">1</span>;</div><div class="line">((n === <span class="number">1</span>) &amp;&amp; (n = <span class="number">3</span>)) || ((n === <span class="number">3</span>) &amp;&amp; (n = <span class="number">6</span>)) || (n = <span class="number">2</span>);  <span class="comment">// 3</span></div><div class="line">((n === <span class="number">1</span>) &amp;&amp; (n = <span class="number">3</span>)) || ((n === <span class="number">3</span>) &amp;&amp; (n = <span class="number">6</span>)) || (n = <span class="number">2</span>);  <span class="comment">// 6</span></div><div class="line">((n === <span class="number">1</span>) &amp;&amp; (n = <span class="number">3</span>)) || ((n === <span class="number">3</span>) &amp;&amp; (n = <span class="number">6</span>)) || (n = <span class="number">2</span>);  <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">//以上代码等价于</span></div><div class="line"><span class="keyword">if</span>(n === <span class="number">1</span>) &#123;</div><div class="line">    n = <span class="number">3</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(n === <span class="number">3</span>) &#123;</div><div class="line">    n = <span class="number">6</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    n = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用逻辑运算符 || &amp;&amp; 简化javascript中if else选择结构
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>css3导航按钮图标样式切换效果</title>
    <link href="http://imys.net/20150420/css3-menu-style.html"/>
    <id>http://imys.net/20150420/css3-menu-style.html</id>
    <published>2015-04-20T05:29:44.000Z</published>
    <updated>2016-11-12T19:12:06.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纯css实现的导航按钮图标样式切换效果，图标样式是css画出来的，再辅以css3动画效果。<br><a id="more"></a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css3效果切换的导航按钮<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">  *&#123; </div><div class="line">    margin: 0; </div><div class="line">    padding: 0;</div><div class="line">  &#125;</div><div class="line">  body &#123;</div><div class="line">    background: #3B9DFF;</div><div class="line">  &#125;</div><div class="line">  .menuCtrl &#123;</div><div class="line">    display: block;</div><div class="line">    position: relative;</div><div class="line">    border: 5px solid #fff;</div><div class="line">    border-radius: 50%;</div><div class="line">    width: 30px;</div><div class="line">    height: 40px;</div><div class="line">    padding: 20px 25px;</div><div class="line">    margin: 150px auto;</div><div class="line">    transition: all 0.25s ease-in-out;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .menuCtrl .line &#123;</div><div class="line">    width: 35px;</div><div class="line">    height: 0;</div><div class="line">    border-bottom: 5px solid #fff;</div><div class="line">    position: relative;</div><div class="line">    margin-left: -2px;</div><div class="line">    transition: all 0.25s ease-in-out;</div><div class="line">  &#125;</div><div class="line">  .menuCtrl .line:nth-child(1) &#123;</div><div class="line">    top: 10px;</div><div class="line">  &#125;</div><div class="line">  .menuCtrl .line:nth-child(2) &#123;</div><div class="line">    top: 13px;</div><div class="line">  &#125;</div><div class="line">  .menuCtrl .line:nth-child(3) &#123;</div><div class="line">    top: 16px;</div><div class="line">  &#125;</div><div class="line">  .menuCtrl:hover &#123;</div><div class="line">    padding: 25px 30px;</div><div class="line">  &#125;</div><div class="line">  .menuCtrl:hover .line:nth-child(1) &#123;</div><div class="line">    width: 20px;</div><div class="line">    transform: rotateZ(-45deg) translateX(-3px) translateY(0px);</div><div class="line">  &#125;</div><div class="line">  .menuCtrl:hover .line:nth-child(2) &#123;</div><div class="line">    width: 40px;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  .menuCtrl:hover .line:nth-child(3) &#123;</div><div class="line">    width: 20px;</div><div class="line">    transform: rotateZ(45deg) translateX(-3px) translateY(0px);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"menuCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      css3导航按钮图标样式切换效果
    
    </summary>
    
    
      <category term="CSS3" scheme="http://imys.net/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>不链接页面在新窗口或标签页运行代码</title>
    <link href="http://imys.net/20150415/online-run-code.html"/>
    <id>http://imys.net/20150415/online-run-code.html</id>
    <published>2015-04-15T01:58:21.000Z</published>
    <updated>2016-11-12T19:24:50.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在一些IT博客或者论坛都有在新窗口或标签页直接运行当前页面内代码的功能，但却不是像一些资源网站里的直接预览资源页面。这样动态的运行代码，无疑是节省了很大服务器空间。</p></blockquote><p>前端网（W3Cfuns）就有这样的功能，用户可以直接运行博主笔记内的代码，问答论坛也一样。</p><p>查看了一下代码实现，原来是<a href="http://www.w3school.com.cn/jsref/met_win_open.asp" target="_blank" rel="external">window.open()</a>方法。<br><a id="more"></a></p><h3 id="语法重温"><a href="#语法重温" class="headerlink" title="语法重温"></a>语法重温</h3><p><code>window.open(URL,name,features,replace)</code></p><ul><li><code>URL</code> 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。</li><li><code>name</code> 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <code>&lt;a&gt;</code> 和 <code>&lt;form&gt;</code> 的属性 <code>target</code> 的值。如果该参数指定了一个已经存在的窗口，那么 <code>open()</code> 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，<code>features</code> 将被忽略。</li><li><code>features</code> 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</li><li><code>replace</code> 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。</li></ul><p>参数1<code>URL</code>省略会打开一个空白页，也就是<code>about:blank</code>页。不过<code>window.open()</code>方法居然是有返回值的，可以返回新页面的<code>window</code>对象。</p><p>如此的话，我们就能访问新页面的<code>DOM</code>，自然就可以写入代码了。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>新窗口或标签页运行代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"width:600px;height:150px;"</span> <span class="attr">id</span>=<span class="string">"code"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;我是运行在新窗口或标签页的代码。&lt;/h1&gt;"</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"runCode()"</span>&gt;</span>运行代码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runCode</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> example = <span class="built_in">window</span>.open(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>);</div><div class="line">        <span class="keyword">var</span> code = <span class="built_in">document</span>.getElementById(<span class="string">'code'</span>).value;</div><div class="line">        example.document.write(code)</div><div class="line">        example.focus();</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      不链接页面在新窗口或标签页运行代码
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js文本复制全兼容实例</title>
    <link href="http://imys.net/20150414/js-copytext.html"/>
    <id>http://imys.net/20150414/js-copytext.html</id>
    <published>2015-04-14T06:00:45.000Z</published>
    <updated>2016-11-12T19:20:58.699Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于文本复制本来就是<code>右键-&gt;复制</code>，或者<code>Ctrl+C</code>，很简单的事情。不过为了提升用户体验，就让我们找一个兼容性强的万全之策吧。</p></blockquote><p>纯JS实现的方式不能兼容到现代浏览器，看了Discuz和bootstrap上代码复制的实现，发现都是借用Flash来实现的。<br><a id="more"></a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Flash可以操作剪贴板，用一个透明的Flash覆盖到一个DOM元素上。点击DOM实际是点击了Flash，从而操作剪贴板。</p><p>需要用到一个JavaScript库：Zero Clipboard，和一个Flash文件。<br>另外要注意：<em>页面必须在放到服务器上，本地没有Flash权限。</em></p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JS文本复制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">610px</span>;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;</div><div class="line">        <span class="attribute">position</span>: relative;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">textarea</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">        <span class="attribute">resize</span>: none;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">        <span class="attribute">outline</span>: none;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#copy-btn</span> &#123;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">8px</span>;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#F7F7F9</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">right</span>: -<span class="number">2px</span>;</div><div class="line">        <span class="attribute">margin-top</span>: -<span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#clip-btn</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>JS文本复制实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"复制的内容区"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"copy-btn"</span>&gt;</span>点击复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"clip-btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ZeroClipboard.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> clip = <span class="literal">null</span>;</div><div class="line">  <span class="comment">// 设置Flash文件路径</span></div><div class="line">  ZeroClipboard.setMoviePath(<span class="string">"ZeroClipboard.swf"</span>);</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">copyCode</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    clip = <span class="keyword">new</span> ZeroClipboard.Client();</div><div class="line">    <span class="comment">// 设置鼠标悬浮样式 </span></div><div class="line">    clip.setHandCursor(<span class="literal">true</span>); </div><div class="line">    <span class="comment">// 点击复制</span></div><div class="line">    clip.addEventListener(<span class="string">'mouseOver'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      clip.setText(text);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 复制完成回调</span></div><div class="line">    clip.addEventListener( <span class="string">"complete"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">      alert(<span class="string">"复制成功！"</span>); </div><div class="line">      clip.destroy(); <span class="comment">//释放</span></div><div class="line">    &#125;); </div><div class="line">    <span class="comment">// Flash加载的目标容器</span></div><div class="line">    clip.glue(<span class="string">'clip-btn'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/* js实现 */</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">  &#125;</div><div class="line">  $(<span class="string">'copy-btn'</span>).onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> clipBtn = $(<span class="string">'clip-btn'</span>);</div><div class="line">    clipBtn.style.position = <span class="string">'absolute'</span>;</div><div class="line">    clipBtn.style.left = (e.clientX <span class="number">-55</span> )+<span class="string">'px'</span>;</div><div class="line">    clipBtn.style.top = (e.clientY - <span class="number">35</span>)+<span class="string">'px'</span>;</div><div class="line">    copyCode($(<span class="string">'content'</span>).value);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">/*jQuery实现*/</span></div><div class="line">  <span class="comment">// $('#copy-btn').mouseover(function() &#123;</span></div><div class="line">  <span class="comment">//   var t = $(this);</span></div><div class="line">  <span class="comment">//   var cobyText = t.prev().val();</span></div><div class="line">  <span class="comment">//   $('#clip-btn').css(&#123;</span></div><div class="line">  <span class="comment">//     position: 'absolute',</span></div><div class="line">  <span class="comment">//     left: t.offset().left,</span></div><div class="line">  <span class="comment">//     top: t.offset().top,</span></div><div class="line">  <span class="comment">//     zIndex: 999</span></div><div class="line">  <span class="comment">//   &#125;).mouseleave(function() &#123;</span></div><div class="line">  <span class="comment">//     clip.destroy();</span></div><div class="line">  <span class="comment">//   &#125;);</span></div><div class="line">  <span class="comment">//   copyCode(cobyText);</span></div><div class="line">  <span class="comment">// &#125;);</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><hr><ol><li>参考文章：<a href="http://www.jb51.net/article/58413.htm" target="_blank" rel="external">兼容主流浏览器的JS复制内容到剪贴板</a>&#160;<a href="#fnref-170:footnote">&#8617;</a></li></ol>]]></content>
    
    <summary type="html">
    
      js文本复制全兼容实例
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://imys.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS巧用border画小图形</title>
    <link href="http://imys.net/20150409/css-borde-shape.html"/>
    <id>http://imys.net/20150409/css-borde-shape.html</id>
    <published>2015-04-09T13:26:50.000Z</published>
    <updated>2017-08-20T13:57:23.703Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.imys.net/css-borde-shape.jpg" alt="CSS巧用border画小图形"></div><div class="image-caption">CSS巧用border画小图形</div></figure><p>css画三角形样式相信很多人都用过，比如 border-bottom设置宽度、颜色、实线，其他方向设置宽度和透明色就出现一个朝上的正三角形。</p><p>今天在看了 <strong>zyp199737</strong> 的笔记<a href="http://www.w3cfuns.com/blog-5460967-5404928.html" target="_blank" rel="external">css3巧用border做翻页效果</a>中一张图，突然想到设置2个方向是什么样式？是不是就是直角三角形呢？</p><p>做了下实验，发现不止可以画出直角三角形，而且还有书签的样式。<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    .shape &#123;</div><div class="line">        float: left;</div><div class="line">        margin-left: 50px;</div><div class="line">        width:0;</div><div class="line">        height:0;</div><div class="line">        border-width: 30px;</div><div class="line">        border-style: dashed dashed dashed dashed ;</div><div class="line">        border-color: transparent transparent transparent transparent ;</div><div class="line">    &#125;</div><div class="line">    /*三角形*/</div><div class="line">    .triangle &#123;</div><div class="line">        border-bottom: 30px solid #e66161;</div><div class="line">    &#125;</div><div class="line">    /*标签*/</div><div class="line">    .mark &#123;</div><div class="line">        border-left: 30px solid #e66161;</div><div class="line">        border-top: 30px solid #e66161;</div><div class="line">        border-right: 30px solid #e66161;</div><div class="line">    &#125;</div><div class="line">    /*直角三角形*/</div><div class="line">    .right-triangle &#123;</div><div class="line">        border-left: 30px solid #e66161;</div><div class="line">        border-bottom: 30px solid #e66161;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shape triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shape mark"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shape right-triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CSS巧用border画小图形
    
    </summary>
    
    
      <category term="CSS" scheme="http://imys.net/tags/CSS/"/>
    
      <category term="border" scheme="http://imys.net/tags/border/"/>
    
  </entry>
  
  <entry>
    <title>jQuery实现通用的单页面锚点平滑滚动</title>
    <link href="http://imys.net/20150407/jquery-anchor-scroll.html"/>
    <id>http://imys.net/20150407/jquery-anchor-scroll.html</id>
    <published>2015-04-07T05:45:03.000Z</published>
    <updated>2016-11-12T19:19:36.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很多商品展示页，专题页等都会用到。<br><a id="more"></a></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>锚链接平滑滚动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">min-height</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.top</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, .6);</div><div class="line">        <span class="attribute">position</span>: fixed;</div><div class="line">        <span class="attribute">z-index</span>: <span class="number">9</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span> &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">        <span class="attribute">text-decoration</span>: none;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.top</span> <span class="selector-tag">a</span> &#123;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.top</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, .4);</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.page</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">min-height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#3C98FF</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">h1</span> &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">        <span class="attribute">padding-top</span>: <span class="number">20%</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div-1"</span>&gt;</span>div-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div-2"</span>&gt;</span>div-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div-3"</span>&gt;</span>div-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div-4"</span>&gt;</span>div-4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-1"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-2"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第二页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-3"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第三页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div-4"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第四页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'a[href*=#]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="comment">// 此处正则用于转换带页面URL的锚点，如 http://abc.html#div,具体正则格式据实际情况而定</span></div><div class="line">        <span class="keyword">var</span> targetId = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>).replace(<span class="regexp">/\w+.html/</span>,<span class="string">''</span>);</div><div class="line">        $(<span class="string">"html,body"</span>).animate(&#123;<span class="attr">scrollTop</span>: $(targetId).offset().top&#125;, <span class="number">1000</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      jQuery实现通用的单页面锚点平滑滚动
    
    </summary>
    
    
      <category term="jQuery" scheme="http://imys.net/tags/jQuery/"/>
    
  </entry>
  
</feed>

{"title":"Html5调用手机相机并压缩、上传","slug":"webapp-input-use-camera","date":"2015-09-16T08:21:28.000Z","updated":"2016-11-12T19:38:12.506Z","comments":true,"path":"api/articles/webapp-input-use-camera.json","excerpt":"<p>近日刚做的一个功能，要在app里使用内嵌页面进行图像的上传。<br>从功能上看，原生的实现应该是最好的。毕竟页面上所有的东西都隔着一个浏览器，所有的实现都要依赖浏览器提供的接口，不同的浏览器对接口的实现又有差异……到最后又会陷入兼容性的大坑!<br>吐槽归吐槽，但是折腾的劲头不能丢！</p>","content":"<p>近日刚做的一个功能，要在app里使用内嵌页面进行图像的上传。<br>从功能上看，原生的实现应该是最好的。毕竟页面上所有的东西都隔着一个浏览器，所有的实现都要依赖浏览器提供的接口，不同的浏览器对接口的实现又有差异……到最后又会陷入兼容性的大坑!<br>吐槽归吐槽，但是折腾的劲头不能丢！</p><a id=\"more\"></a><h2 id=\"使用input-file-camera-属性调用相机\"><a href=\"#使用input-file-camera-属性调用相机\" class=\"headerlink\" title=\"使用input file[camera]属性调用相机\"></a>使用input file[camera]属性调用相机</h2><p>简直<strong>So easy！</strong></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*;\"</span> <span class=\"attr\">capture</span>=<span class=\"string\">\"camera\"</span> &gt;</span></div></pre></td></tr></table></figure><p>只需要这么一条简单的代码，在手机浏览器点击就可以打开相机了。</p><p><code>capture</code>是什么？其实就是对打开方式的设置。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- capture=camcorder，调用手机摄像功能 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/*\"</span> <span class=\"attr\">capture</span>=<span class=\"string\">\"camcorder\"</span> &gt;</span> </div><div class=\"line\"><span class=\"comment\">&lt;!-- capture=microphone，调用手机录音功能 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"audio/*\"</span> <span class=\"attr\">capture</span>=<span class=\"string\">\"microphone\"</span> &gt;</span></div></pre></td></tr></table></figure><p>魅族MX5测试结果：</p><ul><li>谷歌浏览器可以打开相机和摄像功能，其他方式均为相机、图库、文件管理器等混合选择项。</li><li>自带浏览器打开均为文件管理器。</li></ul><p>由此说明此属性兼容性还是个问题。不过这并不能阻止我继续折腾下去！</p><h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><p>在如今这个手机普遍千万像素的时代，一张照片动辄5M的大小。作为一个良心的开发者，我们是要为用户的流量负责的。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>).addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\"></div><div class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        compress(<span class=\"keyword\">this</span>.result);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    reader.readAsDataURL(<span class=\"keyword\">this</span>.files[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure><p>不管文件域是用何种方式打开的，都可以在 <code>change</code> 事件中获取到选择的文件或拍摄的照片。</p><p>创建一个<code>FileReader</code>对象，我们需要调用<code>readAsDataURL</code>把文件转换为<code>base64</code>图像编码，如<code>data:image/jpeg;base64……</code>这种格式。<br><code>onload</code>是一个异步回调，当文件读取完执行该方法内代码。<code>this.result</code>记录读取结果，如果读取失败，该值为<code>null</code>。在这里进行图片压缩的具体操作。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compress = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image(),</div><div class=\"line\">        maxH = <span class=\"number\">160</span>;</div><div class=\"line\"></div><div class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> cvs = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>),</div><div class=\"line\">            ctx = cvs.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(img.height &gt; maxH) &#123;</div><div class=\"line\">            img.width *= maxH / img.height;</div><div class=\"line\">            img.height = maxH;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        cvs.width = img.width;</div><div class=\"line\">        cvs.height = img.height;</div><div class=\"line\"></div><div class=\"line\">        ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, cvs.width, cvs.height);</div><div class=\"line\">        ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, img.width, img.height);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> dataUrl = cvs.toDataURL(<span class=\"string\">'image/jpeg'</span>, <span class=\"number\">0.6</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 上传略</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    img.src = res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>创建一个<code>Image</code>对象，给<code>src</code>属性赋值为读取结果，同样在<code>onload</code>异步回调中编写处理图片的代码。<br>这里就要开始使用<code>canvas</code>进行图片压缩了。</p><p>首先是尺寸按比例缩放，然后把图片绘到画布上，最后调用<code>toDataURL</code>方法压缩图像质量。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">context.toDataURL(<span class=\"string\">'MIME类型'</span>, 图像质量<span class=\"number\">0</span><span class=\"number\">-1</span>);  <span class=\"comment\">// 该方法返回base64图像编码</span></div></pre></td></tr></table></figure><p>代码里省略了一些校监操作，如文件类型约束和文件大小判断（小于一定值可以不压缩）。<br>最后就是把数据发送到后端的操作，这里就不说了。</p><h2 id=\"Html5调用摄像头\"><a href=\"#Html5调用摄像头\" class=\"headerlink\" title=\"Html5调用摄像头\"></a>Html5调用摄像头</h2><p>通过以上的代码已经可以实现调用手机相机拍照、压缩、上传这一整套流程了。<br>不过在折腾的过程中也发现了一种调用摄像头的方法。注意，是<code>摄像头</code>！使用input调用的是相机。其中的差别就是摄像头是只捕获画面，相机还包括原生的一些拍照、设置等控件。</p><p>通过对摄像头的调用可以做很多有趣的事，比如拍照美化、滤镜等。可以说实现一个第三方相机是没问题的。<br>之前下载过一款安卓相机APP，不到100K的大小，可以实现拍照的一些风格化，也许就是Html5实现的呢。</p><p>需要用到的是 <strong>getUserMedia API</strong>，具体的实现这里就不贴了。</p>","categories":[],"tags":[{"name":"Html5","path":"api/tags/Html5.json"},{"name":"Webapp","path":"api/tags/Webapp.json"},{"name":"File","path":"api/tags/File.json"}]}
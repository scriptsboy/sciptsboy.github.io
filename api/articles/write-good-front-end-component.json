{"title":"编写良好的前端组件","slug":"write-good-front-end-component","date":"2017-03-17T02:22:38.000Z","updated":"2018-04-26T17:06:36.891Z","comments":true,"path":"api/articles/write-good-front-end-component.json","excerpt":"<p>Vue 和 React 的大红大火，带来的是组件化和数据驱动的开发方式。Demo 很美好，但如果没有一定的实际开发经验积累，总是能把一个功能模块写成浆糊。<br>依托于 Webpack 等构建工具，使得前端代码具备了后端编程语言的代码组织能力，摆脱了传统的「一泻而下」式的代码编写。至此，作为前端也该对自己的代码有更高的要求。<br>","content":"<p>Vue 和 React 的大红大火，带来的是组件化和数据驱动的开发方式。Demo 很美好，但如果没有一定的实际开发经验积累，总是能把一个功能模块写成浆糊。<br>依托于 Webpack 等构建工具，使得前端代码具备了后端编程语言的代码组织能力，摆脱了传统的「一泻而下」式的代码编写。至此，作为前端也该对自己的代码有更高的要求。<br><a id=\"more\"></a></p><h2 id=\"组件职责划分\"><a href=\"#组件职责划分\" class=\"headerlink\" title=\"组件职责划分\"></a>组件职责划分</h2><blockquote><p>一个组件只做一件事，基于功能做好职责划分。</p></blockquote><h3 id=\"无状态组件\"><a href=\"#无状态组件\" class=\"headerlink\" title=\"无状态组件\"></a>无状态组件</h3><p>公司用的是 Vue，最近又接触了下 React。<br>对比来说，React 由于 jsx 式（js和html混合）的写法，加上构建工具的模块化管理，一个文件中可以有多个组件。还支持纯函数式的<strong>无状态组件</strong>，只是单纯的接受数据渲染 DOM，没有生命周期等额外的概念。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/no-status-component.jpg\" alt=\"无状态组件\"></div><div class=\"image-caption\">无状态组件</div></figure><figure class=\"highlight js\"><figcaption><span>React</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 无状态组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> noStatus = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &lt;h1&gt;&#123;props.title&#125;&lt;<span class=\"regexp\">/h1&gt;</span></div></pre></td></tr></table></figure><p>看起来就像一个简单的模版渲染过程。</p><p>Vue 中没有<strong>无状态组件</strong>的概念，但实际上也存在类似功能的组件形式。比如图标组件，只接收 <code>props</code> 渲染模版，不做多余的动作。</p><figure class=\"highlight html\"><figcaption><span>Vue</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"'icon-' + name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"built_in\">String</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id=\"端对端组件\"><a href=\"#端对端组件\" class=\"headerlink\" title=\"端对端组件\"></a>端对端组件</h3><p>端对端组件指的是不需要依赖外部给予，自身就可以负责从数据获取到展示过程的组件。<br>这类组件在业务开发中也很常见，比如公共的分类选择器。由于到多处调用，如果每次用的时候都由外部请求数据在调用组件展示，那么这个请求数据的代码显然是个重复的逻辑，索性直接就写入到组件内部了。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/end-to-end-component.jpg\" alt=\"端对端组件\"></div><div class=\"image-caption\">端对端组件</div></figure><blockquote><p>当然端对端组件也有缺陷。就是每次调用不管数据有没有变化，都会重新请求，造成冗余。如何改善，那又是另一个话题了。这篇文章中有提到：<a href=\"https://github.com/xufei/blog/issues\" target=\"_blank\" rel=\"external\">徐飞：复杂单页应用的数据层设计</a></p></blockquote><h3 id=\"UI组件\"><a href=\"#UI组件\" class=\"headerlink\" title=\"UI组件\"></a>UI组件</h3><p>UI 组件指的是界面扩展类组件，比如：输入框、表格、树、下拉框等。像 Element、Vux 等组件库均属于此类组件。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/ui-component.jpg\" alt=\"UI组件\"></div><div class=\"image-caption\">UI组件</div></figure><p>此类组件的特点是：复用性强，只通过 <code>props</code>、<code>events</code> 和 <code>slots</code> 等组件接口与外部通信。<br>更像是一个对 HTML 的扩展标签。</p><h3 id=\"业务组件\"><a href=\"#业务组件\" class=\"headerlink\" title=\"业务组件\"></a>业务组件</h3><p>业务组件通常是根据最小业务状态抽象而出，有些业务组件也具有一定的复用性，但大多数是一次性组件。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/service-component.jpg\" alt=\"业务组件\"></div><div class=\"image-caption\">业务组件</div></figure><p>之前提到的组件数据或自给自足（端对端组件），或来自 <code>props</code>，那么业务组件的数据呢？</p><ol><li>props</li><li>global state</li></ol><p>只能是以上两种了，如果还是组件内部去请求数据，那么就还是属于端对端组件了。</p><h3 id=\"容器组件\"><a href=\"#容器组件\" class=\"headerlink\" title=\"容器组件\"></a>容器组件</h3><p>这类组件就是一个盒子，一般当作一个业务子模块的入口，比如一个路由指向的组件。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/container-component.jpg\" alt=\"容器组件\"></div><div class=\"image-caption\">容器组件</div></figure><p>通常是这种形式：</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">moduleA</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">moduleA</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">moduleB</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">moduleB</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">moduleC</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">moduleC</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>容器组件内的子组件通常具有业务或数据依赖关系。</li><li>如果没有使用全局状态管理，那么容器组件就是负责通过 <code>props</code> 分发数据到各个子组件，在通过 <code>events</code> 处理各个子组件的业务响应。此时容器组件需要做数据请求工作。</li><li>如果使用了全局状态管理，那么容器内部的业务组件可以自行调用全局状态处理业务。但并不是说此时容器组件什么都不用干了。即使不需要请求数据，还是有许多组件间或一个业务模块内的诸多统筹工作要做。</li></ul><p>把上面的各类组件组装到一起就组成一个业务模块。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/module-and-components.jpg\" alt=\"业务模块\"></div><div class=\"image-caption\">业务模块</div></figure><h2 id=\"组件设计原则\"><a href=\"#组件设计原则\" class=\"headerlink\" title=\"组件设计原则\"></a>组件设计原则</h2><h3 id=\"尽可能的减少状态\"><a href=\"#尽可能的减少状态\" class=\"headerlink\" title=\"尽可能的减少状态\"></a>尽可能的减少状态</h3><ol><li>如果一个数据可以由另一个 state 变换得到，那么这个数据就不是一个 state。只需要写一个变换的处理函数，在 Vue 中可以使用计算属性。</li><li>如果你的 state 是一个数组，而模版最外层是渲染这个数组，那么你需要做的事是把渲染的项作为一个组件，只接受一个单级对象形式的数据，由外部决定这个组件的展示次数。</li><li>如果一个数据是固定的，不会变化的常量，那么这个数据就如同 HTML 固定的站点标题一样，写死或作为全局配置属性等，不属于 state。</li><li>如果一个数据需要从外部得到，它应该属于 props。</li><li>如果组件和兄弟组件拥有相同的 state，那么这个 state 应该放到更高的层级中，使用 props 传递到两个组件中。</li></ol><h3 id=\"合理的依赖关系\"><a href=\"#合理的依赖关系\" class=\"headerlink\" title=\"合理的依赖关系\"></a>合理的依赖关系</h3><ol><li>父组件不依赖子组件。要做到当我们把子组件删除后，只是丢失了一个功能，或一个模块等，而不会造成父组件及兄弟组件功能异常。</li><li>子组件基于父组件传递 props 作出个性化展示。</li></ol><h3 id=\"扁平化参数\"><a href=\"#扁平化参数\" class=\"headerlink\" title=\"扁平化参数\"></a>扁平化参数</h3><p>像 HTML 原生元素那样，只接受原始类型（字符串、数值、布尔值和函数）作为属性，避免复杂的对象。当然，数据除外。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- good --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span></span></div><div class=\"line\">  <span class=\"attr\">label</span>=<span class=\"string\">\"hello\"</span></div><div class=\"line\">  <span class=\"attr\">:actived</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">  <span class=\"attr\">:width</span>=<span class=\"string\">\"600\"</span></div><div class=\"line\">  <span class=\"attr\">:on-show</span>=<span class=\"string\">\"show\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- bad --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"myConfig\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure><h3 id=\"良好的接口设计\"><a href=\"#良好的接口设计\" class=\"headerlink\" title=\"良好的接口设计\"></a>良好的接口设计</h3><ol><li>把组件内部可以完成的工作做到极致。虽然提倡拥抱变化，但接口不是越多越好。</li><li>如果常量变为 props 能应对更多的场景，那么就可以作为 props。原有的常量可作为默认值。</li><li>如果组件不能提供调用者所需求的功能，那么这个组件的接口还不够完善。</li><li>如果需要为了某一调用者编写大量特定需求的代码，那么可以考虑通过扩展等方式构建一个新的组件。</li><li>保证组件的属性和事件足够的给大多数的组件使用。</li></ol><h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>设计模式六大原则在组件设计中也有适用的地方。</p>","categories":[],"tags":[{"name":"Vue","path":"api/tags/Vue.json"},{"name":"前端","path":"api/tags/前端.json"},{"name":"组件","path":"api/tags/组件.json"},{"name":"React","path":"api/tags/React.json"}]}
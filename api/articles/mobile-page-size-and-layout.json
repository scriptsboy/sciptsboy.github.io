{"title":"移动端页面开发关键—尺寸和布局","slug":"mobile-page-size-and-layout","date":"2015-11-07T15:02:29.000Z","updated":"2016-11-12T19:23:58.139Z","comments":true,"path":"api/articles/mobile-page-size-and-layout.json","excerpt":"<p>早上去公司加了半天班（带薪的），为APP上线做了个专题介绍页。当然现在的主题不是介绍在这个专题中我用了哪些技术、实现了何种酷炫的特效。实际上我为了赶时间，我破天荒的没有贯彻自己的一贯作风—<em>造轮子</em>，而是直接引了一个第三方库。<br>在这个APP开发中，我负责内嵌网页的开发，这也是我第一次涉足一个完整的移动端开发项目，以往只写过一些活动分享页、专题页。</p><p>对于页面兼容性影响最大的两个因素就是“尺寸”和“布局”。好在之前通过社区、博客等看过此类文章，已有了足够的认识，这次项目“实践”的成分更多。<br>","content":"<p>早上去公司加了半天班（带薪的），为APP上线做了个专题介绍页。当然现在的主题不是介绍在这个专题中我用了哪些技术、实现了何种酷炫的特效。实际上我为了赶时间，我破天荒的没有贯彻自己的一贯作风—<em>造轮子</em>，而是直接引了一个第三方库。<br>在这个APP开发中，我负责内嵌网页的开发，这也是我第一次涉足一个完整的移动端开发项目，以往只写过一些活动分享页、专题页。</p><p>对于页面兼容性影响最大的两个因素就是“尺寸”和“布局”。好在之前通过社区、博客等看过此类文章，已有了足够的认识，这次项目“实践”的成分更多。<br><a id=\"more\"></a></p><h2 id=\"尺寸\"><a href=\"#尺寸\" class=\"headerlink\" title=\"尺寸\"></a>尺寸</h2><p>在移动端页面，我用到的尺寸单位有<code>em</code>、<code>rem</code>、<code>vw</code>。<code>px</code>基本不用，但我会设置Dom根元素<code>html</code>字体大小为<code>14px</code>，一来方便<code>em</code>和<code>rem</code>的尺寸计算，二来<code>14px</code>是最常用的字体大小。</p><blockquote><p>常规浏览器默认字体大小为<code>16px</code>，最小字体为<code>12px</code>。</p></blockquote><h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>首先你要有这样一个基础的认知：</p><blockquote><p>假如一个元素没有重设字体大小，那么它的字体大小会继承父级元素，如果父级也没有设置大小，那么依次类推一直追溯到<code>body</code>、<code>html</code>。</p></blockquote><p><code>em</code>是相对于当前元素字体大小计算像素值的，计算方法是<code>em值 * 字体大小</code>。</p><p><strong>举例：</strong><br>一个元素设置了高度为<code>2em</code>，那么实际像素值为<code>2 * 14px = 28px</code>，而一旦这个元素重设了字体大小为<code>2em</code>，那么该元素高度值为<code>2 * 28px = 56px</code>。另外，其后的子元素的计算基数都会改变。</p><p>使用<code>em</code>时一旦有设置字体大小的样式出现就需要注意重新计算一些属性值大小了。</p><h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>与 <code>em</code> 相比，这货看起来多了一个字母，显然是属于升级版本。<br><code>rem</code>是始终相对与 Dom 根元素<code>html</code>来计算像素值的。不管当前元素字体如何设置，计算时字体大小仍然以<code>html</code>的字体设置为基准。</p><h3 id=\"vw\"><a href=\"#vw\" class=\"headerlink\" title=\"vw\"></a>vw</h3><p><code>vw</code>指的的当前屏幕宽度，与之对应的还有 <code>vh</code>，表示屏幕高度。如果屏幕宽为 360px，那么 <code>100vw = 360px</code>。</p><p>是否感觉并没有什么卵用？别着急，下面说一下我的一次适用经历。</p><p><strong>html：</strong></p><pre><code>&lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;inner&quot;&gt;\n        &lt;div class=&quot;cont cont-1&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;cont cont-2&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;cont cont-3&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;div&gt;\n</code></pre><p><strong>css：</strong></p><pre><code>.box {\n    width: 100%;\n    overflow: hidden;\n}\n.inner {\n    width: 300%;\n}\n.cont {\n    float: left;\n    width: 100%;\n}\n</code></pre><p>以上代码用以实现三屏的左右切换效果，外层容器<code>.box</code>和三个内容块宽度为屏幕宽度，三个内容块设置了左浮动样式。此时，内层容器<code>.inner</code>需要有3倍的屏幕宽度以承载三个内容块。<br>但是由于宽度继承的关系，在内层容器<code>.inner</code>宽度改变后，内容块的宽度计算基数也改变了。此时设置的100%是等于父级元素宽度的，也就是三倍屏宽。</p><p>使用js是很容易解决这个问题的，不过<code>vw</code>显然是可以适用这个场景的。<br>只需要如下设置便可解决问题。</p><pre><code>.cont { width: 100vw; }\n</code></pre><p>该属性在兼容性为android 4.4+，谨慎使用。</p><h3 id=\"devicePixelRatio\"><a href=\"#devicePixelRatio\" class=\"headerlink\" title=\"devicePixelRatio\"></a>devicePixelRatio</h3><p>在一个图表页中，我用<code>canvas</code>画了个饼图。发现在手机屏幕中区块颜色显得模糊。于是搜索资料就找到了这个属性，<code>window.devicePixelRatio</code>。<br>目前我对这个属性的理解还不深，基本的理解为：屏幕缩放比。传送门：<a href=\"http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/\" target=\"_blank\" rel=\"external\">张鑫旭：设备像素比devicePixelRatio简单介绍</a></p><p>我们通过写的css中像素仅为逻辑像素，就是你看到的宽度，而实际上手机屏幕单个点是可能存在多个像素的。</p><p>如果是常规页面元素是用不到这个属性的，而<code>canvas</code>的真实宽度和css宽度是不一致的。<br>计算方法为：<code>canvas.width = canvas.style.width * devicePixelRatio</code>。</p><p>需要注意：一旦重设了canvas的真实宽度，那么canvas之上的一切元素都需要乘以devicePixelRatio进行缩放。</p><h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><p>在PC上为了兼容可恶的IE不得不使用大量的浮动来进行块级元素的并行排行。而在移动端我们有了更好的选择，但不是<code>inline-block</code>，而是<code>flex</code>。</p><p>使用flex可以轻易的实现等宽、散列、垂直居中、多行排列、底部对齐等等各种布局。</p><p>定义一个flex容器</p><pre><code>.flex-row {\n    display: flex;\n}\n</code></pre><p>通过设置容器属性，可以呈现不同的排列对齐方式。</p><h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p>定义容器换行方式，默认不换行。可设置换行和反向换行。</p><h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>排列方向，默认子元素从左到右顺序排列。通过设置该值可以实现反向排列或垂直方向的上下排列。</p><h3 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h3><p>主轴（水平方向）对齐方式，默认左对齐。可以实现居中、右对齐、等宽间隔等排列。</p><h3 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h3><p>侧轴（垂直）对齐方式。可实现垂直居中、底部对齐、基线对齐等。</p><h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>多轴垂直对齐方式。</p><p>最后附上Demo：<a href=\"../demo/flex.html\">flex常用布局</a></p><p><strong>参考：</strong></p><ul><li><a href=\"http://www.w3cplus.com/css3/flexbox-basics.html\" target=\"_blank\" rel=\"external\">大漠：Flexbox——快速布局神器</a></li><li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">阮一峰：Flex 布局教程：语法篇</a></li><li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"external\">阮一峰：Flex 布局教程：实例篇</a></li></ul>","categories":[],"tags":[{"name":"移动端","path":"api/tags/移动端.json"},{"name":"devicePixelRatio","path":"api/tags/devicePixelRatio.json"},{"name":"em","path":"api/tags/em.json"},{"name":"rem","path":"api/tags/rem.json"},{"name":"vw","path":"api/tags/vw.json"},{"name":"flex","path":"api/tags/flex.json"}]}
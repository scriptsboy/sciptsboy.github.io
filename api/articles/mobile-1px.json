{"title":"你以为你写的1px就是1px吗？","slug":"mobile-1px","date":"2016-01-27T14:33:05.000Z","updated":"2016-11-12T19:23:37.435Z","comments":true,"path":"api/articles/mobile-1px.json","excerpt":"<p>“这一行的分割线高了一点。”<br>好的，减小行高, 加点上下内边距。</p><p>“这几个元素要两端对齐。”<br>好的，flex没有解决不了的布局，<code>justify-content: space-between;</code>搞定。</p><p>……</p><p>“这个图标颜色不对，应该是#999。”<br>好的，我改…等等，明明就是 #999 啊，这分明是想被打脸的节奏。打开页面，右键图标，审查元素，截图。<br>是不是 999 ？是不是 999 ？？是不是 999 ？？？</p><p>“所有的下边框都应该是1px。”<br>我看到这个问题的瞬间，感觉像在侮辱我的智商。边框 1px 这么常用的样式，我还会写错不成？</p><p>正当准备继续“打脸”时，突然我的好奇心上来了。关于 <strong>1px 边框在移动设备上看起来比较粗</strong> 这个问题，我也曾经想过。<br>因为页面其他内容看起来都是正常的，所以我一直觉得这是移动设备浏览器的渲染问题，属于外部原因。<br>也曾设置过 .5px ，但显然浏览器并不买账。<br>","content":"<p>“这一行的分割线高了一点。”<br>好的，减小行高, 加点上下内边距。</p><p>“这几个元素要两端对齐。”<br>好的，flex没有解决不了的布局，<code>justify-content: space-between;</code>搞定。</p><p>……</p><p>“这个图标颜色不对，应该是#999。”<br>好的，我改…等等，明明就是 #999 啊，这分明是想被打脸的节奏。打开页面，右键图标，审查元素，截图。<br>是不是 999 ？是不是 999 ？？是不是 999 ？？？</p><p>“所有的下边框都应该是1px。”<br>我看到这个问题的瞬间，感觉像在侮辱我的智商。边框 1px 这么常用的样式，我还会写错不成？</p><p>正当准备继续“打脸”时，突然我的好奇心上来了。关于 <strong>1px 边框在移动设备上看起来比较粗</strong> 这个问题，我也曾经想过。<br>因为页面其他内容看起来都是正常的，所以我一直觉得这是移动设备浏览器的渲染问题，属于外部原因。<br>也曾设置过 .5px ，但显然浏览器并不买账。<br><a id=\"more\"></a></p><p>搜索关键字<strong>1px border</strong>，找到了问题所在。</p><h2 id=\"devicePixelRatio\"><a href=\"#devicePixelRatio\" class=\"headerlink\" title=\"devicePixelRatio\"></a>devicePixelRatio</h2><p>说来惭愧，关于 devicePixelRatio，我也算是有使用经验的人了，怎么就没有想到呢。</p><p>简单举例一下，我的 MX5 分辨率是 1920*1080，但是实际屏幕物理像素是 640*360，换算得出 devicePixelRatio = 3。<br>也就是说屏幕中的<code>1点 = 3px</code>。</p><p>设计师提出的图标颜色不对的问题也在于此，因为颜色也受益于分辨率。</p><h2 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h2><p>这一切都是 viewport 在作怪！</p><p>我们在开发手机页面时，都会这样设置。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"</span>&gt;</span></div></pre></td></tr></table></figure><ul><li><code>width=device-width</code>: 设置浏览器内容宽度为设备物理像素宽度。</li><li><code>initial-scale=1</code>: 缩放比为1，后面两个属性为最大和最小缩放比。</li><li><code>user-scalable=no</code>: 禁止用户手动缩放。</li></ul><p>用 1920*1080 分辨率的手机打开一个没有添加 viewport 的PC站点，横屏状态是可以完整的出页面内容的。因为这个时候的 1px 就是 1px。</p><h2 id=\"还原分辨率\"><a href=\"#还原分辨率\" class=\"headerlink\" title=\"还原分辨率\"></a>还原分辨率</h2><p>知道了问题的原因就对症下药了。</p><p>可以根据<code>window.devicePixelRatio</code>来动态修改屏幕缩放比，还原真实分辨率。<br>还有一个问题。</p><p><strong>分辨率还原了，那岂不是所有元素的尺寸数值都需要重新计算了？</strong><br>如果你的 css 没有使用 em 和 rem 为单位的话，那么恭喜你，一个一个慢慢改吧。<br>而使用 em 和 rem 为单位就简单多了，只需要动态修改根元素字体大小就行了。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'vp'</span>);</div><div class=\"line\">        dpr = <span class=\"built_in\">window</span>.devicePixelRatio,</div><div class=\"line\">        html = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'html'</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">        vpVlue = <span class=\"string\">'width=device-width, initial-scale=X, maximum-scale=X, minimum-scale=X, user-scalable=no'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(dpr) &#123;</div><div class=\"line\">        vp.content = vpVlue.replace(<span class=\"regexp\">/X/g</span>, (<span class=\"number\">1</span> / dpr));</div><div class=\"line\">        html.style.fontSize = (<span class=\"number\">14</span> * dpr) + <span class=\"string\">'px'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure><p>这可以直接加到头部模版中。</p><p>关于<strong>修改根元素字体大小</strong>也可以使用 css媒体查询的方式。</p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">28px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">42px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><p>本来 js 代码我是放到 body 闭合前的。<br>viewport 初始缩放值是 1 ，根元素初始字体大小是 14px，我的手机 devicePixelRatio 是 3。按照浏览器加载顺序，等执行到 js 前，页面内容应该 1/3 的大小；执行完 js 后，页面恢复实际大小，整个页面居然出现了类似于<code>transform: scale(1)</code>般的过渡效果。</p><p>为了让用户更早的看到页面内容，我还是决定放到头部了。</p><h2 id=\"问题更新\"><a href=\"#问题更新\" class=\"headerlink\" title=\"问题更新\"></a>问题更新</h2><p>以上的思路和代码确实解决了问题，至少我在手机浏览器上测试是OK的。之后在 APP 中嵌入后发现没有效果，页面内容都因为字号修改被放大了。<br>我怀疑是安卓端的某些配置的原因，但是不了解的事又不好乱发言。</p><p>最后抽了一个闲工夫，把安卓环境搭了起来，看着 WebView 的API，自己写了个测试DEMO。<br>问题解决了。</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">webview.getSettings().setUseWideViewPort(true);  // 自适应手机屏幕</div></pre></td></tr></table></figure><p>从方法名就很容易理解这个配置项与 viewport 存在着关系。<br>问题解决了，我要去安卓那边装逼了。</p>","categories":[],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"devicePixelRatio","path":"api/tags/devicePixelRatio.json"},{"name":"em","path":"api/tags/em.json"},{"name":"Mobile","path":"api/tags/Mobile.json"},{"name":"Webview","path":"api/tags/Webview.json"},{"name":"Viewport","path":"api/tags/Viewport.json"}]}
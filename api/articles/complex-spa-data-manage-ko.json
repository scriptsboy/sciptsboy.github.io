{"title":"复杂单页应用数据管理总结","slug":"complex-spa-data-manage-ko","date":"2018-03-19T13:24:35.000Z","updated":"2018-03-20T12:17:43.167Z","comments":true,"path":"api/articles/complex-spa-data-manage-ko.json","excerpt":"<p>过去的一年都扎在 SPA 应用开发里了，直到现在偶尔还会回顾和思考关于数据管理方面还有哪些可以改善的地方。过年后在找工作的期间，发现有些面试官都理解不了我描述的项目经历中的项目复杂度，也许是所在城市（郑州）的原因，水太浅。现在对过去的一些经验做一下总结，也期望与相关领域的开发者一起交流。</p>","content":"<p>过去的一年都扎在 SPA 应用开发里了，直到现在偶尔还会回顾和思考关于数据管理方面还有哪些可以改善的地方。过年后在找工作的期间，发现有些面试官都理解不了我描述的项目经历中的项目复杂度，也许是所在城市（郑州）的原因，水太浅。现在对过去的一些经验做一下总结，也期望与相关领域的开发者一起交流。</p><a id=\"more\"></a><h2 id=\"为何复杂\"><a href=\"#为何复杂\" class=\"headerlink\" title=\"为何复杂\"></a>为何复杂</h2><p>复杂单页应用的特点：</p><ul><li>无刷新体验，全靠 Ajax 请求或 WebSocket 推送更新数据</li><li>一种数据显示在多个视图区块</li><li>存在使用率高的热数据，可随时调出并保持数据新鲜</li></ul><p>想象一下这样的场景：</p><p>视图右上角显眼处显示了当前用户相关的头像、名字等用户信息。进入一个项目模块，显示了所有的有权限或公开项目，每个项目块上都展示该项目的管理者和参与者（1~N 个用户信息）。点击项目进去项目下的任务列表，每个任务块上都展示了该任务的负责人和参与人。</p><p>假设该用户修改的用户头像，则该用户 UI 右上角头像需要更新，其次是项目列表或任务列表中，所有包含该用户头像展示的地方需要更新。最后是其他在线用户的 UI 上的项目或任务列表中存在该用户信息，也需要更新。</p><h2 id=\"核心实现\"><a href=\"#核心实现\" class=\"headerlink\" title=\"核心实现\"></a>核心实现</h2><p>做一个复杂的单页应用一定需要后端的支持和配合，前端对接口和推送的数据结构要有话语权，如果做不到这一点后续的各种实现会非常麻烦。</p><p>由于项目使用了基于 Vue 的技术栈来开发，早期我们就根据 Vue 的特点制定了数据管理的核心思想：</p><ul><li>API 只针对单一数据模型返回数据，所有视图的数据聚合、过滤等由前端完成</li><li>前端按模块存储数据，由视图层拼装业务数据</li></ul><p>整体下来，所有的数据从请求到视图渲染之前都是单一模型的数据，只到视图层渲染时才根据业务去组合需要的数据。</p><p>这样做的好处是：不管一个数据在 UI 上有多少个区块显示，但最终的数据来源都存在于前端的某个唯一的存储模块内。这样当这个数据发生修改时，只需要在这个存储模块内修改了这条数据，所有的区块视图 都会得到更新。</p><p>不管是请求数据还是推送数据，都只是把数据扔到前端的存储模块内。只要某个视图存在对某一条数据的引用，那么到需要更新的时候自然会更新。</p><h2 id=\"模块即服务\"><a href=\"#模块即服务\" class=\"headerlink\" title=\"模块即服务\"></a>模块即服务</h2><p><strong>模块即服务</strong>，这个概念是我们在开发过程中逐步发现的一个趋势。</p><p>所谓的 <strong>模块</strong>，在项目中具体的代表是 Vuex 中的一个 stroe 模块。</p><p>举例来说，一个 <code>task模块</code> 既存储了当前所有的任务数据，也包含了对任务数据的所有操作。而任务数据在整个应用中的表现形式不止于任务列表一种。可能在 A 路由中表现为任务列表，B 路由中表现为某个用户参与的所有任务。但是归根结底两种表现形式背后需要的数据结构是类似的，某些功能也可能类似（比如分类、过滤等操作）。那么这个模块就得到复用，除了请求数据的接口不同，但请求完成后都把数据放到 task 模块中，不管最终表现为哪种视图都引用 task 模块的数据去组成业务数据。</p><h2 id=\"数据即业务\"><a href=\"#数据即业务\" class=\"headerlink\" title=\"数据即业务\"></a>数据即业务</h2><p>根据前面所述，如果一个视图引用 task 模块的数据去组成业务数据，那么之后必然要对后续 task 相关的业务操作得到响应。</p><p>所有的业务操作回归到数据上，都属于增、删、改操作。所以视图模型必须从数据本身来描述业务。数据模块中增加、删除、修改一条数据，必须正确的反馈到视图模型中。</p><p>我们大量使用了 Vue 中的 <strong>计算属性</strong> 来实现数据即业务。</p><p>就拿 <code>当前用户创建的所有任务</code> 这个业务来说，计算属性可以表示为：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$store.state.taskModule.taskList.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.creator === <span class=\"keyword\">this</span>.loginUserId)</div></pre></td></tr></table></figure><p>后续推送了 task 相关的数据就会添加到任务模块中，对 task 的增、删、改操作也是去操作任务模块里的数据。最终对于视图来说，只要数据满足计算属性的描述，那么视图就得到更新。</p><h2 id=\"降低数据操作复杂性\"><a href=\"#降低数据操作复杂性\" class=\"headerlink\" title=\"降低数据操作复杂性\"></a>降低数据操作复杂性</h2><p>由于数据模块中一般存储了一种数据模型的集合（数据），那么在模块内的删、改类操作时都需要对原数据集进行循环遍历。</p><p>我们之后对一些模块尝试了 <strong>扁平化数据结构</strong>。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原数据</span></div><div class=\"line\">;[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">'t1'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'aaa'</span>,</div><div class=\"line\">        <span class=\"attr\">creator</span>: &#123; <span class=\"attr\">userName</span>: <span class=\"string\">'sfs'</span>, <span class=\"attr\">userId</span>: <span class=\"string\">'u1'</span> &#125;,</div><div class=\"line\">        <span class=\"attr\">tags</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">id</span>: <span class=\"string\">'t1'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'tag1'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">id</span>: <span class=\"string\">'t2'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'tag2'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">'t2'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'bbb'</span>,</div><div class=\"line\">        <span class=\"attr\">creator</span>: &#123; <span class=\"attr\">userName</span>: <span class=\"string\">'sfs'</span>, <span class=\"attr\">userId</span>: <span class=\"string\">'u1'</span> &#125;,</div><div class=\"line\">        <span class=\"attr\">tags</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">id</span>: <span class=\"string\">'t2'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'tag2'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">id</span>: <span class=\"string\">'t3'</span>,</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'tag3'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">]</div></pre></td></tr></table></figure><p>从上面的数据结构，可以想象，修改一条任务的属性都需要进行循环查找才可修改，而如果是像 <code>tags -&gt; t2</code> 这种深层次对象修改，又需要多一层循环。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 打平后</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">taskList</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">t1</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">'t1'</span>,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'aaa'</span>,</div><div class=\"line\">            <span class=\"attr\">creator</span>: <span class=\"string\">'u1'</span>,</div><div class=\"line\">            <span class=\"attr\">tags</span>: [<span class=\"string\">'t1'</span>, <span class=\"string\">'t2'</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">t2</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">'t1'</span>,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'bbb'</span>,</div><div class=\"line\">            <span class=\"attr\">creator</span>: <span class=\"string\">'u1'</span>,</div><div class=\"line\">            <span class=\"attr\">tags</span>: [<span class=\"string\">'t2'</span>, <span class=\"string\">'t3'</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">taskIds</span>: [<span class=\"string\">'t1'</span>, <span class=\"string\">'t2'</span>],</div><div class=\"line\">    <span class=\"attr\">userList</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">u1</span>: &#123; <span class=\"attr\">userName</span>: <span class=\"string\">'sfs'</span>, <span class=\"attr\">userId</span>: <span class=\"string\">'u1'</span> &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">userIds</span>: [<span class=\"string\">'u1'</span>],</div><div class=\"line\">    <span class=\"attr\">tagList</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">t1</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">'t1'</span>,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'tag1'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">t2</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">'t2'</span>,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'tag2'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">t3</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">'t3'</span>,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'tag3'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">tagIds</span>: [<span class=\"string\">'t1'</span>, <span class=\"string\">'t2'</span>, <span class=\"string\">'t3'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><ul><li>数据打平为一层，对象关联通过 id 引用来描述</li><li>每一种数据都单独拆分出来数据集和 id 集合两种形式，一种用来取值，一种用于顺序描述</li><li>给定 1 个 ID，就可以很快获取到对应的值</li><li>修改时减少循环遍历，但增加、删除时需要在两种数据形式上作修改</li></ul><p>数据操作这一块可以继续抽象，像一些 ORM 框架一样，形成声明式 <code>Model</code>，解放重复编码。</p>","categories":[],"tags":[{"name":"SPA","path":"api/tags/SPA.json"},{"name":"Vue","path":"api/tags/Vue.json"},{"name":"Vuex","path":"api/tags/Vuex.json"},{"name":"前端","path":"api/tags/前端.json"},{"name":"数据管理","path":"api/tags/数据管理.json"}]}
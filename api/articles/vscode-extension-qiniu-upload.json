{"title":"VsCode插件：七牛图床工具，写文章更快一步","slug":"vscode-extension-qiniu-upload","date":"2016-07-26T01:53:52.000Z","updated":"2017-08-20T13:57:23.853Z","comments":true,"path":"api/articles/vscode-extension-qiniu-upload.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直以来，我都很少在文章中加插图。因为每加一张插图，我都需要先把图片上传到七牛，然后才能获取外链插入文章。</p><p>之前写 Markdown 一直是用的 Sublime，直到 Vscode 最近一次更新有了 Tabs 之后，便开始尝试在工作中使用。与最初的预览版相比进步蛮大的，能看到很多 VS 的影子。之前也用过一段时间 Atom，虽然界面挺喜欢，但始终没有原生客户端的流畅感。到底客户端还是微软的强项，Vscode 这方面舒服多了，启动与大文件编辑都不比 Sublime 差。</p><p>Vscode 是基于浏览器内核的跨平台编辑器，底层代码大部分都是 TypeScript，当然最终还是会编译为 javascript。这样对于一个前端而言就倍感亲切了，可以轻易的使用自己吃饭的语言去扩展功能。</p><p>所以这个<a href=\"https://github.com/yscoder/vscode-qiniu-upload-image\">七牛图床工具</a>就诞生了。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/vscode-qiniu-pv.gif\" alt=\"vscode-qiniu-pv\"></div><div class=\"image-caption\">vscode-qiniu-pv</div></figure>","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直以来，我都很少在文章中加插图。因为每加一张插图，我都需要先把图片上传到七牛，然后才能获取外链插入文章。</p><p>之前写 Markdown 一直是用的 Sublime，直到 Vscode 最近一次更新有了 Tabs 之后，便开始尝试在工作中使用。与最初的预览版相比进步蛮大的，能看到很多 VS 的影子。之前也用过一段时间 Atom，虽然界面挺喜欢，但始终没有原生客户端的流畅感。到底客户端还是微软的强项，Vscode 这方面舒服多了，启动与大文件编辑都不比 Sublime 差。</p><p>Vscode 是基于浏览器内核的跨平台编辑器，底层代码大部分都是 TypeScript，当然最终还是会编译为 javascript。这样对于一个前端而言就倍感亲切了，可以轻易的使用自己吃饭的语言去扩展功能。</p><p>所以这个<a href=\"https://github.com/yscoder/vscode-qiniu-upload-image\" target=\"_blank\" rel=\"external\">七牛图床工具</a>就诞生了。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/vscode-qiniu-pv.gif\" alt=\"vscode-qiniu-pv\"></div><div class=\"image-caption\">vscode-qiniu-pv</div></figure><a id=\"more\"></a><h2 id=\"如何开始插件编写\"><a href=\"#如何开始插件编写\" class=\"headerlink\" title=\"如何开始插件编写\"></a>如何开始插件编写</h2><p>这里还是有必要把这个插件编写过程回顾一下，因为现在可供参考的中文资料实在不多。<br>可以参考这篇文章 <a href=\"http://www.cnblogs.com/caipeiyu/p/5507252.html\" target=\"_blank\" rel=\"external\">vscode编写插件详细过程</a> 来完成插件开发环境部署和创建基本项目。</p><h2 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h2><p>以 Javascript 编写插件为例，这里我假设你已经建立了一个基础项目。</p><p>就如我们经常在 github 上见到的前端或 Node 项目一样，都有一个 <code>package.json</code> 用于描述项目信息，也可以使用 <code>npm</code> 命令安装你需要的第三方库。此外这个文件中又包含了一些专属于 Vscode 的配置项。</p><p>这里不在关注常规的 <code>package.json</code> 配置项，只介绍 Vscode 相关的。</p><h3 id=\"activationEvents\"><a href=\"#activationEvents\" class=\"headerlink\" title=\"activationEvents\"></a>activationEvents</h3><p>插件在何时被激活。</p><ul><li><code>onLanguage:${language}</code>：打开某种格式的文件时</li><li><code>onCommand:${command}</code>：输入某种命令时（Vscode中按F1）</li><li><code>onDebug:${type}</code>：调试某种语言类型时</li><li><code>workspaceContains:${toplevelfilename}</code>：当你的工作区包含某种文件时？</li><li><code>*</code>：任何时候，编辑器启动就激活</li></ul><p>描述可能有误，对应文档：<a href=\"https://code.visualstudio.com/docs/extensionAPI/activation-events\" target=\"_blank\" rel=\"external\">Activation Events</a>。</p><h3 id=\"contributes\"><a href=\"#contributes\" class=\"headerlink\" title=\"contributes\"></a>contributes</h3><p>Contributes 意思是贡献，这个属性中包含的都是可扩展点。</p><ul><li><code>keybindings</code>：绑定按键来执行某个命令</li><li><code>configuration</code>：定义你的插件个性化配置</li><li><code>menus</code>：扩展菜单</li><li><code>commands</code>：用命令名执行某个命令</li><li>……</li></ul><p>这四项应该是最常用的，更多：<a href=\"https://code.visualstudio.com/docs/extensionAPI/extension-points\" target=\"_blank\" rel=\"external\">Contribution Points</a>。</p><p>OK，有了这些，大概可以为你的插件编写作构思了。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 插件何时被激活</span></div><div class=\"line\">  <span class=\"string\">\"activationEvents\"</span>: [</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 打开一个 Markdown 文件时，插件将被激活</span></div><div class=\"line\">    <span class=\"string\">\"onLanguage:markdown\"</span></div><div class=\"line\"></div><div class=\"line\">  ],</div><div class=\"line\">    <span class=\"comment\">// 插件入口文件</span></div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"./extension\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 扩展点</span></div><div class=\"line\">  <span class=\"string\">\"contributes\"</span>: &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 按键绑定，当编辑区具有焦点且语言为 markdown 时，按 ctrl+q 执行 extension.qiniu.upload，也可针对 mac 平台独立配置</span></div><div class=\"line\">    <span class=\"string\">\"keybindings\"</span>: [&#123;</div><div class=\"line\">        <span class=\"string\">\"command\"</span>: <span class=\"string\">\"extension.qiniu.upload\"</span>,</div><div class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"ctrl+q\"</span>,</div><div class=\"line\">        <span class=\"string\">\"mac\"</span>: <span class=\"string\">\"ctrl+q\"</span>,</div><div class=\"line\">        <span class=\"string\">\"when\"</span>: <span class=\"string\">\"editorTextFocus &amp;&amp; editorLangId == 'markdown'\"</span></div><div class=\"line\">    &#125;],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 插件配置属性，当你想要获取 qiniu 的配置时，以下所有 qiniu.xx 属性将合并于一个对象中</span></div><div class=\"line\">    <span class=\"comment\">// title 和 description 将作为注释和属性提示分别在默认配置文件和用户配置文件中呈现</span></div><div class=\"line\">    <span class=\"string\">\"configuration\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"object\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"qiniu configuration\"</span>,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"qiniu.enable\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"boolean\"</span>,</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"string\">\"description\"</span>: <span class=\"string\">\"七牛图片上传工具开关\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">\"qiniu.access_key\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>,</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">                <span class=\"string\">\"description\"</span>: <span class=\"string\">\"一个有效的七牛 AccessKey 签名授权。\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">\"qiniu.secret_key\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>,</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">                <span class=\"string\">\"description\"</span>: <span class=\"string\">\"一个有效的七牛 SecretKey 签名授权。\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">\"qiniu.bucket\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>,</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">                <span class=\"string\">\"description\"</span>: <span class=\"string\">\"七牛图片上传空间.\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">\"qiniu.remotePath\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>,</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"$&#123;fileName&#125;\"</span>,</div><div class=\"line\">                <span class=\"string\">\"description\"</span>: <span class=\"string\">\"七牛图片上传路径，参数化命名。\"</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">\"qiniu.domain\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>,</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">                <span class=\"string\">\"description\"</span>: <span class=\"string\">\"七牛图床域名。\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>以我的 <code>package.json</code> 为例，描述了以下信息：</p><ol><li>当你打开一个 Markdown 文件时，插件将被激活。</li><li>执行 <code>ctrl+Q</code> 将启动一个命令，还有一个 <code>when</code> 属性，表示额外的命令激活条件。</li><li>因为要上传到七牛，所以需要一些你的七牛用户信息，也就是 <code>configuration</code>，这可以在代码中方便的读取到。</li></ol><p>最后我需要以合适的方式获取你想上传的本地图片，以 Markdown 的图片格式写入到你的光标位置。</p><h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>插件的入口文件只有一个，也就是配置中的 <code>&quot;main&quot;: &quot;./extension&quot;</code>。</p><p>一个基础的入口文件是这样的：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vscode = <span class=\"built_in\">require</span>(<span class=\"string\">'vscode'</span>);</div><div class=\"line\"><span class=\"comment\">// 插件激活时执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 注册命令</span></div><div class=\"line\">    <span class=\"keyword\">var</span> disposable = vscode.commands.registerCommand(<span class=\"string\">'extension.hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 编辑器上方显示一条信息</span></div><div class=\"line\">        vscode.window.showInformationMessage(<span class=\"string\">'hello!'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 加入释放队列？</span></div><div class=\"line\">    context.subscriptions.push(disposable);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.activate = activate;</div><div class=\"line\"><span class=\"comment\">// 插件停用时执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deactivate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.deactivate = deactivate;</div></pre></td></tr></table></figure><p>通过这个文件，可以发现 <code>vscode</code> 是个关键的对象，插件能做多少事都取决于这个对象可以提供多少接口支持。</p><p>最初我是想通过复制命令实现功能的，也就是用户复制一个图片到编辑器，然后拦截剪贴板拿到图片路径上传、插入文档。事与愿违，Vscode 没有提供这方法的接口支持，见：<a href=\"https://github.com/Microsoft/vscode/issues/4972\" target=\"_blank\" rel=\"external\">Issues: Clipboard access through Extensions API</a>。下面提到一个第三方包 <code>node-copy-paste</code> 也仅能访问字符串信息，只好作罢。</p><p>Vscode 的接口调用大概分为两类：命令调用：<a href=\"https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands\" target=\"_blank\" rel=\"external\">Complex Commands API</a> 和对象方法调用：<a href=\"https://code.visualstudio.com/docs/extensionAPI/vscode-api\" target=\"_blank\" rel=\"external\">vscode namespace API</a>。</p><p>前者很易用，比如预览 html 的示例：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> success = <span class=\"keyword\">await</span> commands.executeCommand(<span class=\"string\">'vscode.previewHtml'</span>, Uri.parse(<span class=\"string\">'file:///some/path/to/file.html'</span>));</div></pre></td></tr></table></figure><p>文档的示例是 TypeScript 写的，转换为 ES5 应该是这样：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> success = commands.executeCommand(<span class=\"string\">'vscode.previewHtml'</span>, Uri.parse(<span class=\"string\">'file:///some/path/to/file.html'</span>))</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ret</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// success</span></div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// error</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure><p>如果能调用一个选择文件的窗口获取本地图片路径最好不过了。可我翻遍了文档，也只找到了一个选择文件夹的命令 <code>vscode.openFolder</code>，简直就是不想让你写的太轻松。</p><p>最终只能使用一个输入框来接收本地图片路径，也就是预览图中的效果。</p><p>以下是我用到的一些API：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取配置文件中的插件配置</span></div><div class=\"line\">vscode.workspace.getConfiguration(<span class=\"string\">'qiniu'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 显示错误信息</span></div><div class=\"line\">vscode.window.showErrorMessage(<span class=\"string\">'error'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 显示一个输入框，返回 Promise 对象</span></div><div class=\"line\">vscode.window.showInputBox(option)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 编辑文件的函数，参数还是一个函数，这个回调函数的参数才是真正的可以用来增删文字的对象</span></div><div class=\"line\">vscode.window.activeTextEditor.edit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">textEditorEdit</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在光标位置插入文本</span></div><div class=\"line\">    <span class=\"comment\">// textEditorEdit.insert(editor.selection.active, img);</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure><p>最终技术支持其实是 <a href=\"http://developer.qiniu.com/code/v6/sdk/nodejs.html\" target=\"_blank\" rel=\"external\">七牛SDK</a> ヾ(･ω･`｡)。<br>具体的代码可以去 Github 上看。</p><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>打包、发布那篇文章中也提到了，我已经打包放到了 Github 仓库中，就是那个 <code>·vsix</code> 文件。使用 <code>Ctrl+O</code> 选择插件包就可以安装了，在用户配置文件中加一下你的七牛配置，重启下就能用了，快捷键 <code>ctrl+q</code>。</p><p>同时可以通过编辑器左侧插件面板在线搜索 <code>qiniu-upload-image</code> 安装。</p><p><strong>文件 -&gt; 首选项 -&gt; 用户设置</strong>，在右侧区域编写插件配置覆盖默认配置。<br>配置文件示例如下，参考你的七牛用户信息填写：</p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"qiniu.enable\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"qiniu.access_key\"</span>: <span class=\"string\">\"xxxxxxxxxxxxx\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"qiniu.secret_key\"</span>: <span class=\"string\">\"xxxxxxxxxxxxx\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"qiniu.bucket\"</span>: <span class=\"string\">\"yourBucket\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"qiniu.remotePath\"</span>: <span class=\"string\">\"$&#123;fileName&#125;\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"qiniu.domain\"</span>: <span class=\"string\">\"http://xxx.xxxxx.com\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>编辑器中鼠标悬浮会显示属性提示。</p><p>Enjoy!</p>","categories":[],"tags":[{"name":"VsCode","path":"api/tags/VsCode.json"},{"name":"Qiniu","path":"api/tags/Qiniu.json"},{"name":"Markdown","path":"api/tags/Markdown.json"}]}
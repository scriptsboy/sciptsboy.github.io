{"title":"Canvas初试--环形进度条的实现","slug":"canvas-annulus-process","date":"2015-07-22T00:21:53.000Z","updated":"2017-08-20T13:57:23.703Z","comments":true,"path":"api/articles/canvas-annulus-process.json","excerpt":"<p>起初想这么做既是<code>css3</code>不易实现圆环，而且也有低版本兼容问题，也想借此机会学习下<code>canvas</code>(虽然最后还是难逃兼容性 &gt;_&lt; )。<br>做的过程中发现<code>canvas</code>跟<code>C#</code>中<code>gdi</code>绘图的步骤其实是差不多的。</p><p>先大概看了下<code>canvas</code>的相关API，有个可以画弧的方法<code>arc</code>。</p><p>通过合理的参数设置就能实现各种角度的圆弧，或者满圆。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/process.jpg\" alt=\"Canvas初试--环形进度条的实现\"></div><div class=\"image-caption\">Canvas初试--环形进度条的实现</div></figure>","content":"<p>起初想这么做既是<code>css3</code>不易实现圆环，而且也有低版本兼容问题，也想借此机会学习下<code>canvas</code>(虽然最后还是难逃兼容性 &gt;_&lt; )。<br>做的过程中发现<code>canvas</code>跟<code>C#</code>中<code>gdi</code>绘图的步骤其实是差不多的。</p><p>先大概看了下<code>canvas</code>的相关API，有个可以画弧的方法<code>arc</code>。</p><p>通过合理的参数设置就能实现各种角度的圆弧，或者满圆。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/process.jpg\" alt=\"Canvas初试--环形进度条的实现\"></div><div class=\"image-caption\">Canvas初试--环形进度条的实现</div></figure><a id=\"more\"></a><h3 id=\"定义canvas\"><a href=\"#定义canvas\" class=\"headerlink\" title=\"定义canvas\"></a>定义canvas</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"process\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">data-process</span>=<span class=\"string\">\"85\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div></pre></td></tr></table></figure><p>在基本的HTML5文档中添加一个<code>canvas</code>，定义了id宽高以及一个自定义属性表示要显示的进度值。</p><h3 id=\"画背景圆（灰色）\"><a href=\"#画背景圆（灰色）\" class=\"headerlink\" title=\"画背景圆（灰色）\"></a>画背景圆（灰色）</h3><p>首先了解下<code>arc</code>方法：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">context.arc(x,y,r,sAngle,eAngle,counterclockwise);</div></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th style=\"text-align:center\">描述</th></tr></thead><tbody><tr><td>x</td><td style=\"text-align:center\">圆的中心的 x 坐标。</td></tr><tr><td>y</td><td style=\"text-align:center\">圆的中心的 y 坐标。</td></tr><tr><td>r</td><td style=\"text-align:center\">圆的半径。</td></tr><tr><td>sAngle</td><td style=\"text-align:center\">起始角，以弧度计（弧的圆形的三点钟位置是 0 度）。</td></tr><tr><td>eAngle</td><td style=\"text-align:center\">结束角，以弧度计。</td></tr><tr><td>counterclockwise</td><td style=\"text-align:center\">可选。规定应该逆时针还是顺时针绘图。False = 顺时针，true = 逆时针。</td></tr></tbody></table><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> process = c.getAttribute(<span class=\"string\">'data-process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = c.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 画灰色的圆</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>);</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#F6F6F6'</span>;</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure><p>以上代码中设置了圆心为<code>100,100</code>，正好的画布中心，圆半径为<code>80</code>，起始角度<code>0</code>表示<code>3</code>点钟方向，结束角度<code>Math.PI*2</code>其实是个满圆。<br>下一步会说明起始角度和结束角度具体算法。</p><h3 id=\"画进度环（橙色）\"><a href=\"#画进度环（橙色）\" class=\"headerlink\" title=\"画进度环（橙色）\"></a>画进度环（橙色）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 画进度环</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">ctx.arc(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">80</span>, <span class=\"built_in\">Math</span>.PI*<span class=\"number\">1.5</span>, <span class=\"built_in\">Math</span>.PI*(<span class=\"number\">1.5</span>+<span class=\"number\">2</span>*process/<span class=\"number\">100</span>));</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#FF9600'</span>;</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure><p>与上一步比较，多了一句<code>ctx.moveTo(x,y);</code>，意为把路径移动到画布中的指定点，如果没有这一步画出来的就不是弧了。<br>起始角度和结束角度也发生了变化，要想真正理解这两个角度，看下图。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/img_arc.gif\" alt=\"Canvas初试--环形进度条的实现\"></div><div class=\"image-caption\">Canvas初试--环形进度条的实现</div></figure><p>3点钟方向用<code>0(0PI)</code>表示，6点钟是<code>0.5PI</code>，9点钟<code>1PI</code>，12点钟<code>1.5PI</code>，这样转一周回到3点钟即为<code>2PI</code>。<br>所以满圆可以用起始角度<code>0(0PI)</code>和结束角度<code>2PI</code>表示。</p><p>我们要画的圆环是需要从12点钟方向开始的，所以设置起始角度<code>1.5PI</code>。<br><code>process</code>在第一步中获取了要显示的进度<code>85</code>，即为<code>85/100</code>的圆，按原来<code>3</code>点钟开始，那么结束角度可以计算为<code>Math.PI*2*85/100</code>。<br>因为起始角度的变更，结束角度也要进行相应的变化，各在原来的基础上加了<code>1.5</code>的基数。</p><p><strong>起始角度</strong></p><p><em>0 -&gt; Math.PI &times; 0 -&gt; Math.PI &times; (0+1.5) -&gt; Math.PI &times; 1.5</em></p><p><strong>结束角度</strong></p><p><em>Math.PI &times; 2 -&gt; Math.PI &times; 2 &times; 85/100 -&gt; Math.PI &times; 2 &times; process/100 -&gt; Math.PI &times; (1.5+2 &times; process/100)</em></p><h3 id=\"画内填充圆（白色）\"><a href=\"#画内填充圆（白色）\" class=\"headerlink\" title=\"画内填充圆（白色）\"></a>画内填充圆（白色）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 画内填充圆</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI*<span class=\"number\">2</span>);</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#fff'</span>;</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure><p>半径减少20，进行内圆填充。</p><h3 id=\"填充显示文字（数字百分比）\"><a href=\"#填充显示文字（数字百分比）\" class=\"headerlink\" title=\"填充显示文字（数字百分比）\"></a>填充显示文字（数字百分比）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 填充文字</span></div><div class=\"line\">ctx.font = <span class=\"string\">\"bold 20pt Microsoft YaHei\"</span>;</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#333'</span>;</div><div class=\"line\">ctx.textAlign = <span class=\"string\">'center'</span>;</div><div class=\"line\">ctx.textBaseline = <span class=\"string\">'middle'</span>;</div><div class=\"line\">ctx.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">ctx.fillText(process+<span class=\"string\">'%'</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure><p>完成！</p><p>关于<code>canvas</code>在IE7、8下的兼容需要引用google的 <a href=\"https://github.com/arv/ExplorerCanvas\" target=\"_blank\" rel=\"external\">excanvas.js</a> ，并把画图的相关的代码放到<code>window.onload</code>下。<br>不过这个文件有些大，40K+，压缩后17K。</p>","categories":[],"tags":[{"name":"Html5","path":"api/tags/Html5.json"},{"name":"Canvas","path":"api/tags/Canvas.json"},{"name":"Process","path":"api/tags/Process.json"}]}
{"title":"javascript之arguments对象","slug":"javascript-arguments","date":"2015-04-29T03:55:20.000Z","updated":"2016-11-12T19:20:07.395Z","comments":true,"path":"api/articles/javascript-arguments.json","excerpt":"<blockquote><p>在javascript中函数调用时，会自动在函数内产生一个arguments的隐藏对象。arguments类似于数组，但又不是数组。可以使用[]操作符获取函数调用时传递的实参。</p></blockquote>","content":"<blockquote><p>在javascript中函数调用时，会自动在函数内产生一个arguments的隐藏对象。arguments类似于数组，但又不是数组。可以使用[]操作符获取函数调用时传递的实参。</p></blockquote><a id=\"more\"></a><h3 id=\"其类型\"><a href=\"#其类型\" class=\"headerlink\" title=\"其类型\"></a>其类型</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>);  <span class=\"comment\">// object</span></div><div class=\"line\">&#125;</div><div class=\"line\">test1();</div></pre></td></tr></table></figure><h3 id=\"其属性\"><a href=\"#其属性\" class=\"headerlink\" title=\"其属性\"></a>其属性</h3><p><strong>length</strong>：获取函数内传入实参个数。<br>适用场景：模拟函数重载。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.length);  <span class=\"comment\">// 获取函数内传入实参个数：4</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(test2.length);      <span class=\"comment\">// 可以通过 函数名.length 获取形参个数：2</span></div><div class=\"line\">&#125;</div><div class=\"line\">test2(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"number\">5</span>, <span class=\"string\">'gg'</span>);</div></pre></td></tr></table></figure><p><strong>callee</strong>：引用当前正在执行的函数。<br>适用场景：递归。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 求1到n的自然数之和</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> n + <span class=\"built_in\">arguments</span>.callee(n<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h3 id=\"转换成真正的数组\"><a href=\"#转换成真正的数组\" class=\"headerlink\" title=\"转换成真正的数组\"></a>转换成真正的数组</h3><p><code>Array.prototype.slice.call(arguments)</code></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 任意数量的一组数字排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySort</span>(<span class=\"params\">a,b,v</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> tags = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    tags = tags.concat(tags.slice.call(<span class=\"built_in\">arguments</span>)).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a - b;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> tags;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = mySort(<span class=\"number\">50</span>,<span class=\"number\">11</span>,<span class=\"number\">16</span>,<span class=\"number\">32</span>,<span class=\"number\">24</span>,<span class=\"number\">99</span>,<span class=\"number\">57</span>,<span class=\"number\">100</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result);   <span class=\"comment\">// [11, 16, 24, 32, 50, 57, 99, 100]</span></div></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"arguments","path":"api/tags/arguments.json"}]}
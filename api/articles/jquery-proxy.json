{"title":"jQuery.proxy方法原理与使用","slug":"jquery-proxy","date":"2015-05-09T16:25:13.000Z","updated":"2016-11-12T19:19:16.258Z","comments":true,"path":"api/articles/jquery-proxy.json","excerpt":"<blockquote><p>在写一些jq插件时，往往需要在回调函数上下文中注入调用者对象，也就是改变函数上下文中 this 的引用。<br>从jQuery 1.4 开始便可以使用 jQuery.proxy 方法解决这个问题。</p></blockquote>","content":"<blockquote><p>在写一些jq插件时，往往需要在回调函数上下文中注入调用者对象，也就是改变函数上下文中 this 的引用。<br>从jQuery 1.4 开始便可以使用 jQuery.proxy 方法解决这个问题。</p></blockquote><a id=\"more\"></a><h2 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h2><p>$.proxy 方法接受一个已有的函数，并返回一个带特定上下文的新的函数。<br>该方法通常用于向上下文指向不同对象的元素添加事件。</p><p><em>提示：如果您绑定从 $.proxy 返回的函数，jQuery 仍然可以通过传递的原先的函数取消绑定正确的函数。</em></p><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">$(selector).proxy(<span class=\"function\"><span class=\"keyword\">function</span>,<span class=\"title\">context</span>);</span></div><div class=\"line\">// 2</div><div class=\"line\"><span class=\"title\">$</span>(<span class=\"params\">selector</span>).<span class=\"title\">proxy</span>(<span class=\"params\">context,name</span>);</div></pre></td></tr></table></figure><h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 用例1</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.txt = <span class=\"string\">\"helloWorld\"</span>;</div><div class=\"line\">    $(<span class=\"built_in\">document</span>).click(<span class=\"keyword\">this</span>.fn);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.txt = <span class=\"string\">\"helloWorld\"</span>;</div><div class=\"line\">    $(<span class=\"built_in\">document</span>).click($.proxy(<span class=\"keyword\">this</span>.fn, <span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.prototype.fn = obj2.prototype.fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.txt);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> obj1();  <span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> obj2();  <span class=\"comment\">// helloWorld</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用例2</span></div><div class=\"line\"><span class=\"keyword\">var</span> dialog = &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'helloWorld'</span>,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"built_in\">document</span>).click(dialog.show); </div><div class=\"line\"><span class=\"comment\">// #document</span></div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"built_in\">document</span>).click($.proxy(dialog, <span class=\"string\">\"show\"</span>));  </div><div class=\"line\"><span class=\"comment\">// Object &#123;msg: \"helloWorld\", show: function&#125;</span></div><div class=\"line\"><span class=\"comment\">// helloWorld</span></div></pre></td></tr></table></figure><p><em>未使用 jQuery.proxy 方法时，click 方法中 this 指向为执行 click 方法的 jQuery 对象；</em><br><em>使用 jQuery.proxy 方法时，click 方法中 this 指向为你所期望的对象。</em></p><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>不难猜出其底层实现应该是原生 js 中的 call 或 apply 方法。</p><p><strong>jquery1.9 中的源码片段：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">proxy: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> fn, context </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args, proxy, tmp;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> context === <span class=\"string\">\"string\"</span> ) &#123;</div><div class=\"line\">        tmp = fn[ context ];</div><div class=\"line\">        context = fn;</div><div class=\"line\">        fn = tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Quick check to determine if target is callable, in the spec</span></div><div class=\"line\">    <span class=\"comment\">// this throws a TypeError, but we will just return undefined.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ( !jQuery.isFunction( fn ) ) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Simulated bind</span></div><div class=\"line\">    args = core_slice.call( <span class=\"built_in\">arguments</span>, <span class=\"number\">2</span> );</div><div class=\"line\">    proxy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.apply( context || <span class=\"keyword\">this</span>, args.concat( core_slice.call( <span class=\"built_in\">arguments</span> ) ) );</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the guid of unique handler to the same of original handler, so it can be removed</span></div><div class=\"line\">    proxy.guid = fn.guid = fn.guid || jQuery.guid++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> proxy;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"jQuery","path":"api/tags/jQuery.json"},{"name":"proxy","path":"api/tags/proxy.json"}]}
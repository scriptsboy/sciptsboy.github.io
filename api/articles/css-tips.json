{"title":"CSS实用Tips","slug":"css-tips","date":"2016-04-06T09:42:48.000Z","updated":"2016-11-12T19:11:43.514Z","comments":true,"path":"api/articles/css-tips.json","excerpt":"<p>作为自己做前端开发以来的CSS爬坑总结，内容偏向PC端，不定期补充。<br>只作提示，不深谈。</p><h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p>1、区分<code>content-box</code>和<code>border-box</code>的尺寸计算。</p><p>2、行级元素无宽高，但可设内外边距。</p><p>3、外边距<code>margin</code>可设负值，内边距<code>padding</code>不可以。</p><p>4、当内外边距值为百分比时是相对于元素宽度计算的。</p><p>5、<code>border</code>是个好玩的东西，关键字：<strong>css三角形</strong>。</p>","content":"<p>作为自己做前端开发以来的CSS爬坑总结，内容偏向PC端，不定期补充。<br>只作提示，不深谈。</p><h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p>1、区分<code>content-box</code>和<code>border-box</code>的尺寸计算。</p><p>2、行级元素无宽高，但可设内外边距。</p><p>3、外边距<code>margin</code>可设负值，内边距<code>padding</code>不可以。</p><p>4、当内外边距值为百分比时是相对于元素宽度计算的。</p><p>5、<code>border</code>是个好玩的东西，关键字：<strong>css三角形</strong>。</p><a id=\"more\"></a><h2 id=\"定位与布局\"><a href=\"#定位与布局\" class=\"headerlink\" title=\"定位与布局\"></a>定位与布局</h2><p>1、添加了<code>position: absolute</code>与<code>float</code>样式后，元素会隐式改变<code>display</code>属性为<code>inline-block</code>，可以设置宽高属性，不需要再显示设置<code>display</code>。</p><p>2、清除浮动，一般有<code>clear: both/left/right</code>和<code>overflow: hidden</code>。首选<code>clear</code>，如果目标区块存在溢出元素时，会被<code>overflow: hidden</code>截断。</p><p>3、绝对定位的元素，在<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>属性未设置时，默认为<code>auto</code>，在文档流中紧跟前一个元素。这个特性通常可以实现一些神奇的效果。</p><p>4、尽量为每一个定位元素合理分配<code>z-index</code>，特别是<code>relative</code>元素。按级别一般为：主体内容 &lt; 下拉列表、日历等与主体紧密联系的内容 &lt; 浮动的头部或左右导航、工具栏等 &lt; 遮罩、模态窗口等。遵循这个规则能少踩很多坑。</p><p>5、绝对定位的元素可以溢出添加了<code>overflow: hidden</code>的父容器且不被截断；绝对定位的起始点是参照离其最近的祖先定位元素，一直到<code>body</code>。</p><p>6、隐藏元素一般用<code>display: none</code>、<code>visibility: hidden</code>，使用CSS3过渡和动画时首选<code>visibility</code>。因为<code>display</code>只有两个状态改变<code>none -&gt; block/inline-block/...</code>，没有值域的变化（我是这么理解的），<code>visibility</code>在底层实现中是有一个 0-1 的变化。</p><p>7、当IE&lt;=7时，遇到定位布局问题，你可能需要了解<code>haslayout</code>与<strong>层叠上下文</strong>。</p><p>8、在移动端开发中，使用<code>Flexbox</code>新旧语法混合是很好用的布局解决方案。</p><h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><p>1、一些简单的交互效果就不需要用js去实现了，灵活使用选择器就可以搞定。如：鼠标悬浮于一个元素时显示某个子元素或兄弟元素、输入框具有焦点时显示输入提示、CSS模拟单复选框等。</p><p>2、jquery中有的选择器，基本上也能在CSS中使用或找到替代方案。</p><p>3、链接的伪类样式要按照<code>link</code>、<code>visited</code>、<code>hover</code>、<code>active</code>顺序设置，移动端用<code>active</code>代替<code>hover</code>。</p><p>4、除了首元素、末元素外，还有首行选择器<code>:first-line</code>和首字符选择器<code>:first-letter</code>。</p><p>5、使用子元素伪类选择器<code>:nth-child(n)</code>可以按照你的规则选取任意组合的子元素。</p><p>6、伪元素选择器<code>:before/:after</code>可以把一个元素当作三个元素使用，需注意某些元素不支持该选择器。其属性<code>content</code>为必设值，可以是字符串或使用<code>attr()</code>插入元素属性值、使用<code>url()</code>插入图像等。</p><h2 id=\"排版与修饰\"><a href=\"#排版与修饰\" class=\"headerlink\" title=\"排版与修饰\"></a>排版与修饰</h2><p>1、文本处理：大小写转换<code>text-transform</code>、文字截断<code>text-overflow</code>、改变文本流方向<code>direction</code>、书写方向<code>writing-mode</code>、换行处理<code>white-space</code>等。</p><p>2、当<code>font-weight</code>设为数值时，需要对应的字体有该数值字重支持，否则无效。<code>bold</code>等价于700数值。</p><p>3、垂直对齐<code>vertical-align</code>是个资深奇葩，各个浏览器解析均有差异。除了一些固有属性值外，还可以设数值、百分比。</p><p>4、你想设置2个边框吗？使用<code>outline</code>吧。</p><p>5、浏览器字体最小基准是12px。</p><p>6、设计图中的一些字体效果，可以尝试用<code>text-shadow</code>实现，减少图片应用。</p><p>7、使用CSS3时遵循渐进增强原则，对于不支持的浏览器保证布局无错乱、功能正常使用。</p>","categories":[],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"CSS3","path":"api/tags/CSS3.json"}]}
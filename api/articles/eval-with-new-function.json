{"title":"神奇的eval()与new Function()","slug":"eval-with-new-function","date":"2015-12-22T05:07:00.000Z","updated":"2016-11-12T19:12:47.640Z","comments":true,"path":"api/articles/eval-with-new-function.json","excerpt":"<p>在需要兼容IE8以下的日子里，往往需要使用<code>eval()</code>来把后端传过来的JSON串转成可操作的JSON对象。直到昨天在翻看jQuery源码时，才发现<code>jQuery.parseJSON</code>的兼容实现用的是<code>new Function()</code>。马上Google了相关资料，寻找两者的区别。</p>","content":"<p>在需要兼容IE8以下的日子里，往往需要使用<code>eval()</code>来把后端传过来的JSON串转成可操作的JSON对象。直到昨天在翻看jQuery源码时，才发现<code>jQuery.parseJSON</code>的兼容实现用的是<code>new Function()</code>。马上Google了相关资料，寻找两者的区别。</p><a id=\"more\"></a><h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h2><p>eval接受字符串参数，解析其中的js代码。如果编译失败，会抛出异常，否则执行其中的代码，计算返回值。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'2+2'</span>);  <span class=\"comment\">// 4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'console.log(\"ok\")'</span>);  <span class=\"comment\">// ok</span></div></pre></td></tr></table></figure><p>在实际应用中，通常这样转换JSON。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jsonStr = <span class=\"string\">'&#123; \"age\": 20, \"name\": \"jack\" &#125;'</span>;</div><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + jsonStr + <span class=\"string\">')'</span>);</div></pre></td></tr></table></figure><p>为什么要加括号呢？</p><blockquote><p>因为js中<code>{}</code>通常是表示一个语句块，eval只会计算语句块内的值进行返回。加上括号就变成一个整体的表达式。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">eval</span>(<span class=\"string\">'&#123;&#125;'</span>) );      <span class=\"comment\">// undefind</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">eval</span>(<span class=\"string\">'(&#123;&#125;)'</span>) );    <span class=\"comment\">// Object &#123;&#125;</span></div></pre></td></tr></table></figure><p>使用eval需要注意执行作用域</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'var s=2'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(s);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">a();                <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(s);     <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure><p>在局部环境使用eval便会创建局部变量。可以显示指定eval调用者来改变上下文环境。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'global'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'var s = \"local\"'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(s);                 <span class=\"comment\">// local</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">'s'</span>));         <span class=\"comment\">// local</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.eval(<span class=\"string\">'s'</span>));  <span class=\"comment\">// global</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><p>在之前我对于<code>Function</code>的了解只限于<strong>“定义方法的一种非主流方式”</strong>。却忽略了Function与eval相同的字符串参数特性。</p><p>语法：<code>var func = new Function(arg1, arg2, ..., functionBody);</code></p><p>实例：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'return a+b;'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log( add(<span class=\"number\">2</span>, <span class=\"number\">3</span>) );    <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure><p>由于其形参使用字符串的方式表示，也可以使用1个字符串来描述多个形参。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'a, b'</span>, <span class=\"string\">'return a+b;'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log( add(<span class=\"number\">2</span>, <span class=\"number\">3</span>) );    <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure><p>在转换JSON的实际应用中，只需要这么做。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> jsonStr = <span class=\"string\">'&#123; \"age\": 20, \"name\": \"jack\" &#125;'</span>,</div><div class=\"line\">    json = (<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'return '</span> + jsonStr))();</div></pre></td></tr></table></figure><p>eval 与 Function 都有着动态编译js代码的作用，但是在实际的编程中并不推荐使用。如果可以，请用更好的方法替代。</p><p>在一些特殊的运用场合，也有一些合理运用的实践。比如模板解析等。</p><p>那么为什么 jQuery 要用<code>new Function</code>而不用<code>eval</code>呢？<br>看看老外做的两者以及原生方法的性能比较：<a href=\"http://weblogs.asp.net/yuanjian/json-performance-comparison-of-eval-new-function-and-json\" target=\"_blank\" rel=\"external\">JSON Performance comparison of eval, new Function and JSON</a></p>","categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"Function","path":"api/tags/Function.json"},{"name":"eval","path":"api/tags/eval.json"}]}
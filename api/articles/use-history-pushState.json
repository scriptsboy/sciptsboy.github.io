{"title":"使用HTML5 history API增强移动端用户体验","slug":"use-history-pushState","date":"2016-03-16T06:42:51.000Z","updated":"2016-11-12T19:30:03.195Z","comments":true,"path":"api/articles/use-history-pushState.json","excerpt":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近做的一个图片浏览功能，请自行脑补手机图库、微博查看图片等场景。<br>功能做好之后，马上有同学反应：<strong>进入图片浏览层时，如果用户触摸手机后退按钮，整个页面都会返回，能否在触摸返回时只关闭浏览层？</strong></p><p>一般移动端会对 WebView 做一些默认的设置，比如 Hook 用户触摸后退按钮，调用 WebView 后退方法。既然如此，就可以利用这一点，通过操纵浏览记录使用户触摸后退关闭浏览层。</p><h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><p>想要操纵浏览记录，就不得不提<code>history</code>对象了。通过常用的<code>back()</code>、<code>forward()</code>、<code>go()</code>方法就可以自由的控制浏览器跳转到任意一个历史记录。<br>而在 HTML5 中，history 又添加一些新的成员，允许你对浏览记录进行添加和修改却不会刷新页面，这就是解决问题的关键了。</p><ul><li><code>history.pushState(stateObj, title, url)</code> 用于创建新历史记录；</li><li><code>history.replaceState(stateObj, title, url)</code> 用于修改当前历史记录；</li><li><code>history.state</code> 读取当前状态，创建历史记录时会添加状态对象；</li><li><code>window.onpopstate</code> 是一个事件，当历史记录被修改时会触发。</li></ul>","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近做的一个图片浏览功能，请自行脑补手机图库、微博查看图片等场景。<br>功能做好之后，马上有同学反应：<strong>进入图片浏览层时，如果用户触摸手机后退按钮，整个页面都会返回，能否在触摸返回时只关闭浏览层？</strong></p><p>一般移动端会对 WebView 做一些默认的设置，比如 Hook 用户触摸后退按钮，调用 WebView 后退方法。既然如此，就可以利用这一点，通过操纵浏览记录使用户触摸后退关闭浏览层。</p><h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><p>想要操纵浏览记录，就不得不提<code>history</code>对象了。通过常用的<code>back()</code>、<code>forward()</code>、<code>go()</code>方法就可以自由的控制浏览器跳转到任意一个历史记录。<br>而在 HTML5 中，history 又添加一些新的成员，允许你对浏览记录进行添加和修改却不会刷新页面，这就是解决问题的关键了。</p><ul><li><code>history.pushState(stateObj, title, url)</code> 用于创建新历史记录；</li><li><code>history.replaceState(stateObj, title, url)</code> 用于修改当前历史记录；</li><li><code>history.state</code> 读取当前状态，创建历史记录时会添加状态对象；</li><li><code>window.onpopstate</code> 是一个事件，当历史记录被修改时会触发。</li></ul><a id=\"more\"></a><h2 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure><p>就把这个 div 看作一个图片浏览层吧，样式脑补。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Demo</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(id);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Demo.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Demo,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 处理显示的代码...</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.el.classList.add(<span class=\"string\">'in'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 处理隐藏的代码...</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.el.classList.remove(<span class=\"string\">'in'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">useState</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 参数1是 Object 类型，可以被 history.state 读取</span></div><div class=\"line\">            <span class=\"comment\">// 参数2是标题，在一些浏览器中会被忽略，象征性的传空就可以了</span></div><div class=\"line\">            <span class=\"comment\">// 参数3是新记录的地址，会在末尾追加，如：http://test.com/demo</span></div><div class=\"line\">            history.pushState(&#123; <span class=\"attr\">page</span>: <span class=\"string\">'demo'</span> &#125;, <span class=\"string\">''</span>, <span class=\"string\">'/demo'</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 调用真正的显示方法</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.show();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 返回上一条历史记录</span></div><div class=\"line\">            history.back();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">bindEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>,</div><div class=\"line\">            handelShow = <span class=\"keyword\">this</span>.show,</div><div class=\"line\">            handelHide = <span class=\"keyword\">this</span>.hide,</div><div class=\"line\">            imgs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'img'</span>),</div><div class=\"line\">            <span class=\"comment\">// 假设图片浏览层上有一个 .back 后退按钮</span></div><div class=\"line\">            back = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'back'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 加个判断避免兼容性问题</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(history.pushState) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果可以使用 history API 就重新赋值 handelShow 和 handelHide</span></div><div class=\"line\">            handleShow = <span class=\"keyword\">this</span>.useState.show.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">            handleHide = <span class=\"keyword\">this</span>.useState.hide.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// history.state 变化时触发，假设初始 URL = http://test.com</span></div><div class=\"line\">            <span class=\"built_in\">window</span>.onpopstate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 这里的 e.state 和 history.state 等价的</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!e.state) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 无状态时隐藏</span></div><div class=\"line\">                    _this.hide();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.location);     <span class=\"comment\">// http://test.com</span></div><div class=\"line\"></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.state.page === <span class=\"string\">'demo'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 如果是自己定义的状态就显示</span></div><div class=\"line\">                    _this.show();</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.location);     <span class=\"comment\">// http://test.com/demo</span></div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 给图片绑定事件</span></div><div class=\"line\">        [].forEach.call(imgs, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">img</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">            img.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                handelShow();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 图片浏览层上的后退事件</span></div><div class=\"line\">        back.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            handelHide();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用</span></div><div class=\"line\"><span class=\"keyword\">new</span> Demo(<span class=\"string\">'container'</span>);</div></pre></td></tr></table></figure><p>执行<code>history.pushState()</code>时不会触发<code>window.onpopstate</code>，只有前进<code>forward()</code>、后退<code>back()</code>时才会触发，所以在之后还需要调用显示的方法。<br>对于不支持<code>history.pushState</code>的浏览器执行的还是原来的显示和隐藏方法，<code>handleShow</code>和<code>handleHide</code>在判断内才被重新赋值。<br>通过在<code>window.onpopstate</code>判断<code>history.state</code>来执行不同的操作，当然你也可以判断<code>location</code>。</p><p>以上代码未经测试，只作思路展示，注释说明了一切。</p><h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>在 SPA 场景中，history 早已大显神通。与<code>history.state</code>相似的还有<code>location.hash</code>，也有其对应的事件<code>window.onhashchange</code>，一般用于处理 IE 低版本的兼容。<br>抛开本篇描述的功能需求，类似的场景也可以运用。比如左侧导航在原生APP都是可以通过触摸返回来关闭，在浏览器中也可以模拟这种操作体验。</p>","categories":[],"tags":[{"name":"Html5","path":"api/tags/Html5.json"},{"name":"History","path":"api/tags/History.json"},{"name":"用户体验","path":"api/tags/用户体验.json"}]}
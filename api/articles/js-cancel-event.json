{"title":"js阻止子元素响应父元素事件","slug":"js-cancel-event","date":"2015-05-27T12:44:34.000Z","updated":"2016-11-12T19:19:21.842Z","comments":true,"path":"api/articles/js-cancel-event.json","excerpt":"<p>今天同事遇到这样一个问题，找我解决。<br>他希望点击整个DIV都可以响应点击事件，但是有些交互元素需要排除掉。如：点击链接页面跳转、点击按钮响应事件等）。<br>这是一个关于<strong>事件冒泡</strong>的问题，那便从事件冒泡写起。<br>","content":"<p>今天同事遇到这样一个问题，找我解决。<br>他希望点击整个DIV都可以响应点击事件，但是有些交互元素需要排除掉。如：点击链接页面跳转、点击按钮响应事件等）。<br>这是一个关于<strong>事件冒泡</strong>的问题，那便从事件冒泡写起。<br><a id=\"more\"></a></p><h2 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h2><p>在一个元素上触发事件，如果此元素定义了处理程序，那么此次事件就会被捕获，根据程序进行该事件的处理。否则这个事件会根据DOM树向父节点逐级传播，如果从始至终都没有被处理，那么最终会到达document或window根元素。</p><h2 id=\"阻止事件冒泡\"><a href=\"#阻止事件冒泡\" class=\"headerlink\" title=\"阻止事件冒泡\"></a>阻止事件冒泡</h2><p>W3C标准调用事件对象的<code>stopPropagation()</code>方法，IE可以设置对象的<code>cancelBubble</code>属性为<code>true</code>;</p><p>在Jquery中的事件方法都带有<code>event</code>参数，这是一个符合W3C标准的事件对象，且兼容IE，可以使用<code>event.stopPropagation()</code>阻止冒泡。更简单的，直接<code>return false;</code>，等价于<code>event.stopPropagation()</code>加上<code>event.preventDefault()</code>。</p><blockquote><p>在原生JS中，事件对象要区别对待。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancelEvent</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e) &#123;</div><div class=\"line\">        e.stopPropagation();  <span class=\"comment\">//非IE</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.event.cancelBubble = <span class=\"literal\">true</span>;  <span class=\"comment\">//IE</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"阻止多个子元素的事件\"><a href=\"#阻止多个子元素的事件\" class=\"headerlink\" title=\"阻止多个子元素的事件\"></a>阻止多个子元素的事件</h2><p>综上所述，想要链接和按钮元素不响应父节点事件，便要为所有这些元素注册事件，编写阻止事件冒泡的代码。</p><p>现在的代码可以这样写：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">'#div'</span>);</div><div class=\"line\">div.click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\">&#125;);</div><div class=\"line\">div.on(<span class=\"string\">'click'</span>, <span class=\"string\">'a,button,input'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    event.stopPropagation();  <span class=\"comment\">// 或 return false;</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>这当然是可以解决问题的。<br>可对于处女座的我完全无法接受平白无故多写了一段莫名奇妙的代码。</p><p>于是我想到了<code>event</code>对象。</p><ul><li>event.target 返回事件的目标节点（触发该事件的节点）。</li><li>event.target.tagName 目标节点的标签名</li></ul><p>把上面两个事件合并处理之：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> tag = event.target.tagName;</div><div class=\"line\">    <span class=\"keyword\">if</span>(tag!=<span class=\"string\">'A'</span> &amp;&amp; tag!=<span class=\"string\">'BUTTON'</span> &amp;&amp; tag!=<span class=\"string\">'INPUT'</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"Event","path":"api/tags/Event.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}
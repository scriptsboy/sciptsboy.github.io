{"title":"我刚知道的 Promise","slug":"js-promise","date":"2016-02-03T03:19:47.000Z","updated":"2016-11-12T19:22:43.243Z","comments":true,"path":"api/articles/js-promise.json","excerpt":"<p>有时候，你会发现满世界都是某个字眼。</p><p><strong>Promise</strong>，就是这个家伙。简直阴魂不散，走到哪儿都能看到它。<code>fetch</code>、<code>koa</code>中都有TA的身影，而我却对TA一无所知。<br>搜索TA的文章介绍，第一页中最早的一篇文章已经是2011年了。那是个我还不会<code>HelloWorld</code>的年代啊！</p><h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>Promise 对象用于延迟(deferred) 计算和异步(asynchronous ) 计算。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。</p><p>看概念很迷糊，直接看实例理解吧。</p>","content":"<p>有时候，你会发现满世界都是某个字眼。</p><p><strong>Promise</strong>，就是这个家伙。简直阴魂不散，走到哪儿都能看到它。<code>fetch</code>、<code>koa</code>中都有TA的身影，而我却对TA一无所知。<br>搜索TA的文章介绍，第一页中最早的一篇文章已经是2011年了。那是个我还不会<code>HelloWorld</code>的年代啊！</p><h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>Promise 对象用于延迟(deferred) 计算和异步(asynchronous ) 计算。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。</p><p>看概念很迷糊，直接看实例理解吧。</p><a id=\"more\"></a><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$http</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> core = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">ajax</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method, url, args</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        <span class=\"keyword\">var</span> uri = url;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (args &amp;&amp; (method === <span class=\"string\">'POST'</span> || method === <span class=\"string\">'PUT'</span>)) &#123;</div><div class=\"line\">          uri += <span class=\"string\">'?'</span>;</div><div class=\"line\">          <span class=\"keyword\">var</span> argcount = <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> args) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (args.hasOwnProperty(key)) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (argcount++) &#123;</div><div class=\"line\">                uri += <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              uri += <span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(args[key]);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        client.open(method, uri);</div><div class=\"line\">        client.send();</div><div class=\"line\"></div><div class=\"line\">        client.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status &gt;= <span class=\"number\">200</span> &amp;&amp; <span class=\"keyword\">this</span>.status &lt; <span class=\"number\">300</span>) &#123;</div><div class=\"line\">            resolve(<span class=\"keyword\">this</span>.response);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            reject(<span class=\"keyword\">this</span>.statusText);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        client.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          reject(<span class=\"keyword\">this</span>.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> promise;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">get</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> core.ajax(<span class=\"string\">'GET'</span>, url, args);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">post</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> core.ajax(<span class=\"string\">'POST'</span>, url, args);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">put</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> core.ajax(<span class=\"string\">'PUT'</span>, url, args);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">delete</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> core.ajax(<span class=\"string\">'DELETE'</span>, url, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$http(<span class=\"string\">'http://url/api'</span>).get(&#123;</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">111</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// error</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>以上是一个基于 Promise 的 ajax 实现，调用形式跟 vue-resource 如出一辙（果然又是大神们嚼烂的玩意儿）。</p><p>Promise 的构造函数可以带有1个参数，它是带有<code>resolve</code>、<code>reject</code>两个参数的函数对象，如以上<code>core.ajax</code>函数中创建的 Promise 对象。<br>其中 resolve 用于处理执行成功的场景，reject 用于处理执行失败的场景。<br>在成功与失败的处理阶段 hook 到一个 Promise 对象中，最后通过<code>then</code>方法来真正的处理返回结果。</p><ul><li><code>Promise.prototype.then(onFulfilled[, onRejected])</code></li><li><code>Promise.prototype.catch(onRejected)</code></li></ul><p>并不是所有的失败场景都需要在<code>then</code>方法中处理，在其后继续追加<code>catch</code>方法也是可以的。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$http(<span class=\"string\">'http://url/api'</span>).get(&#123;</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">111</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// success</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// error</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>由于<code>then</code>和<code>catch</code>仍然返回一个 Promise 对象，所以可以出现多个<code>then</code>或<code>catch</code>来处理不同的业务场景。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">$http(<span class=\"string\">'http://url/api'</span>).get(&#123;</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">111</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> handleA(data);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 此处 data 为 handleA 方法处理后的数据</span></div><div class=\"line\">    <span class=\"keyword\">return</span> handleB(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><h2 id=\"为何要用\"><a href=\"#为何要用\" class=\"headerlink\" title=\"为何要用\"></a>为何要用</h2><p>咋一看 Promise 就是一个包装好的代理对象。<strong>不过它的出现究竟是为了解决什么问题呢？</strong></p><p>在 Promise 出现之前，如果你的逻辑中出现了异步操作，而又需要在异步操作外获取异步操作内的结果，不外乎是要使用回调了。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getList</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    $.get(yourApi, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">        callback(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>使用 Promise 呢？</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getList</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        $.get(yourApi, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">            resolve(data);</div><div class=\"line\">        &#125;).error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">            reject(data);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>使用 Promise 代理了原来所需要的回调的，返回一个对象而不是传入回调参数的方法形式更直观和容易理解。<br>在之后的编程中，当目标方法返回了一个 Promise 对象，我们就知道发生了异步操作，需要通过 then 方法来处理场景需求。</p><p>到此为止，Promise 给我的感觉也只不过是语法糖罢了，这种形式的写法我也可以封装出来啊。<br>接下来才是其真正的优点。</p><p>比如异步处理多个的请求结果，原始写法。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">    $.get(<span class=\"string\">'/ApiA'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataA</span>)</span>&#123;</div><div class=\"line\">        $.get(<span class=\"string\">'/ApiB'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataB</span>)</span>&#123;</div><div class=\"line\">            $.get(<span class=\"string\">'/ApiC'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataC</span>)</span>&#123;</div><div class=\"line\">                callback(dataA, dataB, dataC);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>当然以上是一种比较蠢的写法，当请求数量发生变化时的时候，这段代码就需要修改了。<br>可以用递归优化下。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\">url, callback</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(url <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">            len = url.length,</div><div class=\"line\">            dataArr = [],</div><div class=\"line\"></div><div class=\"line\">            eachLoad = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">                $.get(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">                    dataArr.push(data);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span>(i++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">len</span> <span class=\"attr\">-</span> <span class=\"attr\">1</span>) &#123;</span></span></div><div class=\"line\">                        <span class=\"attr\">eachLoad</span>(<span class=\"attr\">url</span>[<span class=\"attr\">i</span>]);</div><div class=\"line\">                    &#125; <span class=\"attr\">else</span> &#123;</div><div class=\"line\">                        <span class=\"attr\">callback.apply</span>(<span class=\"attr\">null</span>, <span class=\"attr\">dataArr</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"attr\">eachLoad</span>(<span class=\"attr\">url</span>[<span class=\"attr\">i</span>]);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"attr\">else</span> &#123;</div><div class=\"line\">        $<span class=\"attr\">.get</span>(<span class=\"attr\">url</span>, <span class=\"attr\">function</span>(<span class=\"attr\">data</span>)&#123;</div><div class=\"line\">            <span class=\"attr\">callback</span>(<span class=\"attr\">data</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>使用 Promise 解决。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseA = $http(<span class=\"string\">'/List'</span>).get(&#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">111</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    promiseB = $http(<span class=\"string\">'/List'</span>).get(&#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">222</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([promiseA, promiseB]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>使用<code>Promise.all</code>方法一次性处理多个操作。</p><p>Promise 属于 ES6 特性，目前在 IE 中还不能用，不过各大框架也都有自己的实现。</p><h2 id=\"jQuery-中的-Promise\"><a href=\"#jQuery-中的-Promise\" class=\"headerlink\" title=\"jQuery 中的 Promise\"></a>jQuery 中的 Promise</h2><p>jQuery 中很多异步操作都会返回一个延迟对象<code>$.Deferred</code>，该对象具有一系列的操作方法。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// animate</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).animate(&#123;</div><div class=\"line\">    <span class=\"attr\">width</span>: <span class=\"string\">'50%'</span></div><div class=\"line\">&#125;, <span class=\"number\">300</span>).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 当延迟成功时调用</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ajax</span></div><div class=\"line\">$.get(<span class=\"string\">'/List'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// succee</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// error</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// when</span></div><div class=\"line\">$.when($.ajax(<span class=\"string\">'/List1'</span>), $.ajax(<span class=\"string\">'/List2'</span>)).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// succee</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// error</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 还有很多，可以去 jQuery Api 中看。</span></div></pre></td></tr></table></figure><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">javascript标准库-Promise | MDN</a></li><li><a href=\"http://www.infoq.com/cn/news/2011/09/js-promise\" target=\"_blank\" rel=\"external\">JavaScript异步编程的Promise模式</a></li><li><a href=\"http://liubin.org/promises-book/\" target=\"_blank\" rel=\"external\">JavaScript Promise迷你书</a></li></ul>","categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"ES6","path":"api/tags/ES6.json"},{"name":"Promise","path":"api/tags/Promise.json"},{"name":"async","path":"api/tags/async.json"}]}
{"title":"实现一个简单的模块加载器","slug":"simple-module-loader","date":"2015-10-23T12:41:39.000Z","updated":"2016-11-12T19:26:10.275Z","comments":true,"path":"api/articles/simple-module-loader.json","excerpt":"<p>最近大半年也写了不少通用模块，却从来没使用过一种通过书写格式。<br>目前公司的前端通用库还是<code>jQuery</code>, 但也不是所有的模块都适合以<code>jQuery 插件</code>的形式开发。平时写的时候一般以立即执行函数或 OO 形式开发，以目前项目情况来看也不是很需要用<code>require.js</code>或<code>sea.js</code>之类的加载器。</p><p>其实我的需求很简单，就是抹去模块在全局作用域的定义，以通用的形式定义和引用。</p>","content":"<p>最近大半年也写了不少通用模块，却从来没使用过一种通过书写格式。<br>目前公司的前端通用库还是<code>jQuery</code>, 但也不是所有的模块都适合以<code>jQuery 插件</code>的形式开发。平时写的时候一般以立即执行函数或 OO 形式开发，以目前项目情况来看也不是很需要用<code>require.js</code>或<code>sea.js</code>之类的加载器。</p><p>其实我的需求很简单，就是抹去模块在全局作用域的定义，以通用的形式定义和引用。</p><a id=\"more\"></a><h2 id=\"最终目标\"><a href=\"#最终目标\" class=\"headerlink\" title=\"最终目标\"></a>最终目标</h2><p>从结果出发分析需求，先列出来最终想要的代码形式。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 形式1：匿名模块，只有一个注入exports参数的函数体</span></div><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">require</span>(<span class=\"string\">'m1'</span>).msg);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式2：具名模块，包含一个模块名称参数和一个注入exports参数的函数体</span></div><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"string\">'m1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports</span>) </span>&#123;</div><div class=\"line\">    exports.msg = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式3：具名模块，包含一个模块名称参数、依赖模块数组、和一个注入依赖模块、exports参数的函数体</span></div><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"string\">'m2'</span>, [<span class=\"string\">'m1'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m1, exports</span>) </span>&#123;</div><div class=\"line\">    exports.msg = m1.msg + <span class=\"string\">\"World\"</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式4：匿名模块，与形式3相比没有模块名称</span></div><div class=\"line\"><span class=\"built_in\">module</span>([<span class=\"string\">'m2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m2, exports</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(m2.msg);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>使用<code>module</code>定义一个模块，拥有一个函数上下文，可以定义模块名称和引用其他模块，也可以通过注入的<code>exports</code>参数输出模块开放接口。<br>某些时候也许需要<code>require(&#39;模块名&#39;)</code>这种形式来直接引用模块。</p><h2 id=\"1-注入环境变量\"><a href=\"#1-注入环境变量\" class=\"headerlink\" title=\"1. 注入环境变量\"></a>1. 注入环境变量</h2><p>从以上四种模块形式来看，<code>module</code>和<code>require</code>两个变量的作用域是全局，需要注入到<code>window</code>中。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w, f</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    w.module = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    w.require = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">namne</span>) </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span>));</div></pre></td></tr></table></figure><p>一个简单的立即执行函数就可以做到。</p><h2 id=\"2-解析-module-参数\"><a href=\"#2-解析-module-参数\" class=\"headerlink\" title=\"2. 解析 module 参数\"></a>2. 解析 module 参数</h2><p><code>module</code>参数的数量是不固定的，最少1个（形式1）、最多3个（形式3）。<br>可以需要通过判断参数数量和类型加以区分。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">w.module = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modName = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>],     <span class=\"comment\">// 模块名 String</span></div><div class=\"line\">        mods = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>],        <span class=\"comment\">// 引用模块 Array</span></div><div class=\"line\">        context = <span class=\"built_in\">arguments</span>[<span class=\"built_in\">arguments</span>.length - <span class=\"number\">1</span>];      <span class=\"comment\">// 模块函数 Function</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(modName <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        mods = modName;</div><div class=\"line\">        modName = f;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>参数数量不固定，也就不必定义形参了，直接从<code>arguments</code>中获取。</p><blockquote><p><code>arguments[0]</code>是模块名，模块名存在时永远是参数第一位；<br><code>arguments[1]</code>是引用模块，模块名不存在时<code>arguments[0]</code>为引用模块，所以判断模块名是数组类型时重新赋值；<br>不管何种形式模块函数都是最后一个参数，直接使用<code>arguments[arguments.length - 1]</code>获取；</p></blockquote><h2 id=\"3-实现-module\"><a href=\"#3-实现-module\" class=\"headerlink\" title=\"3. 实现 module\"></a>3. 实现 module</h2><p>模块函数的参数数量也是不固定的，但至少需要注入<code>exports</code>来输出开放接口。<br>每多引用一个模块，就需要向模块函数中注入一个对应参数。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> modules = &#123;&#125;;  <span class=\"comment\">// 模块容器</span></div><div class=\"line\"></div><div class=\"line\">w.module = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modName = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>],     <span class=\"comment\">// 模块名 String</span></div><div class=\"line\">        mods = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>],        <span class=\"comment\">// 引用模块 Array</span></div><div class=\"line\">        context = <span class=\"built_in\">arguments</span>[<span class=\"built_in\">arguments</span>.length - <span class=\"number\">1</span>];      <span class=\"comment\">// 模块函数 Function</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(modName <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        mods = modName;</div><div class=\"line\">        modName = f;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 1. 取出模块</span></div><div class=\"line\">    <span class=\"keyword\">var</span> args = [];</div><div class=\"line\">    <span class=\"keyword\">if</span>(mods <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; mods.length; i++) &#123;</div><div class=\"line\">            args.push(modules[mods[i]]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 2. 注册模块</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> modName === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">        modules[modName] = &#123;&#125;;</div><div class=\"line\">        args.push(modules[modName]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 3. 注入参数，执行模块</span></div><div class=\"line\">    context.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><blockquote><p>遍历<code>mods</code>取出模块：定义了一个变量<code>modules</code>存放模块，那么假如一个模块引用了模块<code>a</code>、<code>b</code>，则<code>mods = [&#39;a&#39;, &#39;b&#39;];</code>，<code>a</code>、<code>b</code>两个模块的真值即为<code>modules[&#39;a&#39;]</code>、<code>modules[&#39;b&#39;]</code>。当模块为形式2时，参数有两个，参数2为模块函数。此时 <code>arguments[1] === arguments[arguments.length - 1]</code>，引用模块(mods)也指向了模块函数，所以要判断<code>mods</code>类型。<br>注册模块：每一个具名模块都需要注册到<code>modules</code>中，以备其他模块引用。当模块为匿名模块时，不需要注册，所以要判断<code>modName</code>类型。<br>注入参数，执行模块：对于不定数量的参数注入，显然是使用<code>apply</code>最简单。</p></blockquote><h2 id=\"4-实现-require\"><a href=\"#4-实现-require\" class=\"headerlink\" title=\"4. 实现 require\"></a>4. 实现 require</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> modules = &#123;&#125;;  <span class=\"comment\">// 模块容器</span></div><div class=\"line\"></div><div class=\"line\">w.module = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">w.require = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">namne</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> modules[namne];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>暂时不考虑异步加载、加载路径解析等各种情况了，直接从容器中取到模块…</p><h2 id=\"5-完整代码\"><a href=\"#5-完整代码\" class=\"headerlink\" title=\"5. 完整代码\"></a>5. 完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w, f</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modules = &#123;&#125;;   <span class=\"comment\">// 模块容器</span></div><div class=\"line\"></div><div class=\"line\">    w.module = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> modName = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>],     <span class=\"comment\">// 模块名 String</span></div><div class=\"line\">            mods = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>],        <span class=\"comment\">// 引用模块 Array</span></div><div class=\"line\">            context = <span class=\"built_in\">arguments</span>[<span class=\"built_in\">arguments</span>.length - <span class=\"number\">1</span>];      <span class=\"comment\">// 模块函数 Function</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(modName <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">            mods = modName;</div><div class=\"line\">            modName = f;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> args = [];</div><div class=\"line\">        <span class=\"keyword\">if</span>(mods <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; mods.length; i++) &#123;</div><div class=\"line\">                args.push(modules[mods[i]]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> modName === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            modules[modName] = &#123;&#125;;</div><div class=\"line\">            args.push(modules[modName]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        context.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    w.require = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">namne</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> modules[namne];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式1：匿名模块，只有一个注入exports参数的函数体</span></div><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">require</span>(<span class=\"string\">'m1'</span>).msg);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式2：具名模块，包含一个模块名称参数和一个注入exports参数的函数体</span></div><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"string\">'m1'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports</span>) </span>&#123;</div><div class=\"line\">    exports.msg = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式3：具名模块，包含一个模块名称参数、依赖模块数组、和一个注入依赖模块、exports参数的函数体</span></div><div class=\"line\"><span class=\"built_in\">module</span>(<span class=\"string\">'m2'</span>, [<span class=\"string\">'m1'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m1, exports</span>) </span>&#123;</div><div class=\"line\">    exports.msg = m1.msg + <span class=\"string\">\"World\"</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 形式4：匿名模块，与形式3相比没有模块名称</span></div><div class=\"line\"><span class=\"built_in\">module</span>([<span class=\"string\">'m2'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m2, exports</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(m2.msg);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>执行以上代码会报错，代码是自上而下同步执行的，形式1运行阶段模块<code>m1</code>还未定义。<br>把形式1放到形式4之后执行，输出：</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">helloWorld</div><div class=\"line\">hello</div></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"模块化","path":"api/tags/模块化.json"}]}
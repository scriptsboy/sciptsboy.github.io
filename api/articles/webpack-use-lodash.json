{"title":"Webpack按需打包Lodash的几种方式","slug":"webpack-use-lodash","date":"2016-12-16T17:41:21.000Z","updated":"2017-04-16T07:03:00.368Z","comments":true,"path":"api/articles/webpack-use-lodash.json","excerpt":"<p>在数据操作时，Lodash 就是我的弹药库，不管遇到多复杂的数据结构都能用一些函数轻松拆解。</p><p>ES6 中也新增了诸多新的对象函数，一些简单的项目中 ES6 就足够使用了，但还是会有例外的情况引用了少数的 Lodash 函数。一个完整的 Lodash 库，即使是压缩后，现最新版本也有 <code>71k</code> 的体积。不能为了吃一口饭而买下一个饭店啊。</p><p>针对这个问题，其实已经有很多可选方案了。<br>","content":"<p>在数据操作时，Lodash 就是我的弹药库，不管遇到多复杂的数据结构都能用一些函数轻松拆解。</p><p>ES6 中也新增了诸多新的对象函数，一些简单的项目中 ES6 就足够使用了，但还是会有例外的情况引用了少数的 Lodash 函数。一个完整的 Lodash 库，即使是压缩后，现最新版本也有 <code>71k</code> 的体积。不能为了吃一口饭而买下一个饭店啊。</p><p>针对这个问题，其实已经有很多可选方案了。<br><a id=\"more\"></a></p><h2 id=\"函数模块\"><a href=\"#函数模块\" class=\"headerlink\" title=\"函数模块\"></a>函数模块</h2><p>Lodash 中的每个函数在 NPM 都有一个单独的发布模块。<a href=\"https://www.npmjs.com/search?q=lodash\" target=\"_blank\" rel=\"external\">NPM: results for ‘lodash’</a><br>假如你只需要使用<code>_.isEqual</code>，那么你只需要安装<code>lodash.isequal</code>模块，然后按以下方式引用。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isEqual = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash.isequal'</span>)</div><div class=\"line\"><span class=\"comment\">// or ES6</span></div><div class=\"line\"><span class=\"keyword\">import</span> isEqual <span class=\"keyword\">from</span> <span class=\"string\">'lodash.isequal'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">isEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure><h2 id=\"全路径引用\"><a href=\"#全路径引用\" class=\"headerlink\" title=\"全路径引用\"></a>全路径引用</h2><p>在你完整安装 Lodash 后，可以按<code>lodash/函数名</code>的格式单独引入需要的函数模块。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> difference = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash/difference'</span>)</div><div class=\"line\"><span class=\"comment\">// or ES6</span></div><div class=\"line\"><span class=\"keyword\">import</span> difference <span class=\"keyword\">from</span> <span class=\"string\">'lodash/difference'</span></div><div class=\"line\"></div><div class=\"line\">difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>])  <span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure><h2 id=\"使用插件优化\"><a href=\"#使用插件优化\" class=\"headerlink\" title=\"使用插件优化\"></a>使用插件优化</h2><p>在简单场景下，以上两种方式足以解决问题。<br>而遇到复杂的数据对象时，我们不得不在一个文件中引入多个 Lodash 函数，这样就需要在文件中写多个<code>require</code>或<code>import</code>相关函数。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> remove <span class=\"keyword\">from</span> <span class=\"string\">'lodash/remove'</span></div><div class=\"line\"><span class=\"keyword\">import</span> uniq <span class=\"keyword\">from</span> <span class=\"string\">'lodash/uniq'</span></div><div class=\"line\"><span class=\"keyword\">import</span> invokeMap <span class=\"keyword\">from</span> <span class=\"string\">'lodash/invokeMap'</span></div><div class=\"line\"><span class=\"keyword\">import</span> sortBy <span class=\"keyword\">from</span> <span class=\"string\">'lodash/sortBy'</span></div><div class=\"line\"><span class=\"comment\">// more...</span></div></pre></td></tr></table></figure><p>正写到关键处却因为引入一个函数要拉到文件头部去定义引用而打乱了思路，很不爽！</p><p>于是我机智的到 Github 去搜索了<code>webpack</code>和<code>lodash</code>两个关键词的组合，排在首位的 <a href=\"https://github.com/lodash/lodash-webpack-plugin\" target=\"_blank\" rel=\"external\">lodash-webpack-plugin</a> 就是为了解决这个问题而生。</p><p>使用时需要以下模块，其实除了前两个剩下的一般都已安装了：</p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm i -S lodash-webpack-plugin babel-plugin-lodash babel-core babel-loader babel-preset-es2015 webpack</div></pre></td></tr></table></figure><p><strong>配置：</strong></p><figure class=\"highlight js\"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LodashModuleReplacementPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">loaders</span>: [&#123;</div><div class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">      <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">plugins</span>: [<span class=\"string\">'transform-runtime'</span>, <span class=\"string\">'lodash'</span>],</div><div class=\"line\">        <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> LodashModuleReplacementPlugin,</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurrenceOrderPlugin,</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>其中<code>babel-plugin-lodash</code>的配置，也就是<code>plugins: [&#39;lodash&#39;]</code>，并不是一定要在<code>loaders</code>中，也可以单独定义<code>babel</code>。</p><figure class=\"highlight js\"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LodashModuleReplacementPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">loaders</span>: [&#123;</div><div class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">babel</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>],</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [<span class=\"string\">'transform-runtime'</span>, <span class=\"string\">'lodash'</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> LodashModuleReplacementPlugin,</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurrenceOrderPlugin,</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>又或者是<code>.babelrc</code>文件中。</p><p>以上工作完成了，在每个你需要使用 lodash 函数的文件中只需要引用一次 lodash，即可调用任意函数而不会造成完全打包。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"></div><div class=\"line\">_.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\">// 打包时只会引入这一个函数模块</span></div></pre></td></tr></table></figure><blockquote><p>注意：必须要使用 ES2015 的模块引用方式才有效。</p></blockquote><h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>以上即是我目前所知道的几种方式，如果哪位朋友有更好的方式（比如只需要全局引入一次），请一定分享与我！😋</p>","categories":[],"tags":[{"name":"Webpack","path":"api/tags/Webpack.json"},{"name":"Lodash","path":"api/tags/Lodash.json"}]}
{"title":"Node.js命令行玩法","slug":"nodejs-shell","date":"2015-09-19T12:20:13.000Z","updated":"2016-11-12T19:24:07.331Z","comments":true,"path":"api/articles/nodejs-shell.json","excerpt":"<p><strong>Node.js</strong> 的热门之处就在于其命令行开发能力。<br>一个在 <code>shell</code> 下编码的程序员绝对要比在常规编辑器上编码的程序员酷！</p>","content":"<p><strong>Node.js</strong> 的热门之处就在于其命令行开发能力。<br>一个在 <code>shell</code> 下编码的程序员绝对要比在常规编辑器上编码的程序员酷！</p><a id=\"more\"></a><h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><ol><li>win10 x64</li><li>node.js</li><li>npm</li></ol><h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><p>一切从 <code>hello world</code> 开始！</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</div></pre></td></tr></table></figure><p>普通的 node.js 脚本需要使用<code>node 文件名</code>的形式执行，在脚本首行加上<code>#!/usr/bin/env node</code>可以在<code>linux</code>环境中指定脚本的解释程序。</p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt; hello.js</div><div class=\"line\">hello world</div></pre></td></tr></table></figure><h2 id=\"全局命令\"><a href=\"#全局命令\" class=\"headerlink\" title=\"全局命令\"></a>全局命令</h2><p>以上的做法只能在特定的目录下执行该脚本文件，如果想做到如<code>node</code>般的无处不在，需要借用<code>npm</code>了。</p><p>在当前目录新建<code>package.json</code>，如下编码：</p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"hello\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"bin\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"hello\"</span>: <span class=\"string\">\"hello.js\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>然后执行<code>npm link</code>命令，将会把以上配置注册到全局，这样在任何一个目录都可以调用<code>hello</code>输出<code>hello world</code>了。</p><h2 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h2><p>光有特定命令名也只能执行一项特定任务，现在该实现<strong>多态</strong>了。</p><p>写一个小工具吧。<br>需求很简单，执行<code>run name</code>打开对应的应用程序。</p><p>新建文件<code>config.json</code>、<code>run.js</code>，<code>config.json</code>用于配置应用程序的路径。</p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"qq\"</span>: <span class=\"string\">\"D:\\\\qq\\\\Bin\\\\QQ.exe\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>先拿企鹅开刀，在<code>config.json</code>文件中配置<code>qq.exe</code>的绝对路径。<br>另外别忘了在<code>package.json</code>中添加<code>run.js</code>。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> name = process.argv[<span class=\"number\">2</span>],</div><div class=\"line\">    exec = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec,</div><div class=\"line\">    fs   = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cfg = <span class=\"built_in\">JSON</span>.parse(fs.readFileSync(__dirname + <span class=\"string\">'/config.json'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> child = exec(<span class=\"string\">'start '</span> + cfg[name], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure><p>使用系统变量<code>process.argv</code>获取输入参数，引用<code>fs</code>模块用于读取配置文件，<code>child_process</code>模块用于执行系统命令。</p><p>可为什么参数索引是 <strong>2</strong> 呢？难道命令行索引从 <strong>1</strong> 开始吗？</p><blockquote><p>其实是因为我们实际执行的命令还是<code>node run name</code>，<code>node</code>索引为 <strong>0</strong>。</p></blockquote><p>开始测试。</p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">run qq</div></pre></td></tr></table></figure><p>企鹅登录窗口应声而出。<br>如果还需要其他应用程序的命令行启动可以在<code>config.json</code>中添加新的配置项。</p><p>以上代码使用的是 node.js 原生的命令行模块，还有一些更方便的包装模块，参考：<a href=\"http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html\" target=\"_blank\" rel=\"external\">阮一峰 - Node.js 命令行程序开发教程</a>。</p>","categories":[],"tags":[{"name":"Nodejs","path":"api/tags/Nodejs.json"},{"name":"cmd","path":"api/tags/cmd.json"}]}
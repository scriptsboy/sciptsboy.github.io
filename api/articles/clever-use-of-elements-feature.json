{"title":"对元素特性巧妙利用的一些例子","slug":"clever-use-of-elements-feature","date":"2016-07-15T01:10:40.000Z","updated":"2016-11-12T19:11:10.123Z","comments":true,"path":"api/articles/clever-use-of-elements-feature.json","excerpt":"<p>在一些框架和库中都可见到一些创建一个空元素，通过对该元素特性测试来判定当前运行环境是否支持某种特性的运用。<code>jQuery</code> 也是以此来 support 各种环境，与其通过可被随意修改的 UA 测试环境倒不如直接创建元素测试来的准确。</p><p>我们可利用元素本身特性去做的事并不止于 <strong>特性测试</strong>。细心一点，你会发现一些元素独一无二的特性可以被巧妙利用来做一些工作。<br>","content":"<p>在一些框架和库中都可见到一些创建一个空元素，通过对该元素特性测试来判定当前运行环境是否支持某种特性的运用。<code>jQuery</code> 也是以此来 support 各种环境，与其通过可被随意修改的 UA 测试环境倒不如直接创建元素测试来的准确。</p><p>我们可利用元素本身特性去做的事并不止于 <strong>特性测试</strong>。细心一点，你会发现一些元素独一无二的特性可以被巧妙利用来做一些工作。<br><a id=\"more\"></a></p><h2 id=\"HTML转义\"><a href=\"#HTML转义\" class=\"headerlink\" title=\"HTML转义\"></a>HTML转义</h2><p>创建 <code>Option</code> 实例，传入要被转义的字符串。因为 <code>Option</code> 构造函数第一个参数为 <code>text</code>，所以任你传入任何 <code>html</code> 代码都会被转义为 <code>textNode</code>。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Option(<span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>).innerHTML     <span class=\"comment\">// \"&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;\"</span></div></pre></td></tr></table></figure><p>同理，给 <code>div</code> 的 <code>innerText</code> 赋值，再通过 <code>innerHTML</code> 取，也可以做到，只是看起来不如一行代码来的巧妙。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">div.innerText = <span class=\"string\">'&lt;a&gt;&lt;/a&gt;'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(div.innerHTML)      <span class=\"comment\">// \"&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;\"</span></div></pre></td></tr></table></figure><h2 id=\"解析URL\"><a href=\"#解析URL\" class=\"headerlink\" title=\"解析URL\"></a>解析URL</h2><p><code>a</code> 标签天生支持这些 URL 属性，是不是像极了 NodeJS 中 URL 对象。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</div><div class=\"line\">a.href = <span class=\"string\">'http://test.com:3000/a/b?k=1#dd'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.protocol);    <span class=\"comment\">// \"http:\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.host);        <span class=\"comment\">// \"test.com\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.hostname)     <span class=\"comment\">// \"test.com\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.port)         <span class=\"comment\">// 3000</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.pathname)     <span class=\"comment\">// \"/a/b\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.search)       <span class=\"comment\">// \"?k=1\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.hash)         <span class=\"comment\">// \"#dd\"</span></div></pre></td></tr></table></figure><h2 id=\"获取一串文字在浏览器中所占的宽度\"><a href=\"#获取一串文字在浏览器中所占的宽度\" class=\"headerlink\" title=\"获取一串文字在浏览器中所占的宽度\"></a>获取一串文字在浏览器中所占的宽度</h2><p>想知道宽度还不简单，扔到浏览器中跑一圈看看。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tester = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">tester.style.display = <span class=\"string\">'inline-block'</span>;</div><div class=\"line\">tester.innerHTML = <span class=\"string\">'博客：imys.net'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(tester);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(tester.offsetWidth)</div></pre></td></tr></table></figure><p><code>display</code> 属性一定要设置为 <code>inline-block</code>。因为 <code>div:display</code> 默认为 <code>block</code>，块级元素宽度默认等于父级元素宽度，这样获取到的宽度就不是字符的宽度了。</p><p>当你想用 js 去截断一段长文字时，可以使用这个例子。</p><h2 id=\"判断canvas是否为空\"><a href=\"#判断canvas是否为空\" class=\"headerlink\" title=\"判断canvas是否为空\"></a>判断canvas是否为空</h2><p>两个等宽等高内容相同的 canvas 所生成的 <code>dataURL</code> 是相同的，这样最终把对象的比较转换为字符串的比较。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCanvasBlank</span>(<span class=\"params\">canvas</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> blank = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</div><div class=\"line\">    blank.width = canvas.width;</div><div class=\"line\">    blank.height = canvas.height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> canvas.toDataURL() === blank.toDataURL();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"获取Computed-styles\"><a href=\"#获取Computed-styles\" class=\"headerlink\" title=\"获取Computed styles\"></a>获取Computed styles</h2><p>这里的 <code>Computed styles</code> 不是指 <code>getComputedStyle(element)</code> 函数结果，而是像浏览器 Dev Tools 中 Styles 面板右侧的计算样式。是要获取最终被样式表影响的 css 属性，不包括标签默认属性和 <code>user agent stylesheet</code>。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterInheritedStyles</span>(<span class=\"params\">el</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> tester = <span class=\"built_in\">document</span>.createElement(el.tagName);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(tester);  <span class=\"comment\">// 元素必须插入到文档中才能计算出默认样式</span></div><div class=\"line\">    <span class=\"keyword\">var</span> defaultStyle = <span class=\"built_in\">window</span>.getComputedStyle(tester, <span class=\"literal\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> currentStyle = <span class=\"built_in\">window</span>.getComputedStyle(el, <span class=\"literal\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> currentStyle) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(currentStyle.getPropertyValue(k) !== defaultStyle.getPropertyValue(k)) &#123;</div><div class=\"line\">        </div><div class=\"line\">            ret[k] = currentStyle.getPropertyValue(k);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(tester);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>创建一个标签相同的 <code>Element</code> 添加到文档中产生默认样式，与当前元素样式逐个比较，返回不一致的样式属性。</p><p>不过这个函数还不是最终版的。当一个元素被插入到文档中时，由于没有添加 id 、 class 、style 属性，也就不会受 id 选择器、类选择器、行内样式影响，但显然会受标签选择器影响。</p><p>所以如果能在返回值基础上对标签选择器属性进行过滤，才是最终结果。但目前通过 <code>document.styleSheets</code> 只限于获取内联样式表中规则，对于外部样式表中的规则检索还没有什么好的办法。</p><hr><p>暂时只知道这么多。针对前端复杂的客户环境，单就 <strong>特性测试</strong> 而言已经可以帮我们解决很多问题了。</p>","categories":[],"tags":[{"name":"Html","path":"api/tags/Html.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"技巧","path":"api/tags/技巧.json"},{"name":"Element","path":"api/tags/Element.json"}]}
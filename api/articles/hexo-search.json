{"title":"Hexo添加站内搜索功能初步完成","slug":"hexo-search","date":"2016-05-11T08:08:50.000Z","updated":"2017-08-20T13:57:23.790Z","comments":true,"path":"api/articles/hexo-search.json","excerpt":"<p>不止一次有同学在 <a href=\"https://github.com/yscoder/hexo-theme-indigo/issues\">Issues</a>、邮件等渠道中向我反馈<strong>增加站内搜索功能</strong>。本来准备什么时候搞个 2.0 版的主题再加上这些新功能，可一直没什么太好的想法，反正也是折腾，就把搜索功能做了一下。</p><h2 id=\"搜索方案\"><a href=\"#搜索方案\" class=\"headerlink\" title=\"搜索方案\"></a>搜索方案</h2><p>针对无数据库的静态博客搜索方案一般有两种：</p><ol><li>第三方搜索服务；</li><li>序列化站点内容作为数据源，然后自己写查询方法。","content":"<p>不止一次有同学在 <a href=\"https://github.com/yscoder/hexo-theme-indigo/issues\" target=\"_blank\" rel=\"external\">Issues</a>、邮件等渠道中向我反馈<strong>增加站内搜索功能</strong>。本来准备什么时候搞个 2.0 版的主题再加上这些新功能，可一直没什么太好的想法，反正也是折腾，就把搜索功能做了一下。</p><h2 id=\"搜索方案\"><a href=\"#搜索方案\" class=\"headerlink\" title=\"搜索方案\"></a>搜索方案</h2><p>针对无数据库的静态博客搜索方案一般有两种：</p><ol><li>第三方搜索服务；</li><li>序列化站点内容作为数据源，然后自己写查询方法。<a id=\"more\"></a></li></ol><h2 id=\"第三方搜索服务\"><a href=\"#第三方搜索服务\" class=\"headerlink\" title=\"第三方搜索服务\"></a>第三方搜索服务</h2><h3 id=\"基于搜索引擎的\"><a href=\"#基于搜索引擎的\" class=\"headerlink\" title=\"基于搜索引擎的\"></a>基于搜索引擎的</h3><p>包括 Google 和百度提供的站内搜索，比如 Hexo 文档中的辅助函数 <a href=\"https://hexo.io/zh-cn/docs/helpers.html#search-form\" target=\"_blank\" rel=\"external\">search-form</a> 就提供了一个 Google 搜索框。搜索结果取决于该搜索引擎对你站点的收录情况。</p><p>抛开其他原因来讲，没有颜值的搜索服务我是不会考虑的。</p><p>接着我实验了一下在 Hexo 中有用户基础的 <strong>Swiftype</strong> 和 Hexo 官网使用的 <strong>Algolia</strong>。</p><h3 id=\"Swiftype\"><a href=\"#Swiftype\" class=\"headerlink\" title=\"Swiftype\"></a>Swiftype</h3><p><a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"external\">Swiftype</a> 安装很简单，关于其在 Hexo 中使用的文章介绍也很多，我只说下使用体验。</p><p>配合我自定义的搜索框样式，外观展现还算过关。</p><p>可以对色调进行修改，由于是在单页面展示搜索结果，就算不提供外观修改也可以自己重写 css ，类似多说。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-colors.jpg\" alt=\"Swiftype-colors\"></div><div class=\"image-caption\">Swiftype-colors</div></figure><p>搜索结果的展示可以自定义，包括内容布局、字段排列、分页等。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-results.jpg\" alt=\"Swiftype-results\"></div><div class=\"image-caption\">Swiftype-results</div></figure><p>搜索结果容器可完全自定义，可设置单页或新页面显示搜索结果，对外观的控制力更强。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-container.jpg\" alt=\"Swiftype-container\"></div><div class=\"image-caption\">Swiftype-container</div></figure><p>可以设置字段权重，比如优先展示文章标题的匹配结果。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-sort.jpg\" alt=\"Swiftype-sort\"></div><div class=\"image-caption\">Swiftype-sort</div></figure><p>可以单独为某个关键字搜索结果进行管理，比如排序、置顶、删除等等，话说某度推广不就是这样吗。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-rank.jpg\" alt=\"Swiftype-rank\"></div><div class=\"image-caption\">Swiftype-rank</div></figure><p>可以设置抓取规则，比如只抓取文章页。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-rules.jpg\" alt=\"Swiftype-rules\"></div><div class=\"image-caption\">Swiftype-rules</div></figure><p>默认的字段匹配不满意，下图是对<code>hexo</code>的搜索结果。Swiftype 的<code>body</code>字段默认抓取整个页面，我每个页面的左侧 footer 都有<code>hexo</code>这个单词，在我设置了只抓取文章页后，博客一共 46 篇文章也就匹配了 46 个结果。我期望它只对文章内容检索，这样更精准。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/Swiftype-show.jpg\" alt=\"Swiftype-show\"></div><div class=\"image-caption\">Swiftype-show</div></figure><p>如果能自定义抓取字段，指定抓取内容当然是极好的。Swiftype 文档中也提供了这方面内容，<a href=\"https://swiftype.com/documentation/crawler_quick_start\" target=\"_blank\" rel=\"external\">Crawler</a>。</p><p>大概看了一下，感觉 <strong>Content Inclusion/Exclusion</strong> 和 <strong>Meta Tags</strong> 方式应该能满足需求。我也尝试了一下，发现没效果，不知道是不是要重新抓取才生效。</p><p>设置重新抓取后等了 1 个小时还没什么效果，我只好先进行下一步了。</p><h3 id=\"Algolia\"><a href=\"#Algolia\" class=\"headerlink\" title=\"Algolia\"></a>Algolia</h3><p><a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"external\">Algolia</a> 我只注册了账户，然后就没有然后了。。。因为我准备使用方案2了。</p><p>从 Algolia 管理界面和文档上来看不会比 Swiftype 差，可留作备选。</p><h2 id=\"自定义搜索\"><a href=\"#自定义搜索\" class=\"headerlink\" title=\"自定义搜索\"></a>自定义搜索</h2><p>没有数据库的前提下实现查询，也可以使用数据文件做数据源。Hexo 中也有这方面的先驱者，在 <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">Hexo-Plugins</a> 页可以找到生成数据文件的两个插件，<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a> 和 <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"external\">hexo-generator-search</a>。</p><p>hexo-generator-json-content 生成的数据文件为<code>json</code>格式。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">meta: &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: hexo.config.title,</div><div class=\"line\">    <span class=\"attr\">subtitle</span>: hexo.config.subtitle,</div><div class=\"line\">    <span class=\"attr\">description</span>: hexo.config.description,</div><div class=\"line\">    <span class=\"attr\">author</span>: hexo.config.author,</div><div class=\"line\">    <span class=\"attr\">url</span>: hexo.config.url</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">pages</span>: [&#123; <span class=\"comment\">//-&gt; all pages</span></div><div class=\"line\">  title: page.title,</div><div class=\"line\">  <span class=\"attr\">slug</span>: page.slug,</div><div class=\"line\">  <span class=\"attr\">date</span>: page.date,</div><div class=\"line\">  <span class=\"attr\">updated</span>: page.updated,</div><div class=\"line\">  <span class=\"attr\">comments</span>: page.comments,</div><div class=\"line\">  <span class=\"attr\">permalink</span>: page.permalink,</div><div class=\"line\">  <span class=\"attr\">path</span>: page.path,</div><div class=\"line\">  <span class=\"attr\">excerpt</span>: page.excerpt, <span class=\"comment\">//-&gt; only text ;)</span></div><div class=\"line\">  keywords: <span class=\"literal\">null</span> <span class=\"comment\">//-&gt; it needs settings</span></div><div class=\"line\">  text: page.content, <span class=\"comment\">//-&gt; only text minified ;)</span></div><div class=\"line\">  raw: page.raw, <span class=\"comment\">//-&gt; original MD content</span></div><div class=\"line\">  content: page.content <span class=\"comment\">//-&gt; final HTML content</span></div><div class=\"line\">&#125;],</div><div class=\"line\"><span class=\"attr\">posts</span>: [&#123; <span class=\"comment\">//-&gt; only published posts</span></div><div class=\"line\">  title: post.title,</div><div class=\"line\">  <span class=\"attr\">slug</span>: post.slug,</div><div class=\"line\">  <span class=\"attr\">date</span>: post.date,</div><div class=\"line\">  <span class=\"attr\">updated</span>: post.updated,</div><div class=\"line\">  <span class=\"attr\">comments</span>: post.comments,</div><div class=\"line\">  <span class=\"attr\">permalink</span>: post.permalink,</div><div class=\"line\">  <span class=\"attr\">path</span>: post.path,</div><div class=\"line\">  <span class=\"attr\">excerpt</span>: post.excerpt, <span class=\"comment\">//-&gt; only text ;)</span></div><div class=\"line\">  keywords: <span class=\"literal\">null</span> <span class=\"comment\">//-&gt; it needs settings</span></div><div class=\"line\">  text: post.content, <span class=\"comment\">//-&gt; only text minified ;)</span></div><div class=\"line\">  raw: post.raw, <span class=\"comment\">//-&gt; original MD content</span></div><div class=\"line\">  content: post.content, <span class=\"comment\">//-&gt; final HTML content</span></div><div class=\"line\">  categories: [&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: category.name,</div><div class=\"line\">    <span class=\"attr\">slug</span>: category.slug,</div><div class=\"line\">    <span class=\"attr\">permalink</span>: category.permalink</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"attr\">tags</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: tag.name,</div><div class=\"line\">    <span class=\"attr\">slug</span>: tag.slug,</div><div class=\"line\">    <span class=\"attr\">permalink</span>: tag.permalink</div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure><p>hexo-generator-search 生成的数据文件为<code>xml</code>格式。</p><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">search</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">entry</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Post title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://yourposturl.html<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">content</span> <span class=\"attr\">type</span>=<span class=\"string\">\"html\"</span>&gt;</span>helloworldhelloworldhelloworldhelloworldhelloworldhelloworld<span class=\"tag\">&lt;/<span class=\"name\">content</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">entry</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Post title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://yourposturl.html<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">content</span> <span class=\"attr\">type</span>=<span class=\"string\">\"html\"</span>&gt;</span>helloworldhelloworldhelloworldhelloworldhelloworldhelloworld<span class=\"tag\">&lt;/<span class=\"name\">content</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">search</span>&gt;</span></div></pre></td></tr></table></figure><p>对于 js 语言来说还是解析 json 更方便，如果需要用<code>xml</code>做数据文件我完全可以使用已有的<a href=\"/atom.xml\">atom.xml</a>。</p><p><a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a> 生成的<code>json</code>数据内容挺全的，不过并不是我都需要的。可以通过添加站点配置设置你需要生成的字段。</p><p><code>meta</code>是站点信息，<code>pages</code>是除文章页以外的页面信息，这都是我不需要的，我只要求搜索文章页。</p><p>此外，文章页的字段也可以根据需求减少，以减小数据文件大小。下图可以直观看出每个字段表示的内容。</p><figure class=\"image-bubble\"><div class=\"img-lightbox\"><div class=\"overlay\"></div><img src=\"http://static.imys.net/hexo-generator-json-content.jpg\" alt=\"hexo-generator-json-content\"></div><div class=\"image-caption\">hexo-generator-json-content</div></figure><ul><li><code>slug</code>、<code>comments</code>、<code>link</code>、<code>keywords</code>、<code>categories</code>都是无内容或不需要的字段；</li><li><code>date</code>和<code>updated</code>、<code>path</code>和<code>permalink</code>留其一即可；</li><li><code>excerpt</code>可以不要，因为我们要检索文章全文；</li><li><code>raw</code>是<code>markdown</code>元数据，<code>content</code>是包含<code>html</code>标签的文章内容，处理起来最方便的是<code>text</code>纯文本。</li></ul><p>最后的配置如下，需要放到<code>hexo/_config.yml</code>中。</p><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p>接着就是实现查询方法并把结果渲染到页面。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// xhr加载数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadData</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 略...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配文章内容返回结果</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matcher</span>(<span class=\"params\">post, regExp</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 匹配优先级：title &gt; tags &gt; text</span></div><div class=\"line\">    <span class=\"keyword\">return</span> regExp.test(post.title) || post.tags.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> regExp.test(tag.name);</div><div class=\"line\">    &#125;) || regExp.test(post.text);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 渲染到页面</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 略...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 查询</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></div><div class=\"line\">    <span class=\"comment\">// a b c =&gt; /a|b|c/gmi</span></div><div class=\"line\">    <span class=\"keyword\">var</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key.replace(<span class=\"regexp\">/[ ]/g</span>, <span class=\"string\">'|'</span>), <span class=\"string\">'gmi'</span>);</div><div class=\"line\"></div><div class=\"line\">    loadData(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> result = data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> matcher(post, regExp);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        render(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>正则加上<code>filter</code>、<code>some</code>两个数组过滤函数，就这么简单。也没想做太复杂，否则匹配结果高亮、匹配片段截取又够折腾半天。</p><p>完成后就是现在博客的搜索了，PC 端浮动面板显示，Mobile 端全屏显示。</p>","categories":[],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"}]}
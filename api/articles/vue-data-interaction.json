{"title":"Vue中的数据交互","slug":"vue-data-interaction","date":"2016-05-03T09:39:44.000Z","updated":"2016-11-12T19:31:18.042Z","comments":true,"path":"api/articles/vue-data-interaction.json","excerpt":"<p>在 Vue 中通常以一个 Vue 实例来表示一个应用，一个应用由若干个组件拼装而成。<br>没错，就像“装机”一样。当你把主板、CPU、显卡、内存、散热器、SSD、电源等摆放到机箱的各个位置后，很明显产生了一个明确的需求：我怎么让这些东西协同工作？<br>回到 Vue 中，处理不同组件之间的数据或状态是一件经常遇到的事。<br>","content":"<p>在 Vue 中通常以一个 Vue 实例来表示一个应用，一个应用由若干个组件拼装而成。<br>没错，就像“装机”一样。当你把主板、CPU、显卡、内存、散热器、SSD、电源等摆放到机箱的各个位置后，很明显产生了一个明确的需求：我怎么让这些东西协同工作？<br>回到 Vue 中，处理不同组件之间的数据或状态是一件经常遇到的事。<br><a id=\"more\"></a></p><p>好在 <a href=\"http://cn.vuejs.org/guide/\" target=\"_blank\" rel=\"external\">Vue的文档</a> 足够详细。关于组件交互的部分，如果没有实际需求，我表示难以明白<code>props</code>以及自定义事件等使用场景是什么。</p><h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><p><code>props</code>是定义在子组件中的属性，用来定义期望从父组件传下来的数据。</p><p>从实际场景着手，写一个简单的需求。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 子组件模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;helloWorld&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 父组件模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure><p>当父组件中输入内容时显示到子组件中。</p><p>这时，我需要在子组件中声明一个 props 属性来接收父组件中输入的内容。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 子组件</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">helloWorld</span>: <span class=\"built_in\">String</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 父组件</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">child</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'child'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure><p>还需要告诉子组件，它的 props 对应父组件中的哪个数据。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 在子组件上标记 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:hello-world</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>camelCase 格式属性用作 HTML 特性时需要转换成 kebab-case 格式。</p></blockquote><p>当前需求轻松的解决了！</p><p>有没有发现 props 好像是单向的，父 -&gt; 子？</p><p>不，并不是。只是默认是单向的。可以通过添加额外的修饰符来显示强制双向或单词绑定。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 双向绑定 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:hello-world.sync</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 单次绑定 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:hello-world.once</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div></pre></td></tr></table></figure><p>而正像 Vue 文档中所说的，默认单向绑定是<strong>为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</strong></p><p>举个例子，如果当前子组件设置为双向绑定，另有其他的子组件依赖父组件的<code>helloWorld</code>属性。这种关系下如果子组件修改了数据，势必引起其他子组件的状态改变。某些场景下我们并不希望发生这种情况。</p><h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><p>使用自定义事件也可以实现父子组件之间的通信，通过事件触发的形式来传递数据。</p><ul><li>使用<code>$on()</code>监听事件；</li><li>使用<code>$emit()</code>在它上面触发事件；</li><li>使用<code>$dispatch()</code>派发事件，事件沿着父链冒泡；</li><li>使用<code>$broadcast()</code>广播事件，事件向下传导给所有的后代。</li></ul><p>现在变更需求，把输入框拿出来作为子组件B。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 子组件B模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 父组件模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-b</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure><p>当子组件B内容变化时，我应当通知父组件：头儿，我的工作完成了。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"onInput\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">onInput</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.text.trim()) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.$dispatch(<span class=\"string\">'child-next'</span>, <span class=\"keyword\">this</span>.text);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>父组件收到通知后，广播给其他需要的子组件：B已经完成XXX了，剩下的东西交给你了。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">child</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'child'</span>),</div><div class=\"line\">        <span class=\"string\">'child-b'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'childB'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'child-next'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$broadcast(<span class=\"string\">'child-finish'</span>, text);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure><p>或者为了能从父组件中直观的看出事件来源，可以使用显示声明绑定事件。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child-b</span> @<span class=\"attr\">child-next</span>=<span class=\"string\">\"handle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-b</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">child</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'child'</span>),</div><div class=\"line\">        <span class=\"string\">'child-b'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'childB'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">handle</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$broadcast(<span class=\"string\">'child-finish'</span>, text);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>接收广播的子组件，需要添加对应的处理事件。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;helloWorld&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">helloWorld</span>: <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'child-finish'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.helloWorld = text;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><p>与 props 方式相比，自定义事件的方式各个组件的数据独立，不会被父或子组件轻易修改。因为我们能控制在何时进行事件派发和广播。</p><p>当然这两种方式并不冲突，可以结合使用来创造最佳实践。</p><h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><p>最后就是使用大杀器 <a href=\"http://vuejs.github.io/vuex/\" target=\"_blank\" rel=\"external\">Vuex</a> 了。</p><p>不管是<code>props</code>还是<code>自定义事件</code>，如果数据要由子组件到另一个子组件中，都要进行父组件的中转。随着项目的逐步增大，数据流也会变得复杂，难以管理和发现问题。</p><p>而 Vuex 就是独立的一个数据管理层。你需要把组件的本地状态和应用状态区分开来，把应用状态交由 Vuex 来管理，方便每一个组件去交换数据更新状态。</p><p><a href=\"http://vuejs.github.io/vuex/zh-cn/tutorial.html\" target=\"_blank\" rel=\"external\">这是一个简单的例子</a></p>","categories":[],"tags":[{"name":"Vue","path":"api/tags/Vue.json"},{"name":"Vuex","path":"api/tags/Vuex.json"}]}
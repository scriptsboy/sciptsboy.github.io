{"title":"如何为Canvas中特定图形绑定事件？","slug":"canvas-event","date":"2016-08-08T06:43:38.000Z","updated":"2016-11-12T19:10:45.627Z","comments":true,"path":"api/articles/canvas-event.json","excerpt":"<p>Canvas 本身也属于 HTMLElement，自然也是支持各种事件绑定的。<br>但绘制在其中的图形并不作为其子元素存在，这就不能方便的为 Canvas 中的某个特定图形去绑定事件。</p><p>我们都知道 js 中的事件委托，将事件绑定到父节点上，待到父节点响应事件时，动态判断当前响应元素为目标子节点时再执行对应的操作。</p><p>这个思想同样也可以用在 Canvas 上，只需要为 <code>canvas</code> 元素绑定事件，事件响应时判断当前鼠标位置处于哪个图形之上，执行对应的操作。<br>","content":"<p>Canvas 本身也属于 HTMLElement，自然也是支持各种事件绑定的。<br>但绘制在其中的图形并不作为其子元素存在，这就不能方便的为 Canvas 中的某个特定图形去绑定事件。</p><p>我们都知道 js 中的事件委托，将事件绑定到父节点上，待到父节点响应事件时，动态判断当前响应元素为目标子节点时再执行对应的操作。</p><p>这个思想同样也可以用在 Canvas 上，只需要为 <code>canvas</code> 元素绑定事件，事件响应时判断当前鼠标位置处于哪个图形之上，执行对应的操作。<br><a id=\"more\"></a></p><h2 id=\"isPointInPath\"><a href=\"#isPointInPath\" class=\"headerlink\" title=\"isPointInPath\"></a>isPointInPath</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">context.isPointInPath(x, y);</div></pre></td></tr></table></figure><p>理论上讲，想要知道一个点是否处于一个图形之中，现成的算法应该是有很多了。不过难得 canvas 本身就提供了这样的函数，用来判断一个点是否处于当前路径中。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = c.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\">ctx.rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(ctx.isPointInPath(<span class=\"number\">50</span>, <span class=\"number\">100</span>))  <span class=\"comment\">// true</span></div></pre></td></tr></table></figure><p>就像这样，当你创建一个矩形时，就会产生一个路径，此时就可以调用该方法去判断一个点是否存在于该路径。</p><p>产生路径的函数还有其他，比如：<code>lineTo()</code>、<code>clip()</code>、<code>arc()</code>、<code>arcTo()</code> 等。</p><h2 id=\"实现图形的事件绑定\"><a href=\"#实现图形的事件绑定\" class=\"headerlink\" title=\"实现图形的事件绑定\"></a>实现图形的事件绑定</h2><p>先来个简单的饼图吧。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"c\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'c'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> r = canvas.width / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(r, r, r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">1</span>);</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#2196f3'</span>; <span class=\"comment\">//蓝色</span></div><div class=\"line\">ctx.fill();</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(r, r, r, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">1</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>);</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#f44336'</span>; <span class=\"comment\">//红色</span></div><div class=\"line\">ctx.fill();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInPath</span> (<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">    ctx.arc(r, r, r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.isPointInPath(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">canvas.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(isInPath(e.offsetX, e.offsetY)) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure><p>现在创建一个红蓝拼接的饼图，<code>isInPath</code> 方法判断一个点是否处于蓝色区。理想的结果是只有当鼠标点击区域为蓝色区域时才输出 <code>hello</code>。</p><p>但事实确不是如此，<a href=\"https://jsfiddle.net/imys/7r4xes6v/1/\" target=\"_blank\" rel=\"external\">示例Demo</a>。无论点击红色还是蓝色区域均会输出 <code>hello</code>，这是怎么回事呢？</p><h3 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h3><p>既然 <code>isPointInPath(x, y)</code> 的基于路径判断的，那我们就从路径入手。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">ctx.arc(r, r, r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">1</span>);</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#2196f3'</span>;</div><div class=\"line\">ctx.fill();</div><div class=\"line\"></div><div class=\"line\">ctx.arc(r, r, r, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">1</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span>);</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'#f44336'</span>;</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure><p>当我们把画图时的 <code>ctx.beginPath()</code> 去掉后，发现生成的图形变成一个红色的整圆了：<a href=\"https://jsfiddle.net/imys/7r4xes6v/2/\" target=\"_blank\" rel=\"external\">示例Demo</a>。</p><p><code>beginPath()</code> 用来重置路径，由于第一个半圆画完路径未重置，第二个半圆就绘制了两条路径。这似乎解释了上个问题的答案。</p><p>在 <code>isInPath(x, y)</code> 函数中，由于路径没有重置，所以最终最终判断的不止是 <code>ctx.arc(r, r, r, 0, Math.PI * 1)</code> 这个路径，还有方法外的画红色圆的路径。两个路径加一起自然就是个整圆，所以无论蓝色区还是红色区都会输出。</p><h3 id=\"正确结果\"><a href=\"#正确结果\" class=\"headerlink\" title=\"正确结果\"></a>正确结果</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInPath</span> (<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.arc(r, r, r, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.PI * <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.isPointInPath(x, y)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>修改 <code>isInPath</code> 函数，加入重置路径，结果正确输出：<a href=\"https://jsfiddle.net/imys/58965umL/1/\" target=\"_blank\" rel=\"external\">示例Demo</a>。</p><h2 id=\"实战示例\"><a href=\"#实战示例\" class=\"headerlink\" title=\"实战示例\"></a>实战示例</h2><p><a href=\"https://jsfiddle.net/imys/48xx5fxu/2/\" target=\"_blank\" rel=\"external\">鼠标悬浮显示区块数据的饼图</a>。</p>","categories":[],"tags":[{"name":"Html5","path":"api/tags/Html5.json"},{"name":"Canvas","path":"api/tags/Canvas.json"},{"name":"Event","path":"api/tags/Event.json"}]}
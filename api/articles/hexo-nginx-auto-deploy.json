{"title":"阿里云搭建Git服务，实现Hexo自动部署","slug":"hexo-nginx-auto-deploy","date":"2016-03-03T08:33:19.000Z","updated":"2016-11-12T19:07:27.842Z","comments":true,"path":"api/articles/hexo-nginx-auto-deploy.json","excerpt":"<p>使用 gitcafe pages 更新博客只需要敲几条命令，如果因为博客搬到了阿里云，却没有原来操作方便，那便得不偿失了。<br>所以就准备在服务器上建个 Git 远程仓库，用 Git Hooks 实现自动部署。</p><h2 id=\"Git-Hooks\"><a href=\"#Git-Hooks\" class=\"headerlink\" title=\"Git Hooks\"></a>Git Hooks</h2><p>Git Hooks 就是一些触发特定事件的脚本。比如 commit、push、merge 等等，也区分本地 Hooks 和服务端 Hooks。<br>我这次使用的是<code>post-receive</code>。</p><blockquote><p>当用户在本地仓库执行<code>git-push</code>命令时，服务器上远程仓库就会对应执行<code>git-receive-pack</code>命令，而<code>git-receive-pack</code>命令会调用<code>pre-receive</code>钩子。</p></blockquote><p>这需要在服务器上建立一个 Git 远程仓库，和一个用于获取更新（git pull）的本地仓库。</p><p>远程仓库：最原始的版本库，所有的本地仓库就可以克隆这个仓库。就像你在 Github 创建一个项目，这就是一个远程仓库。<br>本地仓库：这个就是平常的工作目录，容易理解。<br>","content":"<p>使用 gitcafe pages 更新博客只需要敲几条命令，如果因为博客搬到了阿里云，却没有原来操作方便，那便得不偿失了。<br>所以就准备在服务器上建个 Git 远程仓库，用 Git Hooks 实现自动部署。</p><h2 id=\"Git-Hooks\"><a href=\"#Git-Hooks\" class=\"headerlink\" title=\"Git Hooks\"></a>Git Hooks</h2><p>Git Hooks 就是一些触发特定事件的脚本。比如 commit、push、merge 等等，也区分本地 Hooks 和服务端 Hooks。<br>我这次使用的是<code>post-receive</code>。</p><blockquote><p>当用户在本地仓库执行<code>git-push</code>命令时，服务器上远程仓库就会对应执行<code>git-receive-pack</code>命令，而<code>git-receive-pack</code>命令会调用<code>pre-receive</code>钩子。</p></blockquote><p>这需要在服务器上建立一个 Git 远程仓库，和一个用于获取更新（git pull）的本地仓库。</p><p>远程仓库：最原始的版本库，所有的本地仓库就可以克隆这个仓库。就像你在 Github 创建一个项目，这就是一个远程仓库。<br>本地仓库：这个就是平常的工作目录，容易理解。<br><a id=\"more\"></a></p><p>总体的流程为：</p><ol><li>本地执行<code>git push</code>；</li><li>Git 服务器更新并 Hook；</li><li>执行<code>pre-receive</code>脚本，命令为：定位到服务器本地仓库目录，执行<code>git pull</code>。</li></ol><p>我的 git 已经安装了，Ubuntu 安装很简单：</p><pre><code>sudo apt-get install git\n</code></pre><p>创建 git 用户，用来运行 git 服务：</p><pre><code>sudo adduser git\n</code></pre><p>用 git 用户运行貌似是约定俗成的事，像 github 一个仓库的 URL 为<code>git@github.com:user/project.git</code>，@ 符号前面的 git 就是运行 git 服务的用户名。</p><p>初始化远程仓库：</p><p>我的目录名为<code>website</code>，仓库名为<code>blog</code>，以此为例。</p><pre><code>cd /website\nsudo git init --bare blog.git\n</code></pre><p>远程仓库名以<code>.git</code>结尾。还需要给 git 用户设置该目录的权限：</p><pre><code>sudo chown -R git:git blog.git\n</code></pre><p>出于安全考虑，禁用 shell 登录：</p><pre><code>vi /etc/passwd\n</code></pre><p>找到这一行：</p><pre><code>git:x:1002:1002:,,,:/home/git:/bin/bash\n</code></pre><p>修改为：</p><pre><code>git:x:1002:1002:,,,:/home/git:/usr/bin/git-shell\n</code></pre><p>可以使用<code>git-shell</code>，通过<code>ssh</code>使用 git，但无法使用 shell 登录。</p><p>创建证书登录，把本地公钥添加到<code>/home/git/.ssh/authorized_keys</code>。<br>不过默认的<code>id_rsa</code>公钥一般都被占用了，可以再建个其他名字，创建<code>.ssh/config</code>区分。</p><p>初始化服务器本地仓库：</p><p>我是在远程仓库旁边建立的。</p><pre><code>cd /website\ngit clone blog.git\n</code></pre><p>因为是在同一台电脑上，所以克隆直接使用本地路径。这将会在<code>website</code>生成一个名为<code>blog</code>本地仓库。</p><pre><code>ls -la\n</code></pre><p>可以看到当前路径下有一个<code>blog.git</code>目录和一个<code>blog</code>目录。</p><p>考虑到 git-hooks 运行使用的是 git 用户，也对服务器本地仓库授权：</p><pre><code>chown -R git:git blog\n</code></pre><p>设置 hook 执行脚本：</p><pre><code>vi blog.git/hooks/post-receive\n</code></pre><p>输入以下内容：</p><pre><code>#!/bin/sh\ncd /website/blog\ngit pull origin master\n</code></pre><p>很好理解，就是定位到服务器本地仓库然后拉取更新。</p><p>保存后赋予可执行权限：</p><pre><code>chmod +x blog.git/hooks/post-receive\n</code></pre><p>现在可以在本地（你的电脑上）进行测试了。</p><p>找一个目录，进行版本库克隆：</p><pre><code>git clone git@server:/website/blog.git\n</code></pre><p>server 是你的服务器域名或者IP。</p><p>因为仓库还没有内容，所以会显示：<code>You appear to have cloned an empty repository.</code> 你克隆了一个空仓库。</p><p>现在可以随便创建点东西，push 到远程仓库，然后到<code>/website/blog</code>目录下看看有没有变化。</p><p>我在操作的时候遇到一个错误：<strong>fatal: Not a git repository: ‘.’</strong></p><blockquote><p>因为 hook 脚本执行了 cd 之后，继续执行 git 语句拉取的时候还是在 hooks 文件夹下，而不是 cd 的文件路径。</p></blockquote><p>修改后的脚本如下：</p><pre><code>#!/bin/sh\nunset GIT_DIR #还原环境变量\ncd /website/blog\ngit pull origin master\n</code></pre><p>现在已经实现本地到远程服务器的同步了，只差一个 Web 服务器了。</p><h2 id=\"Nginx安装配置\"><a href=\"#Nginx安装配置\" class=\"headerlink\" title=\"Nginx安装配置\"></a>Nginx安装配置</h2><p>目前我的博客在 gitcafe 上，在 URL 后面随便加点后缀进入 404 页面，可以清楚的看到 nginx/1.8.0 的字样。以后还要玩负载均衡，服务器肯定就选它了。</p><pre><code>sudo apt-get install nginx\n</code></pre><p>看了很多文章，发现其中描述的 Nginx 的文件结构都不太一样，看来跟系统环境有关系。<br>我的目录结构如下，环境是阿里云 Ubuntu 14.04 ：</p><ul><li>所有的配置文件都在<code>/etc/nginx</code>下，并且每个虚拟主机已经安排在了<code>/etc/nginx/sites-available</code>下</li><li>启动程序文件在<code>/usr/sbin/nginx</code></li><li>日志放在了<code>/var/log/nginx</code>中，分别是<code>access.log</code>和<code>error.log</code></li><li>在<code>/etc/init.d/</code>下创建了启动脚本<code>nginx</code></li><li>默认的虚拟主机的目录设置在<code>/usr/share/nginx/html</code></li></ul><p>启动 Nginx ：</p><pre><code>sudo /etc/init.d/nginx start\n</code></pre><p>默认的服务器配置是 80 端口，如果你没有其他的 Web Server 在运行，打开服务器域名或 IP 应该可以看到<strong>Welcome to nginx!</strong></p><p>现在定位到配置文件，修改配置：</p><pre><code>vi /etc/nginx/nginx.conf\n</code></pre><p>找到<code>server { ... }</code>区域：</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen      80;     #端口</div><div class=\"line\">    server_name localhost yoursite.com;     #域名或IP</div><div class=\"line\">    root        /website/blog;      #站点根目录</div><div class=\"line\">    charset     utf-8;              #文件编码</div><div class=\"line\">    index       index.html index.htm;    #首页</div><div class=\"line\"></div><div class=\"line\">    error_page  404     /404.html;   #404页面</div><div class=\"line\">    error_page  500 502 503 504     /50x.html;   #服务端错误页面</div><div class=\"line\"></div><div class=\"line\">    #url访问匹配路径，可以添加多个</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        index       index.html index.htm;</div><div class=\"line\">        root        /website/blog;   #这里可以是绝对路径或者相对路径，基于站点根目录</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>可以用一条命令测试配置是否正确：</p><pre><code>nginx -t -c /etc/nginx/nginx.conf\n</code></pre><p>重启 Nginx 服务器使配置生效：</p><pre><code>/etc/init.d/nginx restart\n</code></pre><p>现在开始部署 Hexo。</p><h2 id=\"Hexo-部署\"><a href=\"#Hexo-部署\" class=\"headerlink\" title=\"Hexo 部署\"></a>Hexo 部署</h2><p>原来的 Hexo 使用的是 hexo-deployer-git 插件，会在 Hexo 下生成一个 .deploy_git 目录，从这个目录上传到 pages 分支。<br>现在我觉得不需要这个插件了，可以直接在 public 目录下初始化 git 仓库然后上传。</p><pre><code>cd hexo/public\ngit init\ngit add -A\ngit commit -m &apos;add myBlog&apos;\ngit remote add origin git@server:/website/blog.git\ngit push origin master\n</code></pre><p>这时候打开站点，就可以看到博客了。</p><p>我的域名还没有备案，之前注册的域名有备案号，需要迁到阿里云。<br>好像审核期间需要关站，真是麻烦。</p><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul><li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"external\">廖雪峰-搭建Git服务器</a></li><li><a href=\"http://icyleaf.com/2012/03/apps-auto-deploy-with-git/\" target=\"_blank\" rel=\"external\">使用 Git Hooks 实现自动项目部署</a></li><li><a href=\"http://www.nginx.cn/doc/index.html\" target=\"_blank\" rel=\"external\">Nginx中文文档</a></li></ul>","categories":[],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"Nginx","path":"api/tags/Nginx.json"},{"name":"Linux","path":"api/tags/Linux.json"},{"name":"部署","path":"api/tags/部署.json"}]}
{"title":"使用gulp+ejs模块化html","slug":"gulp-ejs-module","date":"2015-09-08T10:04:47.000Z","updated":"2016-11-12T19:13:01.627Z","comments":true,"path":"api/articles/gulp-ejs-module.json","excerpt":"<p>在静态页面目录中，同子目录下的页面往往有很多通用的模块。<br>平常的编码一般是通用的代码直接复制到各个页面，样式写成公用，然后在各个需要的页面引用。<br>而一个产品在实地运行中往往要经历无数次的迭代，于是页面文档结构和样式也在不断的变化。<br>独立性的页面比较轻松，一个页面修改就好了，而一些公用的页面模块往往需要在各个页面逐个修改。<br>这显然是一种极其枯燥的重复性动作！</p><p>在此之前我用 <code>C#</code> 写了一个文件批量替换的工具，用于批量替换某个目录下的某个模块代码。<br>虽然效率提高了一些，但是从方法学角度看绝对不是最好的。</p><p>很久之前就想过使用前端模块拼装 html。<br>以 <code>ejs</code> 为例，则需要在页面中引入模版解析文件 <code>ejs.js</code>，页面中还需要写一些 ejs 相关的配置代码。而这些东西对于后端套用页面来说是无用的，可能还会造成一些混乱。<br>还有一种引用方式是使用 <code>nodeJs</code> 调用 ejs 去解析模版文件，这样在预览静态页面时则需要建立 node 服务器。而当前团队中并不是每个人都装有 node 环境。</p><p>最近工作闲暇了又想到这个问题，其实要解决的最根本问题就是：</p><blockquote><p>模块化开发页面，开发完成后可以一条指令合并成可直接预览的静态页面。</p></blockquote><p>我早该想到 <code>gulp</code> 了，既然 gulp 是一个基于流的前端构建工具，那么对于这个问题应该是可以解决的。</p>","content":"<p>在静态页面目录中，同子目录下的页面往往有很多通用的模块。<br>平常的编码一般是通用的代码直接复制到各个页面，样式写成公用，然后在各个需要的页面引用。<br>而一个产品在实地运行中往往要经历无数次的迭代，于是页面文档结构和样式也在不断的变化。<br>独立性的页面比较轻松，一个页面修改就好了，而一些公用的页面模块往往需要在各个页面逐个修改。<br>这显然是一种极其枯燥的重复性动作！</p><p>在此之前我用 <code>C#</code> 写了一个文件批量替换的工具，用于批量替换某个目录下的某个模块代码。<br>虽然效率提高了一些，但是从方法学角度看绝对不是最好的。</p><p>很久之前就想过使用前端模块拼装 html。<br>以 <code>ejs</code> 为例，则需要在页面中引入模版解析文件 <code>ejs.js</code>，页面中还需要写一些 ejs 相关的配置代码。而这些东西对于后端套用页面来说是无用的，可能还会造成一些混乱。<br>还有一种引用方式是使用 <code>nodeJs</code> 调用 ejs 去解析模版文件，这样在预览静态页面时则需要建立 node 服务器。而当前团队中并不是每个人都装有 node 环境。</p><p>最近工作闲暇了又想到这个问题，其实要解决的最根本问题就是：</p><blockquote><p>模块化开发页面，开发完成后可以一条指令合并成可直接预览的静态页面。</p></blockquote><p>我早该想到 <code>gulp</code> 了，既然 gulp 是一个基于流的前端构建工具，那么对于这个问题应该是可以解决的。</p><a id=\"more\"></a><p><strong>起初我是这样想的：</strong></p><ol><li>模板中使用相对路径标记模块引用</li><li>读取文件把这些标记还原为路径</li><li>读取这些路径的文件内容插入到模板中</li><li>生成到对应目标目录</li></ol><p>这样做等于实现了一套模版解析合并的过程，并不困难。</p><p>在探索的过程中，我发现了一个基于 gulp 和 ejs 的插件 <code>gulp-ejs</code>，并按照示例实验后达成了我的想法。<br>随后新的问题便来了。</p><p>每个页面有着不同标题和样式、脚本引用，虽然可以在执行 gulp 任务时指定参数，但是不可能每个页面的参数配置都一样。<br>难道要为每个页面编写一个任务？你会甘心用这么傻的办法吗？<br>从设计模式角度讲，这个任务应该是唯一的，但是可以根据一些参数配置达到多态！</p><p><strong>之后我改造了 <code>gulp-ejs</code>：</strong></p><ol><li>在模板文件同级目录下添加同名的 <code>.json</code> 配置文件</li><li>在其对模板渲染时获取模板路径，再转换后缀为 json，这样就匹配到了对应的配置文件</li><li>解析 json 文件为 json 对象，作为参数传入 ejs 中，这样模版内就可以访问配置文件的数据了</li><li>之后便可以根据配置文件随心所欲的插入当前页面的特定项目</li></ol><p>这样标题、样式、脚本，神马都解决了！</p><p>就在刚才我又想到了另外一个主意。</p><p>如果你觉得每个模板对应一个 json 文件麻烦的话，可以只建立一个配置文件。<br>假如你有 index 、product 、service 三个模版，那么你的配置文件可以这样写：</p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"index\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"首页\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"product\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"产品页\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"service\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"服务页\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>那么在 index 模版中输出 <code>title</code>，就可以写成 <code>&lt;%=index.title %&gt;</code> 这种格式。<br>长久下去配置文件一定会越来越大，而且每个模版中都被注入了整站的配置项，真的好吗？</p><ul><li>为了使每个页面只注入当前页面的数据，可以在模版渲染前拿到模版名称，如 index ；</li><li>向 ejs 传入的数据就变成了 <code>config[&quot;index&quot;]</code>；</li><li>这样在每个模版中依然可以直接用 <code>&lt;%=title %&gt;</code> 这种格式调用了</li></ul><p>不管采取哪种办法，最终的结果是一致的。哪怕是每个模版注入整站配置的做法，也只是在 gulp 任务阶段执行效率低点，并不会上升到影响性能的高度。<br>不过，我还是倾向于一个页面对应一个配置文件的办法，谁让我是处女座。</p><p>以下是对该方案的简单描述。</p><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><pre><code>├ templates     模版\n├──── _partial      模块\n├──────── header.ejs   \n├──────── footer.ejs\n├──────── nav.ejs\n├──────── left.ejs\n├──────── right.ejs\n├──── index.ejs    布局页\n├──── index.json    布局页配置文件\n├ html      页面\n├──── index.html    生成的静态页面\n├ node_modules  node模块\n├ gulpfile.js   gulp\n</code></pre><h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><ol><li>模板编码，即 <code>templates/</code> 目录，一个布局页对应一个同名静态页面，按需引入或编写新的页面模块。在这个阶段可以使用express建立node服务器进行实时页面预览。</li><li>编写配置文件，使用通用的 <code>json</code> 格式，一个页面对应一个同名的配置文件。目前预想的配置信息有： <code>title：页面标题</code> 、<code>styles：依赖的样式文件路径</code>、 <code>scripts：依赖的脚本文件路径</code> ，随时可以根据实际情况添加新的配置。</li><li>执行 <code>gulp</code> 任务，生成页面到 <code>html/</code> 目录。</li></ol><h2 id=\"未模块化页面的处理\"><a href=\"#未模块化页面的处理\" class=\"headerlink\" title=\"未模块化页面的处理\"></a>未模块化页面的处理</h2><p>之前未模块化的静态页面，保持原样即可，因为在这个流程中与之前的页面是没有任何冲突关系的。<br>一些频繁修改的页面，可以按需抽取出模块，进行页面分割。</p><h2 id=\"完整Demo\"><a href=\"#完整Demo\" class=\"headerlink\" title=\"完整Demo\"></a>完整Demo</h2><blockquote><p><a href=\"https://github.com/yscoder/gulp-ejs-demo\" target=\"_blank\" rel=\"external\">https://github.com/yscoder/gulp-ejs-demo</a></p></blockquote><h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>可能我所做的这些对于国内一些优秀的前端团队来说很土，但是适合的才是最好的！<br>目前我所在的公司前端的职能还仅限于页面编码、交互实现和一些通用插件开发，起点真的很低。<br>不过，这也让我有了更多的机会去改革和实践新技术。</p>","categories":[],"tags":[{"name":"Gulp","path":"api/tags/Gulp.json"},{"name":"Ejs","path":"api/tags/Ejs.json"},{"name":"模块化","path":"api/tags/模块化.json"}]}
{"title":"Vue最佳实践","slug":"vue-best-practices","date":"2018-03-20T12:18:51.000Z","updated":"2018-04-17T14:59:59.901Z","comments":true,"path":"api/articles/vue-best-practices.json","excerpt":"<blockquote><p>记录我在使用 Vue 中发现的一些好的代码实践，希望能够保持更新。🤠</p></blockquote>","content":"<blockquote><p>记录我在使用 Vue 中发现的一些好的代码实践，希望能够保持更新。🤠</p></blockquote><a id=\"more\"></a><h2 id=\"this-引用\"><a href=\"#this-引用\" class=\"headerlink\" title=\"this 引用\"></a>this 引用</h2><p>在组件作用域内使用箭头函数可以保证 <code>this</code> 永远指向组件本身。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        hello() &#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.msg) <span class=\"comment\">// this 指向 window</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        hello() &#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.msg) <span class=\"comment\">// this 指向组件</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h2><p>绑定字符串不需要加冒号。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bad --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:str</span>=<span class=\"string\">\"'hello'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- good --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">str</span>=<span class=\"string\">\"hello\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure><p>布尔属性省略值时默认为 <code>true</code>。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-modal</span> <span class=\"attr\">visible</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-modal</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--等价于--&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--&lt;my-modal :visible=\"true\"&gt;&lt;/my-modal&gt;--&gt;</span></div></pre></td></tr></table></figure><p>绑定无参函数不需要加括号。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bad，括号多余 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- good，隐式传递了 event 对象 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure><p>只有一行代码的事件函数，可以直接写标签上。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"visible = true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h2><p>表单组件一般都支持双向绑定，实际场景中表单组件值发生变化往往要在 <code>POST or PUT</code> 请求之后。如果直接在 <code>v-model</code> 绑定原始值往往会打破单向数据流。</p><p>使用计算属性的 <code>get/set</code> 方式可以解决这个问题。（也适用 <code>.sync</code>）</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">`</span></div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">            &lt;input type=\"radio\" v-model=\"nameVal\" value=\"1\"&gt;</div><div class=\"line\">            &lt;input type=\"radio\" v-model=\"nameVal\" value=\"2\"&gt;</div><div class=\"line\">        &lt;/div&gt;`,</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">nameVal</span>: &#123;</div><div class=\"line\">            get() &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">            &#125;,</div><div class=\"line\">            set(val) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.edit(val)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        edit(name) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$http.put(<span class=\"string\">'/name'</span>, &#123; name &#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    created() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'/name'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = data.name</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"释放资源\"><a href=\"#释放资源\" class=\"headerlink\" title=\"释放资源\"></a>释放资源</h2><p>善用 <code>destory</code> 释放原生事件、第三方组件、全局事件总线等。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> bus <span class=\"keyword\">from</span> <span class=\"string\">'event-bus'</span></div><div class=\"line\"><span class=\"keyword\">import</span> plugin <span class=\"keyword\">from</span> <span class=\"string\">'plugin'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    created() &#123;</div><div class=\"line\">        bus.$on(<span class=\"string\">'hello'</span>, <span class=\"keyword\">this</span>.hello) <span class=\"comment\">// 注册全局事件</span></div><div class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.onResize) <span class=\"comment\">// DOM 事件</span></div><div class=\"line\">        plugin.init() <span class=\"comment\">// 第三方组件初始化</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    destoryed() &#123;</div><div class=\"line\">        bus.$off(<span class=\"string\">'hello'</span>, <span class=\"keyword\">this</span>.hello)</div><div class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.onResize)</div><div class=\"line\">        plugin.destory()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><p>Vue 内置了许多常用修饰符可以让你少写几行代码，提高开发效率。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 输入字符串转数字 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"value\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 输入字符串去前后空格 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">\"value\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 监听鼠标按键，支持 left, right, middle --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.left</span>=<span class=\"string\">\"onLeftClick\"</span>&gt;</span>点击鼠标左键<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.right</span>=<span class=\"string\">\"onRightClick\"</span>&gt;</span>点击鼠标右键<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 停止冒泡，阻止默认行为 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 键盘按下确认键，支持 keycode 和键别名 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只执行一次事件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 监听原生事件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></div></pre></td></tr></table></figure><p>以上是一些常用的修饰符，更多用法可以去文档上找找。</p><h2 id=\"数据请求\"><a href=\"#数据请求\" class=\"headerlink\" title=\"数据请求\"></a>数据请求</h2><p>切换路由请求数据时，一般都需要兼容两种视图打开方式：路由跳转和直接 URL 输入。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">        $route() &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fetchData()</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    methods() &#123;</div><div class=\"line\">        fetchData() &#123;</div><div class=\"line\">            <span class=\"comment\">// 避免重复请求</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isLoading) <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.isLoading = <span class=\"literal\">true</span></div><div class=\"line\">            <span class=\"comment\">// 请求数据</span></div><div class=\"line\">            <span class=\"comment\">// ajax...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    created() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fetchData()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>路由跳转会触发 <code>watch -&gt; $route</code>，如果是未创建的组件还会触发 <code>create</code>，直接 URL 只会触发 <code>created</code> 钩子。一般在两个位置都执行数据请求，再通过判断避免重复请求，还可以利用 <code>isLoading</code> 标记做加载动画。如果使用了 <code>keep-alive</code> 组件，还需要考虑 <code>activated</code> 钩子。</p><h2 id=\"减少嵌套层级\"><a href=\"#减少嵌套层级\" class=\"headerlink\" title=\"减少嵌套层级\"></a>减少嵌套层级</h2><p>组件即使未在 <code>props</code> 声明，也可以传递一些原生 DOM 属性。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bad --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-view\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- good --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content-view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div></pre></td></tr></table></figure><p>命名插槽中需要放置多个块时，可以利用 <code>template</code> 组件。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bad --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"hello\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- good --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"hello\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure><p>不管是内置组件还是自己的组件，有时候不需要多一层包裹去添加样式，反而因此增加了嵌套层级。</p><h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>过滤器的最佳应用场景应该是值的转换，比如：<code>Date</code> 类型日期转字符串、货币、字符截断、markdown 等等。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 按长度截断文字，补...，中文 = 2</span></div><div class=\"line\"><span class=\"keyword\">const</span> cnReg = <span class=\"regexp\">/[\\u4e00-\\u9fa5]/</span></div><div class=\"line\">Vue.filter(<span class=\"string\">'ellipsis'</span>, (str, len = <span class=\"number\">10</span>) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"built_in\">String</span>(str).trim()</div><div class=\"line\">    <span class=\"keyword\">const</span> max = text.length</div><div class=\"line\">    <span class=\"keyword\">while</span> (j &lt; max &amp;&amp; i &lt; len) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> c = text.charAt(j)</div><div class=\"line\">        ret += c</div><div class=\"line\">        j += <span class=\"number\">1</span></div><div class=\"line\">        i = cnReg.test(c) ? i + <span class=\"number\">2</span> : i + <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret === text ? text : <span class=\"string\">`<span class=\"subst\">$&#123;ret&#125;</span>...`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 日期转相对时间</span></div><div class=\"line\">Vue.filter(<span class=\"string\">'calendar'</span>, value =&gt; moment(value).calendar())</div></pre></td></tr></table></figure><p>也可以作一些业务数据区别展示。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.filter(<span class=\"string\">'userRole'</span>, value =&gt; [<span class=\"string\">'创建者'</span>, <span class=\"string\">'管理员'</span>, <span class=\"string\">'成员'</span>][value])</div></pre></td></tr></table></figure><h2 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h2><ul><li>布尔属性默认值为 <code>false</code> 可以省略</li><li>数组最好声明默认值 <code>[]</code>，保证数据请求成功前模版里的 <code>v-for</code> 不会出错</li><li>对象也需要注意是否声明了默认值 <code>{}</code>，避免模版中使用 <code>obj.xx</code> 报错</li></ul><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">visible</span>: Boolen, <span class=\"comment\">// 默认即为 false</span></div><div class=\"line\">        data: <span class=\"built_in\">Array</span>,     <span class=\"comment\">// 需要进行非空判断</span></div><div class=\"line\">        data2: &#123;         <span class=\"comment\">// 可安全使用 v-for</span></div><div class=\"line\">            type: <span class=\"built_in\">Array</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: []</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">obj</span>: <span class=\"built_in\">Object</span>,     <span class=\"comment\">// 需要进行非空判断</span></div><div class=\"line\">        obj2: &#123;          <span class=\"comment\">// 可安全使用 obj.xx</span></div><div class=\"line\">            type: <span class=\"built_in\">Object</span>,</div><div class=\"line\">            <span class=\"keyword\">default</span>() &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> &#123;&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>如果模版中绑定了 <code>obj.xx</code> 时，需要注意 <code>obj</code> 是否是异步数据，默认值是否为 <code>null</code>。安全起见，可在组件最外层加 <code>v-if</code> 判断。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!!obj\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;obj.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">obj</span>: <span class=\"literal\">null</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>对于经常发生变化的一级、二级菜单导航，可以和路由数据结合起来，按模块划分，视图直接引用对应模块的路由数据来生成导航，减少维护成本。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// routes.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> settingRoutes = []</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userRoutes = []</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [...settingRoutes, ...userRoutes]</div></pre></td></tr></table></figure><p>菜单组件中：</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in menus\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.name\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"item\"</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; settingRoutes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../routes'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"attr\">menus</span>: settingRoutes</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=\"继承和混合\"><a href=\"#继承和混合\" class=\"headerlink\" title=\"继承和混合\"></a>继承和混合</h2><p>用过<code>ElementUI</code>的同学，都知道其 <a href=\"http://element-cn.eleme.io/#/zh-CN/component/dialog\" target=\"_blank\" rel=\"external\">Dialog 组件</a> 是不支持垂直居中，只提供了一个<code>top</code>属性用于设置组件内容节点到顶部的距离。早期 <a href=\"http://element-cn.eleme.io/1.4/#/zh-CN/component/dialog\" target=\"_blank\" rel=\"external\">1.x</a> 版本时 Dialog 组件也不支持<code>append-to-body</code>。我们可以通过继承和混合来扩展这些需要的特性。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// dialogEx.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Dialog &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'ElDialogEx'</span>,</div><div class=\"line\">    <span class=\"attr\">extends</span>: Dialog,</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">appendToBody</span>: &#123;</div><div class=\"line\">            <span class=\"comment\">// 把组件插入 body 下</span></div><div class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">center</span>: <span class=\"built_in\">Boolean</span> <span class=\"comment\">// 设置垂直居中</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">        sizeClass() &#123;</div><div class=\"line\">            <span class=\"comment\">// 这个 sizeClass 计算属性是组件源码里就有的，这里是利用了类名支持字符串拼接的特性，在这个函数里增加了垂直居中的自定义类拼接</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`el-dialog--<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.size&#125;</span>`</span> + <span class=\"keyword\">this</span>.center ? <span class=\"string\">' dialog-center '</span> : <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mounted() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.appendToBody) <span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.$el)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    beforeDestroy() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.appendToBody) <span class=\"keyword\">this</span>.$el.parentNode.remove(<span class=\"keyword\">this</span>.$el)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>之后你又发现，在其他的一些组件中也需要<code>appendToBody</code>这个特性，那么就可以把相关的代码写成<code>mixins</code>。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// appendToBody.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">appendToBody</span>: &#123;</div><div class=\"line\">            <span class=\"comment\">// 把组件插入 body 下</span></div><div class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</div><div class=\"line\">            <span class=\"attr\">default</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mounted() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.appendToBody) <span class=\"built_in\">document</span>.body.appendChild(<span class=\"keyword\">this</span>.$el)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    beforeDestroy() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.appendToBody) <span class=\"keyword\">this</span>.$el.parentNode.remove(<span class=\"keyword\">this</span>.$el)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>现在<code>dialogEx</code>组件可以写的更简单。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// dialogEx.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Dialog &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></div><div class=\"line\"><span class=\"keyword\">import</span> appendToBody <span class=\"keyword\">from</span> <span class=\"string\">'mixins/appendToBody'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'ElDialogEx'</span>,</div><div class=\"line\">    <span class=\"attr\">extends</span>: Dialog,</div><div class=\"line\">    <span class=\"attr\">mixins</span>: [appendToBody],</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">center</span>: <span class=\"built_in\">Boolean</span> <span class=\"comment\">// 设置垂直居中</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">        sizeClass() &#123;</div><div class=\"line\">            <span class=\"comment\">// 这个 sizeClass 计算属性是组件源码里就有的，这里是利用了类名支持字符串拼接的特性，在这个函数里增加了垂直居中的自定义类拼接</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`el-dialog--<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.size&#125;</span>`</span> + <span class=\"keyword\">this</span>.center ? <span class=\"string\">' dialog-center '</span> : <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"第三方库的集成\"><a href=\"#第三方库的集成\" class=\"headerlink\" title=\"第三方库的集成\"></a>第三方库的集成</h2><p>第三方库一般是传统的基于 DOM 和原生 js。它们虽然写起来没有使用任何的代码模版，但出于作者的编程经验其实都符合了大众使用预期。</p><p>任何一个库一般都会提供以下的接口：</p><ul><li>使用自定义配置初始化</li><li>可访问的属性</li><li>可调用的功能函数</li><li>事件绑定</li><li>良好的生命周期钩子</li></ul><blockquote><p>如果没有足够的编程经验用原生 js 去写一个插件可能最后就是一团乱麻。这也是 Vue 等众多前端框架的作用，它们约束了一个模块的代码模版，提供了事件管理、生命周期运行、属性和函数的定义，使即使经验不足的人也能写出一个看得过去的模块。</p></blockquote><p>把第三方库转换为一个 Vue 组件，其实就是把这个库的接口挂到 Vue 组件对应的组件选项上去。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">options</span>: <span class=\"built_in\">Object</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">instance</span>: <span class=\"literal\">null</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        doSomething(xxx) &#123;</div><div class=\"line\">            <span class=\"comment\">// lib 的操作函数</span></div><div class=\"line\">            <span class=\"comment\">// 外部使用 $refs 调用</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.instance.doSomething(xxx)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">        libProp() &#123;</div><div class=\"line\">            <span class=\"comment\">// lib 的可访问属性使用计算属性访问</span></div><div class=\"line\">            <span class=\"comment\">// 外部使用 $refs 调用</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance.prop</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">        options(val) &#123;</div><div class=\"line\">            <span class=\"comment\">// 监听配置更新，调用 lib 接口更新配置</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (val) <span class=\"keyword\">this</span>.instance.updateOptions(val)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    mounted() &#123;</div><div class=\"line\">        <span class=\"comment\">// mounted 或者 created 对应 lib 实例化并传入自定义配置</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> Lib(<span class=\"keyword\">this</span>.$el, <span class=\"keyword\">this</span>.options)</div><div class=\"line\">        <span class=\"comment\">// lib 内的事件 $emit 出去，外部监听</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.instance.on(<span class=\"string\">'update'</span>, (...args) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update'</span>, ...args)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    destroyed() &#123;</div><div class=\"line\">        <span class=\"comment\">// lib 如果提供了 destroy 等销毁资源的函数一般都会对其内部的 DOM 事件解绑</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.instance.destroy()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>也可能你想把一个库变为一个 Vue 指令。</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    install(Vue, option = &#123;&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// 存放全局配置</span></div><div class=\"line\">        <span class=\"keyword\">const</span> defaults = option</div><div class=\"line\"></div><div class=\"line\">        Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">            bind(el, &#123; value &#125;) &#123;</div><div class=\"line\">                <span class=\"comment\">// 当前配置混合全局配置</span></div><div class=\"line\">                <span class=\"keyword\">const</span> options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaults, value)</div><div class=\"line\">                <span class=\"keyword\">const</span> lib = <span class=\"keyword\">new</span> Lib(el, options)</div><div class=\"line\">                el._libInstace = lib <span class=\"comment\">// 缓存 lib 实例</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            update(el, &#123; value &#125;, vnode) &#123;</div><div class=\"line\">                <span class=\"comment\">// 更新 lib 配置</span></div><div class=\"line\">                el._libInstace.setOptions(value)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            unbind(el) &#123;</div><div class=\"line\">                <span class=\"comment\">// 销毁 lib</span></div><div class=\"line\">                el._libInstace.destroy()</div><div class=\"line\">                <span class=\"keyword\">delete</span> el._libInstace</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>指令有着完善的生命周期钩子，但在数据管理上偏弱。一般用于单一功能的集成，或者只需要一次初始化的插件。</p><blockquote><p>指令中可通过 <code>el</code> 或 <code>el.dataset</code> 进行生命周期间的数据共享。</p></blockquote>","categories":[],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"Vue","path":"api/tags/Vue.json"}]}
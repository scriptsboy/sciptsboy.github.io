{"title":"前端静态数据的管理","slug":"front-end-static-data-manage","date":"2018-04-17T13:18:01.000Z","updated":"2018-04-17T14:54:37.330Z","comments":true,"path":"api/articles/front-end-static-data-manage.json","excerpt":"<h2 id=\"静态数据\"><a href=\"#静态数据\" class=\"headerlink\" title=\"静态数据\"></a>静态数据</h2><p>所谓静态数据，本文内指的是一些静态常量、配置化数据以及枚举类数据等，很少变化或者说很少在运行时变化的数据。</p><p>例如：API 服务器的 <code>rootPath</code>、常用的正则表达式、业务相关的枚举类数据、固定的填充数据以及 i18n 等。</p><p>虽然这些数据很少变化，但在一个大的项目中非常容易到处使用。常见的问题有：</p><ul><li>同样规则的正则表达式，这写一个，那写一个</li><li>业务枚举数据各种迷之 magicNumber 进行判断比较，如 <code>if(this.type === 1)</code>，<code>1</code> 是啥？？？</li><li>对同一种数据的多处定义，A 组件一个 <code>framework: [&#39;Vue&#39;, &#39;React&#39;, &#39;Angular&#39;]</code>，B 组件用的时候又定义一次</li><li>i18n 时，不同模块中的类型场景定义多个描述</li><li>……</li></ul><p>这些问题的出现就给后期项目维护增加了时间和沟通成本，有意识的提取静态数据是必须要做的事。</p>","content":"<h2 id=\"静态数据\"><a href=\"#静态数据\" class=\"headerlink\" title=\"静态数据\"></a>静态数据</h2><p>所谓静态数据，本文内指的是一些静态常量、配置化数据以及枚举类数据等，很少变化或者说很少在运行时变化的数据。</p><p>例如：API 服务器的 <code>rootPath</code>、常用的正则表达式、业务相关的枚举类数据、固定的填充数据以及 i18n 等。</p><p>虽然这些数据很少变化，但在一个大的项目中非常容易到处使用。常见的问题有：</p><ul><li>同样规则的正则表达式，这写一个，那写一个</li><li>业务枚举数据各种迷之 magicNumber 进行判断比较，如 <code>if(this.type === 1)</code>，<code>1</code> 是啥？？？</li><li>对同一种数据的多处定义，A 组件一个 <code>framework: [&#39;Vue&#39;, &#39;React&#39;, &#39;Angular&#39;]</code>，B 组件用的时候又定义一次</li><li>i18n 时，不同模块中的类型场景定义多个描述</li><li>……</li></ul><p>这些问题的出现就给后期项目维护增加了时间和沟通成本，有意识的提取静态数据是必须要做的事。</p><a id=\"more\"></a><h2 id=\"静态数据分离\"><a href=\"#静态数据分离\" class=\"headerlink\" title=\"静态数据分离\"></a>静态数据分离</h2><h3 id=\"配置、工具类数据\"><a href=\"#配置、工具类数据\" class=\"headerlink\" title=\"配置、工具类数据\"></a>配置、工具类数据</h3><p>类似 AJAX、WebSocket 等常用模块配置，可以抽取到一个公共的 <code>appConf.js</code> 文件中，通过引用配置文件对模块进行配置。常用的正则也抽取到一个工具模块中。类似的还有校验类数据，比如允许用户上传的文件大小、文件类型等。</p><h3 id=\"枚举类数据\"><a href=\"#枚举类数据\" class=\"headerlink\" title=\"枚举类数据\"></a>枚举类数据</h3><p>一个用户的角色、权限、状态等数据，前端接收到的一般是 <code>{ role: 0, state: 1 }</code> 这种，那么在代码中通常有三种使用场景：</p><ol><li>内容展示：<code>user.role === 0 ? &#39;管理员&#39; : &#39;成员&#39;</code></li><li>权限判断：<code>user.role === 0 &amp;&amp; doSomething()</code></li><li>选择、过滤时的列表展示：<code>[{ value: 0, text: &#39;管理员&#39;}, { value: 1, text: &#39;成员&#39;}]</code></li></ol><p>此类数据后端都犯不着建个表存储，定个枚举类完事。如果是前后端同构的项目，大家都调用同一个枚举模块就行了。多数情况下，前端也需要对此类数据集中化管理，让之后的代码维护有路径可寻。</p><p>我的做法有：</p><ol><li>由于 JS 目前没有内置枚举类，可以使用对象模拟，或者自己包装一个枚举类的实现。</li><li>抽取到前端 <code>service</code> 层，与同一模块下的业务函数放一块。</li></ol><p>个人更倾向于第二种：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// userService</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> MAGANER = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> MEMBER = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> isManager = <span class=\"function\"><span class=\"params\">role</span> =&gt;</span> MAGANER === role</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> isMember = <span class=\"function\"><span class=\"params\">role</span> =&gt;</span> MEMBER === role</div></pre></td></tr></table></figure><h3 id=\"i18n\"><a href=\"#i18n\" class=\"headerlink\" title=\"i18n\"></a>i18n</h3><p>i18n 的数据不仅要按业务模块纵深划分，还要考虑横切的通用类数据。</p><ul><li>纵深：user、project、docs…</li><li>横切：action、date、httpCode…</li></ul><p>如果只按模块划分，那么可能就会出现重复定义的按钮文字、触发动作等，如下：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">user</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">enter</span>: <span class=\"string\">'保存'</span>,</div><div class=\"line\">        <span class=\"attr\">remove</span>: <span class=\"string\">'删除'</span>,</div><div class=\"line\">        <span class=\"attr\">msgcode</span>: &#123;</div><div class=\"line\">            <span class=\"number\">10001</span>: <span class=\"string\">'添加用户成功！'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">project</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">save</span>: <span class=\"string\">'保存'</span>,</div><div class=\"line\">        <span class=\"attr\">deleted</span>: <span class=\"string\">'删除'</span>,</div><div class=\"line\">        <span class=\"attr\">msgcode</span>: &#123;</div><div class=\"line\">            <span class=\"number\">10001</span>: <span class=\"string\">'添加项目成功！'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p>重复场景、语义的文字多处定义，而且属性名也不一致。改善后：</p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">action</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">enter</span>: <span class=\"string\">'确认'</span>,</div><div class=\"line\">        <span class=\"attr\">save</span>: <span class=\"string\">'保存'</span>,</div><div class=\"line\">        <span class=\"attr\">remove</span>: <span class=\"string\">'删除'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">httpcode</span>: &#123;</div><div class=\"line\">        <span class=\"number\">10001</span>: <span class=\"string\">'添加&#123;0&#125;成功！'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">user</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"attr\">project</span>: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><h2 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h2><p>内容没什么技术含量，纯粹是出于代码洁癖，就是不想在项目看见任何重复的东西。</p>","categories":[],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"数据管理","path":"api/tags/数据管理.json"}]}